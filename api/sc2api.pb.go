// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sc2api.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_nil       Status = 0
	Status_launched  Status = 1
	Status_init_game Status = 2
	Status_in_game   Status = 3
	Status_in_replay Status = 4
	Status_ended     Status = 5
	Status_quit      Status = 6
	Status_unknown   Status = 99
)

var Status_name = map[int32]string{
	0:  "Status_nil",
	1:  "launched",
	2:  "init_game",
	3:  "in_game",
	4:  "in_replay",
	5:  "ended",
	6:  "quit",
	99: "unknown",
}
var Status_value = map[string]int32{
	"Status_nil": 0,
	"launched":   1,
	"init_game":  2,
	"in_game":    3,
	"in_replay":  4,
	"ended":      5,
	"quit":       6,
	"unknown":    99,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{0}
}

type Difficulty int32

const (
	Difficulty_nil         Difficulty = 0
	Difficulty_VeryEasy    Difficulty = 1
	Difficulty_Easy        Difficulty = 2
	Difficulty_Medium      Difficulty = 3
	Difficulty_MediumHard  Difficulty = 4
	Difficulty_Hard        Difficulty = 5
	Difficulty_Harder      Difficulty = 6
	Difficulty_VeryHard    Difficulty = 7
	Difficulty_CheatVision Difficulty = 8
	Difficulty_CheatMoney  Difficulty = 9
	Difficulty_CheatInsane Difficulty = 10
)

var Difficulty_name = map[int32]string{
	0:  "Difficulty_nil",
	1:  "VeryEasy",
	2:  "Easy",
	3:  "Medium",
	4:  "MediumHard",
	5:  "Hard",
	6:  "Harder",
	7:  "VeryHard",
	8:  "CheatVision",
	9:  "CheatMoney",
	10: "CheatInsane",
}
var Difficulty_value = map[string]int32{
	"Difficulty_nil": 0,
	"VeryEasy":       1,
	"Easy":           2,
	"Medium":         3,
	"MediumHard":     4,
	"Hard":           5,
	"Harder":         6,
	"VeryHard":       7,
	"CheatVision":    8,
	"CheatMoney":     9,
	"CheatInsane":    10,
}

func (x Difficulty) String() string {
	return proto.EnumName(Difficulty_name, int32(x))
}
func (Difficulty) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{1}
}

type PlayerType int32

const (
	PlayerType_nil         PlayerType = 0
	PlayerType_Participant PlayerType = 1
	PlayerType_Computer    PlayerType = 2
	PlayerType_Observer    PlayerType = 3
)

var PlayerType_name = map[int32]string{
	0: "PlayerType_nil",
	1: "Participant",
	2: "Computer",
	3: "Observer",
}
var PlayerType_value = map[string]int32{
	"PlayerType_nil": 0,
	"Participant":    1,
	"Computer":       2,
	"Observer":       3,
}

func (x PlayerType) String() string {
	return proto.EnumName(PlayerType_name, int32(x))
}
func (PlayerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{2}
}

type Alert int32

const (
	Alert_nil                   Alert = 0
	Alert_NuclearLaunchDetected Alert = 1
	Alert_NydusWormDetected     Alert = 2
)

var Alert_name = map[int32]string{
	0: "Alert_nil",
	1: "NuclearLaunchDetected",
	2: "NydusWormDetected",
}
var Alert_value = map[string]int32{
	"Alert_nil":             0,
	"NuclearLaunchDetected": 1,
	"NydusWormDetected":     2,
}

func (x Alert) String() string {
	return proto.EnumName(Alert_name, int32(x))
}
func (Alert) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{3}
}

type Result int32

const (
	Result_nil       Result = 0
	Result_Victory   Result = 1
	Result_Defeat    Result = 2
	Result_Tie       Result = 3
	Result_Undecided Result = 4
)

var Result_name = map[int32]string{
	0: "Result_nil",
	1: "Victory",
	2: "Defeat",
	3: "Tie",
	4: "Undecided",
}
var Result_value = map[string]int32{
	"Result_nil": 0,
	"Victory":    1,
	"Defeat":     2,
	"Tie":        3,
	"Undecided":  4,
}

func (x Result) String() string {
	return proto.EnumName(Result_name, int32(x))
}
func (Result) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{4}
}

type ResponseCreateGame_Error int32

const (
	ResponseCreateGame_nil                    ResponseCreateGame_Error = 0
	ResponseCreateGame_MissingMap             ResponseCreateGame_Error = 1
	ResponseCreateGame_InvalidMapPath         ResponseCreateGame_Error = 2
	ResponseCreateGame_InvalidMapData         ResponseCreateGame_Error = 3
	ResponseCreateGame_InvalidMapName         ResponseCreateGame_Error = 4
	ResponseCreateGame_InvalidMapHandle       ResponseCreateGame_Error = 5
	ResponseCreateGame_MissingPlayerSetup     ResponseCreateGame_Error = 6
	ResponseCreateGame_InvalidPlayerSetup     ResponseCreateGame_Error = 7
	ResponseCreateGame_MultiplayerUnsupported ResponseCreateGame_Error = 8
)

var ResponseCreateGame_Error_name = map[int32]string{
	0: "Error_nil",
	1: "MissingMap",
	2: "InvalidMapPath",
	3: "InvalidMapData",
	4: "InvalidMapName",
	5: "InvalidMapHandle",
	6: "MissingPlayerSetup",
	7: "InvalidPlayerSetup",
	8: "MultiplayerUnsupported",
}
var ResponseCreateGame_Error_value = map[string]int32{
	"Error_nil":              0,
	"MissingMap":             1,
	"InvalidMapPath":         2,
	"InvalidMapData":         3,
	"InvalidMapName":         4,
	"InvalidMapHandle":       5,
	"MissingPlayerSetup":     6,
	"InvalidPlayerSetup":     7,
	"MultiplayerUnsupported": 8,
}

func (x ResponseCreateGame_Error) String() string {
	return proto.EnumName(ResponseCreateGame_Error_name, int32(x))
}
func (ResponseCreateGame_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{4, 0}
}

type ResponseJoinGame_Error int32

const (
	ResponseJoinGame_nil                     ResponseJoinGame_Error = 0
	ResponseJoinGame_MissingParticipation    ResponseJoinGame_Error = 1
	ResponseJoinGame_InvalidObservedPlayerId ResponseJoinGame_Error = 2
	ResponseJoinGame_MissingOptions          ResponseJoinGame_Error = 3
	ResponseJoinGame_MissingPorts            ResponseJoinGame_Error = 4
	ResponseJoinGame_GameFull                ResponseJoinGame_Error = 5
	ResponseJoinGame_LaunchError             ResponseJoinGame_Error = 6
	ResponseJoinGame_FeatureUnsupported      ResponseJoinGame_Error = 7
	ResponseJoinGame_NoSpaceForUser          ResponseJoinGame_Error = 8
	ResponseJoinGame_MapDoesNotExist         ResponseJoinGame_Error = 9
	ResponseJoinGame_CannotOpenMap           ResponseJoinGame_Error = 10
	ResponseJoinGame_ChecksumError           ResponseJoinGame_Error = 11
	ResponseJoinGame_NetworkError            ResponseJoinGame_Error = 12
	ResponseJoinGame_OtherError              ResponseJoinGame_Error = 13
)

var ResponseJoinGame_Error_name = map[int32]string{
	0:  "Error_nil",
	1:  "MissingParticipation",
	2:  "InvalidObservedPlayerId",
	3:  "MissingOptions",
	4:  "MissingPorts",
	5:  "GameFull",
	6:  "LaunchError",
	7:  "FeatureUnsupported",
	8:  "NoSpaceForUser",
	9:  "MapDoesNotExist",
	10: "CannotOpenMap",
	11: "ChecksumError",
	12: "NetworkError",
	13: "OtherError",
}
var ResponseJoinGame_Error_value = map[string]int32{
	"Error_nil":               0,
	"MissingParticipation":    1,
	"InvalidObservedPlayerId": 2,
	"MissingOptions":          3,
	"MissingPorts":            4,
	"GameFull":                5,
	"LaunchError":             6,
	"FeatureUnsupported":      7,
	"NoSpaceForUser":          8,
	"MapDoesNotExist":         9,
	"CannotOpenMap":           10,
	"ChecksumError":           11,
	"NetworkError":            12,
	"OtherError":              13,
}

func (x ResponseJoinGame_Error) String() string {
	return proto.EnumName(ResponseJoinGame_Error_name, int32(x))
}
func (ResponseJoinGame_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{7, 0}
}

type ResponseRestartGame_Error int32

const (
	ResponseRestartGame_nil         ResponseRestartGame_Error = 0
	ResponseRestartGame_LaunchError ResponseRestartGame_Error = 1
)

var ResponseRestartGame_Error_name = map[int32]string{
	0: "Error_nil",
	1: "LaunchError",
}
var ResponseRestartGame_Error_value = map[string]int32{
	"Error_nil":   0,
	"LaunchError": 1,
}

func (x ResponseRestartGame_Error) String() string {
	return proto.EnumName(ResponseRestartGame_Error_name, int32(x))
}
func (ResponseRestartGame_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{9, 0}
}

type ResponseStartReplay_Error int32

const (
	ResponseStartReplay_nil                     ResponseStartReplay_Error = 0
	ResponseStartReplay_MissingReplay           ResponseStartReplay_Error = 1
	ResponseStartReplay_InvalidReplayPath       ResponseStartReplay_Error = 2
	ResponseStartReplay_InvalidReplayData       ResponseStartReplay_Error = 3
	ResponseStartReplay_InvalidMapData          ResponseStartReplay_Error = 4
	ResponseStartReplay_InvalidObservedPlayerId ResponseStartReplay_Error = 5
	ResponseStartReplay_MissingOptions          ResponseStartReplay_Error = 6
	ResponseStartReplay_LaunchError             ResponseStartReplay_Error = 7
)

var ResponseStartReplay_Error_name = map[int32]string{
	0: "Error_nil",
	1: "MissingReplay",
	2: "InvalidReplayPath",
	3: "InvalidReplayData",
	4: "InvalidMapData",
	5: "InvalidObservedPlayerId",
	6: "MissingOptions",
	7: "LaunchError",
}
var ResponseStartReplay_Error_value = map[string]int32{
	"Error_nil":               0,
	"MissingReplay":           1,
	"InvalidReplayPath":       2,
	"InvalidReplayData":       3,
	"InvalidMapData":          4,
	"InvalidObservedPlayerId": 5,
	"MissingOptions":          6,
	"LaunchError":             7,
}

func (x ResponseStartReplay_Error) String() string {
	return proto.EnumName(ResponseStartReplay_Error_name, int32(x))
}
func (ResponseStartReplay_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{11, 0}
}

type ResponseMapCommand_Error int32

const (
	ResponseMapCommand_nil            ResponseMapCommand_Error = 0
	ResponseMapCommand_NoTriggerError ResponseMapCommand_Error = 1
)

var ResponseMapCommand_Error_name = map[int32]string{
	0: "Error_nil",
	1: "NoTriggerError",
}
var ResponseMapCommand_Error_value = map[string]int32{
	"Error_nil":      0,
	"NoTriggerError": 1,
}

func (x ResponseMapCommand_Error) String() string {
	return proto.EnumName(ResponseMapCommand_Error_name, int32(x))
}
func (ResponseMapCommand_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{13, 0}
}

type ResponseReplayInfo_Error int32

const (
	ResponseReplayInfo_nil               ResponseReplayInfo_Error = 0
	ResponseReplayInfo_MissingReplay     ResponseReplayInfo_Error = 1
	ResponseReplayInfo_InvalidReplayPath ResponseReplayInfo_Error = 2
	ResponseReplayInfo_InvalidReplayData ResponseReplayInfo_Error = 3
	ResponseReplayInfo_ParsingError      ResponseReplayInfo_Error = 4
	ResponseReplayInfo_DownloadError     ResponseReplayInfo_Error = 5
)

var ResponseReplayInfo_Error_name = map[int32]string{
	0: "Error_nil",
	1: "MissingReplay",
	2: "InvalidReplayPath",
	3: "InvalidReplayData",
	4: "ParsingError",
	5: "DownloadError",
}
var ResponseReplayInfo_Error_value = map[string]int32{
	"Error_nil":         0,
	"MissingReplay":     1,
	"InvalidReplayPath": 2,
	"InvalidReplayData": 3,
	"ParsingError":      4,
	"DownloadError":     5,
}

func (x ResponseReplayInfo_Error) String() string {
	return proto.EnumName(ResponseReplayInfo_Error_name, int32(x))
}
func (ResponseReplayInfo_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{39, 0}
}

type ResponseSaveMap_Error int32

const (
	ResponseSaveMap_nil            ResponseSaveMap_Error = 0
	ResponseSaveMap_InvalidMapData ResponseSaveMap_Error = 1
)

var ResponseSaveMap_Error_name = map[int32]string{
	0: "Error_nil",
	1: "InvalidMapData",
}
var ResponseSaveMap_Error_value = map[string]int32{
	"Error_nil":      0,
	"InvalidMapData": 1,
}

func (x ResponseSaveMap_Error) String() string {
	return proto.EnumName(ResponseSaveMap_Error_name, int32(x))
}
func (ResponseSaveMap_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{43, 0}
}

type ActionChat_Channel int32

const (
	ActionChat_nil       ActionChat_Channel = 0
	ActionChat_Broadcast ActionChat_Channel = 1
	ActionChat_Team      ActionChat_Channel = 2
)

var ActionChat_Channel_name = map[int32]string{
	0: "Channel_nil",
	1: "Broadcast",
	2: "Team",
}
var ActionChat_Channel_value = map[string]int32{
	"Channel_nil": 0,
	"Broadcast":   1,
	"Team":        2,
}

func (x ActionChat_Channel) String() string {
	return proto.EnumName(ActionChat_Channel_name, int32(x))
}
func (ActionChat_Channel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{55, 0}
}

type Request struct {
	// Types that are valid to be assigned to Request:
	//	*Request_CreateGame
	//	*Request_JoinGame
	//	*Request_RestartGame
	//	*Request_StartReplay
	//	*Request_LeaveGame
	//	*Request_QuickSave
	//	*Request_QuickLoad
	//	*Request_Quit
	//	*Request_GameInfo
	//	*Request_Observation
	//	*Request_Action
	//	*Request_ObsAction
	//	*Request_Step
	//	*Request_Data
	//	*Request_Query
	//	*Request_SaveReplay
	//	*Request_MapCommand
	//	*Request_ReplayInfo
	//	*Request_AvailableMaps
	//	*Request_SaveMap
	//	*Request_Ping
	//	*Request_Debug
	Request isRequest_Request `protobuf_oneof:"request"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type isRequest_Request interface {
	isRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Request_CreateGame struct {
	CreateGame *RequestCreateGame `protobuf:"bytes,1,opt,name=create_game,json=createGame,oneof"`
}
type Request_JoinGame struct {
	JoinGame *RequestJoinGame `protobuf:"bytes,2,opt,name=join_game,json=joinGame,oneof"`
}
type Request_RestartGame struct {
	RestartGame *RequestRestartGame `protobuf:"bytes,3,opt,name=restart_game,json=restartGame,oneof"`
}
type Request_StartReplay struct {
	StartReplay *RequestStartReplay `protobuf:"bytes,4,opt,name=start_replay,json=startReplay,oneof"`
}
type Request_LeaveGame struct {
	LeaveGame *RequestLeaveGame `protobuf:"bytes,5,opt,name=leave_game,json=leaveGame,oneof"`
}
type Request_QuickSave struct {
	QuickSave *RequestQuickSave `protobuf:"bytes,6,opt,name=quick_save,json=quickSave,oneof"`
}
type Request_QuickLoad struct {
	QuickLoad *RequestQuickLoad `protobuf:"bytes,7,opt,name=quick_load,json=quickLoad,oneof"`
}
type Request_Quit struct {
	Quit *RequestQuit `protobuf:"bytes,8,opt,name=quit,oneof"`
}
type Request_GameInfo struct {
	GameInfo *RequestGameInfo `protobuf:"bytes,9,opt,name=game_info,json=gameInfo,oneof"`
}
type Request_Observation struct {
	Observation *RequestObservation `protobuf:"bytes,10,opt,name=observation,oneof"`
}
type Request_Action struct {
	Action *RequestAction `protobuf:"bytes,11,opt,name=action,oneof"`
}
type Request_ObsAction struct {
	ObsAction *RequestObserverAction `protobuf:"bytes,21,opt,name=obs_action,json=obsAction,oneof"`
}
type Request_Step struct {
	Step *RequestStep `protobuf:"bytes,12,opt,name=step,oneof"`
}
type Request_Data struct {
	Data *RequestData `protobuf:"bytes,13,opt,name=data,oneof"`
}
type Request_Query struct {
	Query *RequestQuery `protobuf:"bytes,14,opt,name=query,oneof"`
}
type Request_SaveReplay struct {
	SaveReplay *RequestSaveReplay `protobuf:"bytes,15,opt,name=save_replay,json=saveReplay,oneof"`
}
type Request_MapCommand struct {
	MapCommand *RequestMapCommand `protobuf:"bytes,22,opt,name=map_command,json=mapCommand,oneof"`
}
type Request_ReplayInfo struct {
	ReplayInfo *RequestReplayInfo `protobuf:"bytes,16,opt,name=replay_info,json=replayInfo,oneof"`
}
type Request_AvailableMaps struct {
	AvailableMaps *RequestAvailableMaps `protobuf:"bytes,17,opt,name=available_maps,json=availableMaps,oneof"`
}
type Request_SaveMap struct {
	SaveMap *RequestSaveMap `protobuf:"bytes,18,opt,name=save_map,json=saveMap,oneof"`
}
type Request_Ping struct {
	Ping *RequestPing `protobuf:"bytes,19,opt,name=ping,oneof"`
}
type Request_Debug struct {
	Debug *RequestDebug `protobuf:"bytes,20,opt,name=debug,oneof"`
}

func (*Request_CreateGame) isRequest_Request()    {}
func (*Request_JoinGame) isRequest_Request()      {}
func (*Request_RestartGame) isRequest_Request()   {}
func (*Request_StartReplay) isRequest_Request()   {}
func (*Request_LeaveGame) isRequest_Request()     {}
func (*Request_QuickSave) isRequest_Request()     {}
func (*Request_QuickLoad) isRequest_Request()     {}
func (*Request_Quit) isRequest_Request()          {}
func (*Request_GameInfo) isRequest_Request()      {}
func (*Request_Observation) isRequest_Request()   {}
func (*Request_Action) isRequest_Request()        {}
func (*Request_ObsAction) isRequest_Request()     {}
func (*Request_Step) isRequest_Request()          {}
func (*Request_Data) isRequest_Request()          {}
func (*Request_Query) isRequest_Request()         {}
func (*Request_SaveReplay) isRequest_Request()    {}
func (*Request_MapCommand) isRequest_Request()    {}
func (*Request_ReplayInfo) isRequest_Request()    {}
func (*Request_AvailableMaps) isRequest_Request() {}
func (*Request_SaveMap) isRequest_Request()       {}
func (*Request_Ping) isRequest_Request()          {}
func (*Request_Debug) isRequest_Request()         {}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Request) GetCreateGame() *RequestCreateGame {
	if x, ok := m.GetRequest().(*Request_CreateGame); ok {
		return x.CreateGame
	}
	return nil
}

func (m *Request) GetJoinGame() *RequestJoinGame {
	if x, ok := m.GetRequest().(*Request_JoinGame); ok {
		return x.JoinGame
	}
	return nil
}

func (m *Request) GetRestartGame() *RequestRestartGame {
	if x, ok := m.GetRequest().(*Request_RestartGame); ok {
		return x.RestartGame
	}
	return nil
}

func (m *Request) GetStartReplay() *RequestStartReplay {
	if x, ok := m.GetRequest().(*Request_StartReplay); ok {
		return x.StartReplay
	}
	return nil
}

func (m *Request) GetLeaveGame() *RequestLeaveGame {
	if x, ok := m.GetRequest().(*Request_LeaveGame); ok {
		return x.LeaveGame
	}
	return nil
}

func (m *Request) GetQuickSave() *RequestQuickSave {
	if x, ok := m.GetRequest().(*Request_QuickSave); ok {
		return x.QuickSave
	}
	return nil
}

func (m *Request) GetQuickLoad() *RequestQuickLoad {
	if x, ok := m.GetRequest().(*Request_QuickLoad); ok {
		return x.QuickLoad
	}
	return nil
}

func (m *Request) GetQuit() *RequestQuit {
	if x, ok := m.GetRequest().(*Request_Quit); ok {
		return x.Quit
	}
	return nil
}

func (m *Request) GetGameInfo() *RequestGameInfo {
	if x, ok := m.GetRequest().(*Request_GameInfo); ok {
		return x.GameInfo
	}
	return nil
}

func (m *Request) GetObservation() *RequestObservation {
	if x, ok := m.GetRequest().(*Request_Observation); ok {
		return x.Observation
	}
	return nil
}

func (m *Request) GetAction() *RequestAction {
	if x, ok := m.GetRequest().(*Request_Action); ok {
		return x.Action
	}
	return nil
}

func (m *Request) GetObsAction() *RequestObserverAction {
	if x, ok := m.GetRequest().(*Request_ObsAction); ok {
		return x.ObsAction
	}
	return nil
}

func (m *Request) GetStep() *RequestStep {
	if x, ok := m.GetRequest().(*Request_Step); ok {
		return x.Step
	}
	return nil
}

func (m *Request) GetData() *RequestData {
	if x, ok := m.GetRequest().(*Request_Data); ok {
		return x.Data
	}
	return nil
}

func (m *Request) GetQuery() *RequestQuery {
	if x, ok := m.GetRequest().(*Request_Query); ok {
		return x.Query
	}
	return nil
}

func (m *Request) GetSaveReplay() *RequestSaveReplay {
	if x, ok := m.GetRequest().(*Request_SaveReplay); ok {
		return x.SaveReplay
	}
	return nil
}

func (m *Request) GetMapCommand() *RequestMapCommand {
	if x, ok := m.GetRequest().(*Request_MapCommand); ok {
		return x.MapCommand
	}
	return nil
}

func (m *Request) GetReplayInfo() *RequestReplayInfo {
	if x, ok := m.GetRequest().(*Request_ReplayInfo); ok {
		return x.ReplayInfo
	}
	return nil
}

func (m *Request) GetAvailableMaps() *RequestAvailableMaps {
	if x, ok := m.GetRequest().(*Request_AvailableMaps); ok {
		return x.AvailableMaps
	}
	return nil
}

func (m *Request) GetSaveMap() *RequestSaveMap {
	if x, ok := m.GetRequest().(*Request_SaveMap); ok {
		return x.SaveMap
	}
	return nil
}

func (m *Request) GetPing() *RequestPing {
	if x, ok := m.GetRequest().(*Request_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *Request) GetDebug() *RequestDebug {
	if x, ok := m.GetRequest().(*Request_Debug); ok {
		return x.Debug
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_CreateGame)(nil),
		(*Request_JoinGame)(nil),
		(*Request_RestartGame)(nil),
		(*Request_StartReplay)(nil),
		(*Request_LeaveGame)(nil),
		(*Request_QuickSave)(nil),
		(*Request_QuickLoad)(nil),
		(*Request_Quit)(nil),
		(*Request_GameInfo)(nil),
		(*Request_Observation)(nil),
		(*Request_Action)(nil),
		(*Request_ObsAction)(nil),
		(*Request_Step)(nil),
		(*Request_Data)(nil),
		(*Request_Query)(nil),
		(*Request_SaveReplay)(nil),
		(*Request_MapCommand)(nil),
		(*Request_ReplayInfo)(nil),
		(*Request_AvailableMaps)(nil),
		(*Request_SaveMap)(nil),
		(*Request_Ping)(nil),
		(*Request_Debug)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// request
	switch x := m.Request.(type) {
	case *Request_CreateGame:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateGame); err != nil {
			return err
		}
	case *Request_JoinGame:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinGame); err != nil {
			return err
		}
	case *Request_RestartGame:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RestartGame); err != nil {
			return err
		}
	case *Request_StartReplay:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StartReplay); err != nil {
			return err
		}
	case *Request_LeaveGame:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeaveGame); err != nil {
			return err
		}
	case *Request_QuickSave:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QuickSave); err != nil {
			return err
		}
	case *Request_QuickLoad:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QuickLoad); err != nil {
			return err
		}
	case *Request_Quit:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Quit); err != nil {
			return err
		}
	case *Request_GameInfo:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GameInfo); err != nil {
			return err
		}
	case *Request_Observation:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Observation); err != nil {
			return err
		}
	case *Request_Action:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Action); err != nil {
			return err
		}
	case *Request_ObsAction:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ObsAction); err != nil {
			return err
		}
	case *Request_Step:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Step); err != nil {
			return err
		}
	case *Request_Data:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case *Request_Query:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Query); err != nil {
			return err
		}
	case *Request_SaveReplay:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SaveReplay); err != nil {
			return err
		}
	case *Request_MapCommand:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MapCommand); err != nil {
			return err
		}
	case *Request_ReplayInfo:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplayInfo); err != nil {
			return err
		}
	case *Request_AvailableMaps:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AvailableMaps); err != nil {
			return err
		}
	case *Request_SaveMap:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SaveMap); err != nil {
			return err
		}
	case *Request_Ping:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *Request_Debug:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Debug); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Request has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 1: // request.create_game
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestCreateGame)
		err := b.DecodeMessage(msg)
		m.Request = &Request_CreateGame{msg}
		return true, err
	case 2: // request.join_game
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestJoinGame)
		err := b.DecodeMessage(msg)
		m.Request = &Request_JoinGame{msg}
		return true, err
	case 3: // request.restart_game
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestRestartGame)
		err := b.DecodeMessage(msg)
		m.Request = &Request_RestartGame{msg}
		return true, err
	case 4: // request.start_replay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestStartReplay)
		err := b.DecodeMessage(msg)
		m.Request = &Request_StartReplay{msg}
		return true, err
	case 5: // request.leave_game
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestLeaveGame)
		err := b.DecodeMessage(msg)
		m.Request = &Request_LeaveGame{msg}
		return true, err
	case 6: // request.quick_save
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestQuickSave)
		err := b.DecodeMessage(msg)
		m.Request = &Request_QuickSave{msg}
		return true, err
	case 7: // request.quick_load
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestQuickLoad)
		err := b.DecodeMessage(msg)
		m.Request = &Request_QuickLoad{msg}
		return true, err
	case 8: // request.quit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestQuit)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Quit{msg}
		return true, err
	case 9: // request.game_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestGameInfo)
		err := b.DecodeMessage(msg)
		m.Request = &Request_GameInfo{msg}
		return true, err
	case 10: // request.observation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestObservation)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Observation{msg}
		return true, err
	case 11: // request.action
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAction)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Action{msg}
		return true, err
	case 21: // request.obs_action
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestObserverAction)
		err := b.DecodeMessage(msg)
		m.Request = &Request_ObsAction{msg}
		return true, err
	case 12: // request.step
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestStep)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Step{msg}
		return true, err
	case 13: // request.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestData)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Data{msg}
		return true, err
	case 14: // request.query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestQuery)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Query{msg}
		return true, err
	case 15: // request.save_replay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestSaveReplay)
		err := b.DecodeMessage(msg)
		m.Request = &Request_SaveReplay{msg}
		return true, err
	case 22: // request.map_command
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestMapCommand)
		err := b.DecodeMessage(msg)
		m.Request = &Request_MapCommand{msg}
		return true, err
	case 16: // request.replay_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestReplayInfo)
		err := b.DecodeMessage(msg)
		m.Request = &Request_ReplayInfo{msg}
		return true, err
	case 17: // request.available_maps
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAvailableMaps)
		err := b.DecodeMessage(msg)
		m.Request = &Request_AvailableMaps{msg}
		return true, err
	case 18: // request.save_map
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestSaveMap)
		err := b.DecodeMessage(msg)
		m.Request = &Request_SaveMap{msg}
		return true, err
	case 19: // request.ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestPing)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Ping{msg}
		return true, err
	case 20: // request.debug
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestDebug)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Debug{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// request
	switch x := m.Request.(type) {
	case *Request_CreateGame:
		s := proto.Size(x.CreateGame)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_JoinGame:
		s := proto.Size(x.JoinGame)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_RestartGame:
		s := proto.Size(x.RestartGame)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_StartReplay:
		s := proto.Size(x.StartReplay)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_LeaveGame:
		s := proto.Size(x.LeaveGame)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_QuickSave:
		s := proto.Size(x.QuickSave)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_QuickLoad:
		s := proto.Size(x.QuickLoad)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Quit:
		s := proto.Size(x.Quit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_GameInfo:
		s := proto.Size(x.GameInfo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Observation:
		s := proto.Size(x.Observation)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Action:
		s := proto.Size(x.Action)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ObsAction:
		s := proto.Size(x.ObsAction)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Step:
		s := proto.Size(x.Step)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Data:
		s := proto.Size(x.Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Query:
		s := proto.Size(x.Query)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_SaveReplay:
		s := proto.Size(x.SaveReplay)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_MapCommand:
		s := proto.Size(x.MapCommand)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_ReplayInfo:
		s := proto.Size(x.ReplayInfo)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_AvailableMaps:
		s := proto.Size(x.AvailableMaps)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_SaveMap:
		s := proto.Size(x.SaveMap)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Ping:
		s := proto.Size(x.Ping)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Debug:
		s := proto.Size(x.Debug)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Response struct {
	// Types that are valid to be assigned to Response:
	//	*Response_CreateGame
	//	*Response_JoinGame
	//	*Response_RestartGame
	//	*Response_StartReplay
	//	*Response_LeaveGame
	//	*Response_QuickSave
	//	*Response_QuickLoad
	//	*Response_Quit
	//	*Response_GameInfo
	//	*Response_Observation
	//	*Response_Action
	//	*Response_ObsAction
	//	*Response_Step
	//	*Response_Data
	//	*Response_Query
	//	*Response_SaveReplay
	//	*Response_ReplayInfo
	//	*Response_AvailableMaps
	//	*Response_SaveMap
	//	*Response_MapCommand
	//	*Response_Ping
	//	*Response_Debug
	Response isResponse_Response `protobuf_oneof:"response"`
	Error    []string            `protobuf:"bytes,98,rep,name=error" json:"error,omitempty"`
	Status   Status              `protobuf:"varint,99,opt,name=status,proto3,enum=SC2APIProtocol.Status" json:"status,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

type isResponse_Response interface {
	isResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Response_CreateGame struct {
	CreateGame *ResponseCreateGame `protobuf:"bytes,1,opt,name=create_game,json=createGame,oneof"`
}
type Response_JoinGame struct {
	JoinGame *ResponseJoinGame `protobuf:"bytes,2,opt,name=join_game,json=joinGame,oneof"`
}
type Response_RestartGame struct {
	RestartGame *ResponseRestartGame `protobuf:"bytes,3,opt,name=restart_game,json=restartGame,oneof"`
}
type Response_StartReplay struct {
	StartReplay *ResponseStartReplay `protobuf:"bytes,4,opt,name=start_replay,json=startReplay,oneof"`
}
type Response_LeaveGame struct {
	LeaveGame *ResponseLeaveGame `protobuf:"bytes,5,opt,name=leave_game,json=leaveGame,oneof"`
}
type Response_QuickSave struct {
	QuickSave *ResponseQuickSave `protobuf:"bytes,6,opt,name=quick_save,json=quickSave,oneof"`
}
type Response_QuickLoad struct {
	QuickLoad *ResponseQuickLoad `protobuf:"bytes,7,opt,name=quick_load,json=quickLoad,oneof"`
}
type Response_Quit struct {
	Quit *ResponseQuit `protobuf:"bytes,8,opt,name=quit,oneof"`
}
type Response_GameInfo struct {
	GameInfo *ResponseGameInfo `protobuf:"bytes,9,opt,name=game_info,json=gameInfo,oneof"`
}
type Response_Observation struct {
	Observation *ResponseObservation `protobuf:"bytes,10,opt,name=observation,oneof"`
}
type Response_Action struct {
	Action *ResponseAction `protobuf:"bytes,11,opt,name=action,oneof"`
}
type Response_ObsAction struct {
	ObsAction *ResponseObserverAction `protobuf:"bytes,21,opt,name=obs_action,json=obsAction,oneof"`
}
type Response_Step struct {
	Step *ResponseStep `protobuf:"bytes,12,opt,name=step,oneof"`
}
type Response_Data struct {
	Data *ResponseData `protobuf:"bytes,13,opt,name=data,oneof"`
}
type Response_Query struct {
	Query *ResponseQuery `protobuf:"bytes,14,opt,name=query,oneof"`
}
type Response_SaveReplay struct {
	SaveReplay *ResponseSaveReplay `protobuf:"bytes,15,opt,name=save_replay,json=saveReplay,oneof"`
}
type Response_ReplayInfo struct {
	ReplayInfo *ResponseReplayInfo `protobuf:"bytes,16,opt,name=replay_info,json=replayInfo,oneof"`
}
type Response_AvailableMaps struct {
	AvailableMaps *ResponseAvailableMaps `protobuf:"bytes,17,opt,name=available_maps,json=availableMaps,oneof"`
}
type Response_SaveMap struct {
	SaveMap *ResponseSaveMap `protobuf:"bytes,18,opt,name=save_map,json=saveMap,oneof"`
}
type Response_MapCommand struct {
	MapCommand *ResponseMapCommand `protobuf:"bytes,22,opt,name=map_command,json=mapCommand,oneof"`
}
type Response_Ping struct {
	Ping *ResponsePing `protobuf:"bytes,19,opt,name=ping,oneof"`
}
type Response_Debug struct {
	Debug *ResponseDebug `protobuf:"bytes,20,opt,name=debug,oneof"`
}

func (*Response_CreateGame) isResponse_Response()    {}
func (*Response_JoinGame) isResponse_Response()      {}
func (*Response_RestartGame) isResponse_Response()   {}
func (*Response_StartReplay) isResponse_Response()   {}
func (*Response_LeaveGame) isResponse_Response()     {}
func (*Response_QuickSave) isResponse_Response()     {}
func (*Response_QuickLoad) isResponse_Response()     {}
func (*Response_Quit) isResponse_Response()          {}
func (*Response_GameInfo) isResponse_Response()      {}
func (*Response_Observation) isResponse_Response()   {}
func (*Response_Action) isResponse_Response()        {}
func (*Response_ObsAction) isResponse_Response()     {}
func (*Response_Step) isResponse_Response()          {}
func (*Response_Data) isResponse_Response()          {}
func (*Response_Query) isResponse_Response()         {}
func (*Response_SaveReplay) isResponse_Response()    {}
func (*Response_ReplayInfo) isResponse_Response()    {}
func (*Response_AvailableMaps) isResponse_Response() {}
func (*Response_SaveMap) isResponse_Response()       {}
func (*Response_MapCommand) isResponse_Response()    {}
func (*Response_Ping) isResponse_Response()          {}
func (*Response_Debug) isResponse_Response()         {}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Response) GetCreateGame() *ResponseCreateGame {
	if x, ok := m.GetResponse().(*Response_CreateGame); ok {
		return x.CreateGame
	}
	return nil
}

func (m *Response) GetJoinGame() *ResponseJoinGame {
	if x, ok := m.GetResponse().(*Response_JoinGame); ok {
		return x.JoinGame
	}
	return nil
}

func (m *Response) GetRestartGame() *ResponseRestartGame {
	if x, ok := m.GetResponse().(*Response_RestartGame); ok {
		return x.RestartGame
	}
	return nil
}

func (m *Response) GetStartReplay() *ResponseStartReplay {
	if x, ok := m.GetResponse().(*Response_StartReplay); ok {
		return x.StartReplay
	}
	return nil
}

func (m *Response) GetLeaveGame() *ResponseLeaveGame {
	if x, ok := m.GetResponse().(*Response_LeaveGame); ok {
		return x.LeaveGame
	}
	return nil
}

func (m *Response) GetQuickSave() *ResponseQuickSave {
	if x, ok := m.GetResponse().(*Response_QuickSave); ok {
		return x.QuickSave
	}
	return nil
}

func (m *Response) GetQuickLoad() *ResponseQuickLoad {
	if x, ok := m.GetResponse().(*Response_QuickLoad); ok {
		return x.QuickLoad
	}
	return nil
}

func (m *Response) GetQuit() *ResponseQuit {
	if x, ok := m.GetResponse().(*Response_Quit); ok {
		return x.Quit
	}
	return nil
}

func (m *Response) GetGameInfo() *ResponseGameInfo {
	if x, ok := m.GetResponse().(*Response_GameInfo); ok {
		return x.GameInfo
	}
	return nil
}

func (m *Response) GetObservation() *ResponseObservation {
	if x, ok := m.GetResponse().(*Response_Observation); ok {
		return x.Observation
	}
	return nil
}

func (m *Response) GetAction() *ResponseAction {
	if x, ok := m.GetResponse().(*Response_Action); ok {
		return x.Action
	}
	return nil
}

func (m *Response) GetObsAction() *ResponseObserverAction {
	if x, ok := m.GetResponse().(*Response_ObsAction); ok {
		return x.ObsAction
	}
	return nil
}

func (m *Response) GetStep() *ResponseStep {
	if x, ok := m.GetResponse().(*Response_Step); ok {
		return x.Step
	}
	return nil
}

func (m *Response) GetData() *ResponseData {
	if x, ok := m.GetResponse().(*Response_Data); ok {
		return x.Data
	}
	return nil
}

func (m *Response) GetQuery() *ResponseQuery {
	if x, ok := m.GetResponse().(*Response_Query); ok {
		return x.Query
	}
	return nil
}

func (m *Response) GetSaveReplay() *ResponseSaveReplay {
	if x, ok := m.GetResponse().(*Response_SaveReplay); ok {
		return x.SaveReplay
	}
	return nil
}

func (m *Response) GetReplayInfo() *ResponseReplayInfo {
	if x, ok := m.GetResponse().(*Response_ReplayInfo); ok {
		return x.ReplayInfo
	}
	return nil
}

func (m *Response) GetAvailableMaps() *ResponseAvailableMaps {
	if x, ok := m.GetResponse().(*Response_AvailableMaps); ok {
		return x.AvailableMaps
	}
	return nil
}

func (m *Response) GetSaveMap() *ResponseSaveMap {
	if x, ok := m.GetResponse().(*Response_SaveMap); ok {
		return x.SaveMap
	}
	return nil
}

func (m *Response) GetMapCommand() *ResponseMapCommand {
	if x, ok := m.GetResponse().(*Response_MapCommand); ok {
		return x.MapCommand
	}
	return nil
}

func (m *Response) GetPing() *ResponsePing {
	if x, ok := m.GetResponse().(*Response_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *Response) GetDebug() *ResponseDebug {
	if x, ok := m.GetResponse().(*Response_Debug); ok {
		return x.Debug
	}
	return nil
}

func (m *Response) GetError() []string {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_CreateGame)(nil),
		(*Response_JoinGame)(nil),
		(*Response_RestartGame)(nil),
		(*Response_StartReplay)(nil),
		(*Response_LeaveGame)(nil),
		(*Response_QuickSave)(nil),
		(*Response_QuickLoad)(nil),
		(*Response_Quit)(nil),
		(*Response_GameInfo)(nil),
		(*Response_Observation)(nil),
		(*Response_Action)(nil),
		(*Response_ObsAction)(nil),
		(*Response_Step)(nil),
		(*Response_Data)(nil),
		(*Response_Query)(nil),
		(*Response_SaveReplay)(nil),
		(*Response_ReplayInfo)(nil),
		(*Response_AvailableMaps)(nil),
		(*Response_SaveMap)(nil),
		(*Response_MapCommand)(nil),
		(*Response_Ping)(nil),
		(*Response_Debug)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// response
	switch x := m.Response.(type) {
	case *Response_CreateGame:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateGame); err != nil {
			return err
		}
	case *Response_JoinGame:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JoinGame); err != nil {
			return err
		}
	case *Response_RestartGame:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RestartGame); err != nil {
			return err
		}
	case *Response_StartReplay:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StartReplay); err != nil {
			return err
		}
	case *Response_LeaveGame:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LeaveGame); err != nil {
			return err
		}
	case *Response_QuickSave:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QuickSave); err != nil {
			return err
		}
	case *Response_QuickLoad:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QuickLoad); err != nil {
			return err
		}
	case *Response_Quit:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Quit); err != nil {
			return err
		}
	case *Response_GameInfo:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GameInfo); err != nil {
			return err
		}
	case *Response_Observation:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Observation); err != nil {
			return err
		}
	case *Response_Action:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Action); err != nil {
			return err
		}
	case *Response_ObsAction:
		_ = b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ObsAction); err != nil {
			return err
		}
	case *Response_Step:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Step); err != nil {
			return err
		}
	case *Response_Data:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Data); err != nil {
			return err
		}
	case *Response_Query:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Query); err != nil {
			return err
		}
	case *Response_SaveReplay:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SaveReplay); err != nil {
			return err
		}
	case *Response_ReplayInfo:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplayInfo); err != nil {
			return err
		}
	case *Response_AvailableMaps:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AvailableMaps); err != nil {
			return err
		}
	case *Response_SaveMap:
		_ = b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SaveMap); err != nil {
			return err
		}
	case *Response_MapCommand:
		_ = b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MapCommand); err != nil {
			return err
		}
	case *Response_Ping:
		_ = b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *Response_Debug:
		_ = b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Debug); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Response has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 1: // response.create_game
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseCreateGame)
		err := b.DecodeMessage(msg)
		m.Response = &Response_CreateGame{msg}
		return true, err
	case 2: // response.join_game
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseJoinGame)
		err := b.DecodeMessage(msg)
		m.Response = &Response_JoinGame{msg}
		return true, err
	case 3: // response.restart_game
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseRestartGame)
		err := b.DecodeMessage(msg)
		m.Response = &Response_RestartGame{msg}
		return true, err
	case 4: // response.start_replay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseStartReplay)
		err := b.DecodeMessage(msg)
		m.Response = &Response_StartReplay{msg}
		return true, err
	case 5: // response.leave_game
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseLeaveGame)
		err := b.DecodeMessage(msg)
		m.Response = &Response_LeaveGame{msg}
		return true, err
	case 6: // response.quick_save
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseQuickSave)
		err := b.DecodeMessage(msg)
		m.Response = &Response_QuickSave{msg}
		return true, err
	case 7: // response.quick_load
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseQuickLoad)
		err := b.DecodeMessage(msg)
		m.Response = &Response_QuickLoad{msg}
		return true, err
	case 8: // response.quit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseQuit)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Quit{msg}
		return true, err
	case 9: // response.game_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseGameInfo)
		err := b.DecodeMessage(msg)
		m.Response = &Response_GameInfo{msg}
		return true, err
	case 10: // response.observation
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseObservation)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Observation{msg}
		return true, err
	case 11: // response.action
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseAction)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Action{msg}
		return true, err
	case 21: // response.obs_action
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseObserverAction)
		err := b.DecodeMessage(msg)
		m.Response = &Response_ObsAction{msg}
		return true, err
	case 12: // response.step
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseStep)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Step{msg}
		return true, err
	case 13: // response.data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseData)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Data{msg}
		return true, err
	case 14: // response.query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseQuery)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Query{msg}
		return true, err
	case 15: // response.save_replay
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseSaveReplay)
		err := b.DecodeMessage(msg)
		m.Response = &Response_SaveReplay{msg}
		return true, err
	case 16: // response.replay_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseReplayInfo)
		err := b.DecodeMessage(msg)
		m.Response = &Response_ReplayInfo{msg}
		return true, err
	case 17: // response.available_maps
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseAvailableMaps)
		err := b.DecodeMessage(msg)
		m.Response = &Response_AvailableMaps{msg}
		return true, err
	case 18: // response.save_map
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseSaveMap)
		err := b.DecodeMessage(msg)
		m.Response = &Response_SaveMap{msg}
		return true, err
	case 22: // response.map_command
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseMapCommand)
		err := b.DecodeMessage(msg)
		m.Response = &Response_MapCommand{msg}
		return true, err
	case 19: // response.ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponsePing)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Ping{msg}
		return true, err
	case 20: // response.debug
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseDebug)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Debug{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// response
	switch x := m.Response.(type) {
	case *Response_CreateGame:
		s := proto.Size(x.CreateGame)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_JoinGame:
		s := proto.Size(x.JoinGame)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_RestartGame:
		s := proto.Size(x.RestartGame)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_StartReplay:
		s := proto.Size(x.StartReplay)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_LeaveGame:
		s := proto.Size(x.LeaveGame)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_QuickSave:
		s := proto.Size(x.QuickSave)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_QuickLoad:
		s := proto.Size(x.QuickLoad)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Quit:
		s := proto.Size(x.Quit)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_GameInfo:
		s := proto.Size(x.GameInfo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Observation:
		s := proto.Size(x.Observation)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Action:
		s := proto.Size(x.Action)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_ObsAction:
		s := proto.Size(x.ObsAction)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Step:
		s := proto.Size(x.Step)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Data:
		s := proto.Size(x.Data)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Query:
		s := proto.Size(x.Query)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_SaveReplay:
		s := proto.Size(x.SaveReplay)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_ReplayInfo:
		s := proto.Size(x.ReplayInfo)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_AvailableMaps:
		s := proto.Size(x.AvailableMaps)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_SaveMap:
		s := proto.Size(x.SaveMap)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_MapCommand:
		s := proto.Size(x.MapCommand)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Ping:
		s := proto.Size(x.Ping)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Debug:
		s := proto.Size(x.Debug)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// -----------------------------------------------------------------------------
// If successful, puts the game into the status: init_game.
// The next expected request should be RequestJoinGame. Can also quit (exit).
type RequestCreateGame struct {
	// Types that are valid to be assigned to Map:
	//	*RequestCreateGame_LocalMap
	//	*RequestCreateGame_BattlenetMapName
	Map         isRequestCreateGame_Map `protobuf_oneof:"Map"`
	PlayerSetup []*PlayerSetup          `protobuf:"bytes,3,rep,name=player_setup,json=playerSetup" json:"player_setup,omitempty"`
	DisableFog  bool                    `protobuf:"varint,4,opt,name=disable_fog,json=disableFog,proto3" json:"disable_fog,omitempty"`
	RandomSeed  uint32                  `protobuf:"varint,5,opt,name=random_seed,json=randomSeed,proto3" json:"random_seed,omitempty"`
	Realtime    bool                    `protobuf:"varint,6,opt,name=realtime,proto3" json:"realtime,omitempty"`
}

func (m *RequestCreateGame) Reset()         { *m = RequestCreateGame{} }
func (m *RequestCreateGame) String() string { return proto.CompactTextString(m) }
func (*RequestCreateGame) ProtoMessage()    {}
func (*RequestCreateGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{2}
}
func (m *RequestCreateGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCreateGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCreateGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestCreateGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCreateGame.Merge(dst, src)
}
func (m *RequestCreateGame) XXX_Size() int {
	return m.Size()
}
func (m *RequestCreateGame) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCreateGame.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCreateGame proto.InternalMessageInfo

type isRequestCreateGame_Map interface {
	isRequestCreateGame_Map()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestCreateGame_LocalMap struct {
	LocalMap *LocalMap `protobuf:"bytes,1,opt,name=local_map,json=localMap,oneof"`
}
type RequestCreateGame_BattlenetMapName struct {
	BattlenetMapName string `protobuf:"bytes,2,opt,name=battlenet_map_name,json=battlenetMapName,proto3,oneof"`
}

func (*RequestCreateGame_LocalMap) isRequestCreateGame_Map()         {}
func (*RequestCreateGame_BattlenetMapName) isRequestCreateGame_Map() {}

func (m *RequestCreateGame) GetMap() isRequestCreateGame_Map {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *RequestCreateGame) GetLocalMap() *LocalMap {
	if x, ok := m.GetMap().(*RequestCreateGame_LocalMap); ok {
		return x.LocalMap
	}
	return nil
}

func (m *RequestCreateGame) GetBattlenetMapName() string {
	if x, ok := m.GetMap().(*RequestCreateGame_BattlenetMapName); ok {
		return x.BattlenetMapName
	}
	return ""
}

func (m *RequestCreateGame) GetPlayerSetup() []*PlayerSetup {
	if m != nil {
		return m.PlayerSetup
	}
	return nil
}

func (m *RequestCreateGame) GetDisableFog() bool {
	if m != nil {
		return m.DisableFog
	}
	return false
}

func (m *RequestCreateGame) GetRandomSeed() uint32 {
	if m != nil {
		return m.RandomSeed
	}
	return 0
}

func (m *RequestCreateGame) GetRealtime() bool {
	if m != nil {
		return m.Realtime
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RequestCreateGame) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RequestCreateGame_OneofMarshaler, _RequestCreateGame_OneofUnmarshaler, _RequestCreateGame_OneofSizer, []interface{}{
		(*RequestCreateGame_LocalMap)(nil),
		(*RequestCreateGame_BattlenetMapName)(nil),
	}
}

func _RequestCreateGame_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RequestCreateGame)
	// Map
	switch x := m.Map.(type) {
	case *RequestCreateGame_LocalMap:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocalMap); err != nil {
			return err
		}
	case *RequestCreateGame_BattlenetMapName:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.BattlenetMapName)
	case nil:
	default:
		return fmt.Errorf("RequestCreateGame.Map has unexpected type %T", x)
	}
	return nil
}

func _RequestCreateGame_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RequestCreateGame)
	switch tag {
	case 1: // Map.local_map
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LocalMap)
		err := b.DecodeMessage(msg)
		m.Map = &RequestCreateGame_LocalMap{msg}
		return true, err
	case 2: // Map.battlenet_map_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Map = &RequestCreateGame_BattlenetMapName{x}
		return true, err
	default:
		return false, nil
	}
}

func _RequestCreateGame_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RequestCreateGame)
	// Map
	switch x := m.Map.(type) {
	case *RequestCreateGame_LocalMap:
		s := proto.Size(x.LocalMap)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestCreateGame_BattlenetMapName:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.BattlenetMapName)))
		n += len(x.BattlenetMapName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LocalMap struct {
	MapPath string `protobuf:"bytes,1,opt,name=map_path,json=mapPath,proto3" json:"map_path,omitempty"`
	MapData []byte `protobuf:"bytes,7,opt,name=map_data,json=mapData,proto3" json:"map_data,omitempty"`
}

func (m *LocalMap) Reset()         { *m = LocalMap{} }
func (m *LocalMap) String() string { return proto.CompactTextString(m) }
func (*LocalMap) ProtoMessage()    {}
func (*LocalMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{3}
}
func (m *LocalMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LocalMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalMap.Merge(dst, src)
}
func (m *LocalMap) XXX_Size() int {
	return m.Size()
}
func (m *LocalMap) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalMap.DiscardUnknown(m)
}

var xxx_messageInfo_LocalMap proto.InternalMessageInfo

func (m *LocalMap) GetMapPath() string {
	if m != nil {
		return m.MapPath
	}
	return ""
}

func (m *LocalMap) GetMapData() []byte {
	if m != nil {
		return m.MapData
	}
	return nil
}

type ResponseCreateGame struct {
	Error        ResponseCreateGame_Error `protobuf:"varint,1,opt,name=error,proto3,enum=SC2APIProtocol.ResponseCreateGame_Error" json:"error,omitempty"`
	ErrorDetails string                   `protobuf:"bytes,2,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (m *ResponseCreateGame) Reset()         { *m = ResponseCreateGame{} }
func (m *ResponseCreateGame) String() string { return proto.CompactTextString(m) }
func (*ResponseCreateGame) ProtoMessage()    {}
func (*ResponseCreateGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{4}
}
func (m *ResponseCreateGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseCreateGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseCreateGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseCreateGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseCreateGame.Merge(dst, src)
}
func (m *ResponseCreateGame) XXX_Size() int {
	return m.Size()
}
func (m *ResponseCreateGame) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseCreateGame.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseCreateGame proto.InternalMessageInfo

func (m *ResponseCreateGame) GetError() ResponseCreateGame_Error {
	if m != nil {
		return m.Error
	}
	return ResponseCreateGame_nil
}

func (m *ResponseCreateGame) GetErrorDetails() string {
	if m != nil {
		return m.ErrorDetails
	}
	return ""
}

// -----------------------------------------------------------------------------
// If successful, puts the game into the status: in_game. Will be able to
// request actions, observations and step the game.
type RequestJoinGame struct {
	// Types that are valid to be assigned to Participation:
	//	*RequestJoinGame_Race
	//	*RequestJoinGame_ObservedPlayerId
	Participation isRequestJoinGame_Participation `protobuf_oneof:"participation"`
	Options       *InterfaceOptions               `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
	ServerPorts   *PortSet                        `protobuf:"bytes,4,opt,name=server_ports,json=serverPorts" json:"server_ports,omitempty"`
	ClientPorts   []*PortSet                      `protobuf:"bytes,5,rep,name=client_ports,json=clientPorts" json:"client_ports,omitempty"`
	SharedPort    int32                           `protobuf:"varint,6,opt,name=shared_port,json=sharedPort,proto3" json:"shared_port,omitempty"`
	PlayerName    string                          `protobuf:"bytes,7,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
}

func (m *RequestJoinGame) Reset()         { *m = RequestJoinGame{} }
func (m *RequestJoinGame) String() string { return proto.CompactTextString(m) }
func (*RequestJoinGame) ProtoMessage()    {}
func (*RequestJoinGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{5}
}
func (m *RequestJoinGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestJoinGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestJoinGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestJoinGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestJoinGame.Merge(dst, src)
}
func (m *RequestJoinGame) XXX_Size() int {
	return m.Size()
}
func (m *RequestJoinGame) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestJoinGame.DiscardUnknown(m)
}

var xxx_messageInfo_RequestJoinGame proto.InternalMessageInfo

type isRequestJoinGame_Participation interface {
	isRequestJoinGame_Participation()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestJoinGame_Race struct {
	Race Race `protobuf:"varint,1,opt,name=race,proto3,enum=SC2APIProtocol.Race,oneof"`
}
type RequestJoinGame_ObservedPlayerId struct {
	ObservedPlayerId PlayerID `protobuf:"varint,2,opt,name=observed_player_id,json=observedPlayerId,proto3,oneof,casttype=PlayerID"`
}

func (*RequestJoinGame_Race) isRequestJoinGame_Participation()             {}
func (*RequestJoinGame_ObservedPlayerId) isRequestJoinGame_Participation() {}

func (m *RequestJoinGame) GetParticipation() isRequestJoinGame_Participation {
	if m != nil {
		return m.Participation
	}
	return nil
}

func (m *RequestJoinGame) GetRace() Race {
	if x, ok := m.GetParticipation().(*RequestJoinGame_Race); ok {
		return x.Race
	}
	return Race_NoRace
}

func (m *RequestJoinGame) GetObservedPlayerId() PlayerID {
	if x, ok := m.GetParticipation().(*RequestJoinGame_ObservedPlayerId); ok {
		return x.ObservedPlayerId
	}
	return 0
}

func (m *RequestJoinGame) GetOptions() *InterfaceOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *RequestJoinGame) GetServerPorts() *PortSet {
	if m != nil {
		return m.ServerPorts
	}
	return nil
}

func (m *RequestJoinGame) GetClientPorts() []*PortSet {
	if m != nil {
		return m.ClientPorts
	}
	return nil
}

func (m *RequestJoinGame) GetSharedPort() int32 {
	if m != nil {
		return m.SharedPort
	}
	return 0
}

func (m *RequestJoinGame) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RequestJoinGame) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RequestJoinGame_OneofMarshaler, _RequestJoinGame_OneofUnmarshaler, _RequestJoinGame_OneofSizer, []interface{}{
		(*RequestJoinGame_Race)(nil),
		(*RequestJoinGame_ObservedPlayerId)(nil),
	}
}

func _RequestJoinGame_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RequestJoinGame)
	// participation
	switch x := m.Participation.(type) {
	case *RequestJoinGame_Race:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Race))
	case *RequestJoinGame_ObservedPlayerId:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.ObservedPlayerId))
	case nil:
	default:
		return fmt.Errorf("RequestJoinGame.Participation has unexpected type %T", x)
	}
	return nil
}

func _RequestJoinGame_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RequestJoinGame)
	switch tag {
	case 1: // participation.race
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Participation = &RequestJoinGame_Race{Race(x)}
		return true, err
	case 2: // participation.observed_player_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Participation = &RequestJoinGame_ObservedPlayerId{PlayerID(uint32(x))}
		return true, err
	default:
		return false, nil
	}
}

func _RequestJoinGame_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RequestJoinGame)
	// participation
	switch x := m.Participation.(type) {
	case *RequestJoinGame_Race:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Race))
	case *RequestJoinGame_ObservedPlayerId:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.ObservedPlayerId))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PortSet struct {
	GamePort int32 `protobuf:"varint,1,opt,name=game_port,json=gamePort,proto3" json:"game_port,omitempty"`
	BasePort int32 `protobuf:"varint,2,opt,name=base_port,json=basePort,proto3" json:"base_port,omitempty"`
}

func (m *PortSet) Reset()         { *m = PortSet{} }
func (m *PortSet) String() string { return proto.CompactTextString(m) }
func (*PortSet) ProtoMessage()    {}
func (*PortSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{6}
}
func (m *PortSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PortSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortSet.Merge(dst, src)
}
func (m *PortSet) XXX_Size() int {
	return m.Size()
}
func (m *PortSet) XXX_DiscardUnknown() {
	xxx_messageInfo_PortSet.DiscardUnknown(m)
}

var xxx_messageInfo_PortSet proto.InternalMessageInfo

func (m *PortSet) GetGamePort() int32 {
	if m != nil {
		return m.GamePort
	}
	return 0
}

func (m *PortSet) GetBasePort() int32 {
	if m != nil {
		return m.BasePort
	}
	return 0
}

type ResponseJoinGame struct {
	PlayerId     PlayerID               `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3,casttype=PlayerID" json:"player_id,omitempty"`
	Error        ResponseJoinGame_Error `protobuf:"varint,2,opt,name=error,proto3,enum=SC2APIProtocol.ResponseJoinGame_Error" json:"error,omitempty"`
	ErrorDetails string                 `protobuf:"bytes,3,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (m *ResponseJoinGame) Reset()         { *m = ResponseJoinGame{} }
func (m *ResponseJoinGame) String() string { return proto.CompactTextString(m) }
func (*ResponseJoinGame) ProtoMessage()    {}
func (*ResponseJoinGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{7}
}
func (m *ResponseJoinGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseJoinGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseJoinGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseJoinGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseJoinGame.Merge(dst, src)
}
func (m *ResponseJoinGame) XXX_Size() int {
	return m.Size()
}
func (m *ResponseJoinGame) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseJoinGame.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseJoinGame proto.InternalMessageInfo

func (m *ResponseJoinGame) GetPlayerId() PlayerID {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ResponseJoinGame) GetError() ResponseJoinGame_Error {
	if m != nil {
		return m.Error
	}
	return ResponseJoinGame_nil
}

func (m *ResponseJoinGame) GetErrorDetails() string {
	if m != nil {
		return m.ErrorDetails
	}
	return ""
}

// -----------------------------------------------------------------------------
type RequestRestartGame struct {
}

func (m *RequestRestartGame) Reset()         { *m = RequestRestartGame{} }
func (m *RequestRestartGame) String() string { return proto.CompactTextString(m) }
func (*RequestRestartGame) ProtoMessage()    {}
func (*RequestRestartGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{8}
}
func (m *RequestRestartGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRestartGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRestartGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestRestartGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRestartGame.Merge(dst, src)
}
func (m *RequestRestartGame) XXX_Size() int {
	return m.Size()
}
func (m *RequestRestartGame) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRestartGame.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRestartGame proto.InternalMessageInfo

type ResponseRestartGame struct {
	Error        ResponseRestartGame_Error `protobuf:"varint,1,opt,name=error,proto3,enum=SC2APIProtocol.ResponseRestartGame_Error" json:"error,omitempty"`
	ErrorDetails string                    `protobuf:"bytes,2,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (m *ResponseRestartGame) Reset()         { *m = ResponseRestartGame{} }
func (m *ResponseRestartGame) String() string { return proto.CompactTextString(m) }
func (*ResponseRestartGame) ProtoMessage()    {}
func (*ResponseRestartGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{9}
}
func (m *ResponseRestartGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseRestartGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseRestartGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseRestartGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseRestartGame.Merge(dst, src)
}
func (m *ResponseRestartGame) XXX_Size() int {
	return m.Size()
}
func (m *ResponseRestartGame) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseRestartGame.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseRestartGame proto.InternalMessageInfo

func (m *ResponseRestartGame) GetError() ResponseRestartGame_Error {
	if m != nil {
		return m.Error
	}
	return ResponseRestartGame_nil
}

func (m *ResponseRestartGame) GetErrorDetails() string {
	if m != nil {
		return m.ErrorDetails
	}
	return ""
}

// -----------------------------------------------------------------------------
type RequestStartReplay struct {
	// Types that are valid to be assigned to Replay:
	//	*RequestStartReplay_ReplayPath
	//	*RequestStartReplay_ReplayData
	Replay           isRequestStartReplay_Replay `protobuf_oneof:"replay"`
	MapData          []byte                      `protobuf:"bytes,6,opt,name=map_data,json=mapData,proto3" json:"map_data,omitempty"`
	ObservedPlayerId PlayerID                    `protobuf:"varint,2,opt,name=observed_player_id,json=observedPlayerId,proto3,casttype=PlayerID" json:"observed_player_id,omitempty"`
	Options          *InterfaceOptions           `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
	DisableFog       bool                        `protobuf:"varint,4,opt,name=disable_fog,json=disableFog,proto3" json:"disable_fog,omitempty"`
	Realtime         bool                        `protobuf:"varint,7,opt,name=realtime,proto3" json:"realtime,omitempty"`
}

func (m *RequestStartReplay) Reset()         { *m = RequestStartReplay{} }
func (m *RequestStartReplay) String() string { return proto.CompactTextString(m) }
func (*RequestStartReplay) ProtoMessage()    {}
func (*RequestStartReplay) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{10}
}
func (m *RequestStartReplay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStartReplay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStartReplay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestStartReplay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStartReplay.Merge(dst, src)
}
func (m *RequestStartReplay) XXX_Size() int {
	return m.Size()
}
func (m *RequestStartReplay) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStartReplay.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStartReplay proto.InternalMessageInfo

type isRequestStartReplay_Replay interface {
	isRequestStartReplay_Replay()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestStartReplay_ReplayPath struct {
	ReplayPath string `protobuf:"bytes,1,opt,name=replay_path,json=replayPath,proto3,oneof"`
}
type RequestStartReplay_ReplayData struct {
	ReplayData []byte `protobuf:"bytes,5,opt,name=replay_data,json=replayData,proto3,oneof"`
}

func (*RequestStartReplay_ReplayPath) isRequestStartReplay_Replay() {}
func (*RequestStartReplay_ReplayData) isRequestStartReplay_Replay() {}

func (m *RequestStartReplay) GetReplay() isRequestStartReplay_Replay {
	if m != nil {
		return m.Replay
	}
	return nil
}

func (m *RequestStartReplay) GetReplayPath() string {
	if x, ok := m.GetReplay().(*RequestStartReplay_ReplayPath); ok {
		return x.ReplayPath
	}
	return ""
}

func (m *RequestStartReplay) GetReplayData() []byte {
	if x, ok := m.GetReplay().(*RequestStartReplay_ReplayData); ok {
		return x.ReplayData
	}
	return nil
}

func (m *RequestStartReplay) GetMapData() []byte {
	if m != nil {
		return m.MapData
	}
	return nil
}

func (m *RequestStartReplay) GetObservedPlayerId() PlayerID {
	if m != nil {
		return m.ObservedPlayerId
	}
	return 0
}

func (m *RequestStartReplay) GetOptions() *InterfaceOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *RequestStartReplay) GetDisableFog() bool {
	if m != nil {
		return m.DisableFog
	}
	return false
}

func (m *RequestStartReplay) GetRealtime() bool {
	if m != nil {
		return m.Realtime
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RequestStartReplay) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RequestStartReplay_OneofMarshaler, _RequestStartReplay_OneofUnmarshaler, _RequestStartReplay_OneofSizer, []interface{}{
		(*RequestStartReplay_ReplayPath)(nil),
		(*RequestStartReplay_ReplayData)(nil),
	}
}

func _RequestStartReplay_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RequestStartReplay)
	// replay
	switch x := m.Replay.(type) {
	case *RequestStartReplay_ReplayPath:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ReplayPath)
	case *RequestStartReplay_ReplayData:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.ReplayData)
	case nil:
	default:
		return fmt.Errorf("RequestStartReplay.Replay has unexpected type %T", x)
	}
	return nil
}

func _RequestStartReplay_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RequestStartReplay)
	switch tag {
	case 1: // replay.replay_path
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Replay = &RequestStartReplay_ReplayPath{x}
		return true, err
	case 5: // replay.replay_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Replay = &RequestStartReplay_ReplayData{x}
		return true, err
	default:
		return false, nil
	}
}

func _RequestStartReplay_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RequestStartReplay)
	// replay
	switch x := m.Replay.(type) {
	case *RequestStartReplay_ReplayPath:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ReplayPath)))
		n += len(x.ReplayPath)
	case *RequestStartReplay_ReplayData:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ReplayData)))
		n += len(x.ReplayData)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ResponseStartReplay struct {
	Error        ResponseStartReplay_Error `protobuf:"varint,1,opt,name=error,proto3,enum=SC2APIProtocol.ResponseStartReplay_Error" json:"error,omitempty"`
	ErrorDetails string                    `protobuf:"bytes,2,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (m *ResponseStartReplay) Reset()         { *m = ResponseStartReplay{} }
func (m *ResponseStartReplay) String() string { return proto.CompactTextString(m) }
func (*ResponseStartReplay) ProtoMessage()    {}
func (*ResponseStartReplay) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{11}
}
func (m *ResponseStartReplay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseStartReplay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseStartReplay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseStartReplay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseStartReplay.Merge(dst, src)
}
func (m *ResponseStartReplay) XXX_Size() int {
	return m.Size()
}
func (m *ResponseStartReplay) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseStartReplay.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseStartReplay proto.InternalMessageInfo

func (m *ResponseStartReplay) GetError() ResponseStartReplay_Error {
	if m != nil {
		return m.Error
	}
	return ResponseStartReplay_nil
}

func (m *ResponseStartReplay) GetErrorDetails() string {
	if m != nil {
		return m.ErrorDetails
	}
	return ""
}

// -----------------------------------------------------------------------------
type RequestMapCommand struct {
	TriggerCmd string `protobuf:"bytes,1,opt,name=trigger_cmd,json=triggerCmd,proto3" json:"trigger_cmd,omitempty"`
}

func (m *RequestMapCommand) Reset()         { *m = RequestMapCommand{} }
func (m *RequestMapCommand) String() string { return proto.CompactTextString(m) }
func (*RequestMapCommand) ProtoMessage()    {}
func (*RequestMapCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{12}
}
func (m *RequestMapCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestMapCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestMapCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestMapCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMapCommand.Merge(dst, src)
}
func (m *RequestMapCommand) XXX_Size() int {
	return m.Size()
}
func (m *RequestMapCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMapCommand.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMapCommand proto.InternalMessageInfo

func (m *RequestMapCommand) GetTriggerCmd() string {
	if m != nil {
		return m.TriggerCmd
	}
	return ""
}

type ResponseMapCommand struct {
	Error        ResponseMapCommand_Error `protobuf:"varint,1,opt,name=error,proto3,enum=SC2APIProtocol.ResponseMapCommand_Error" json:"error,omitempty"`
	ErrorDetails string                   `protobuf:"bytes,2,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (m *ResponseMapCommand) Reset()         { *m = ResponseMapCommand{} }
func (m *ResponseMapCommand) String() string { return proto.CompactTextString(m) }
func (*ResponseMapCommand) ProtoMessage()    {}
func (*ResponseMapCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{13}
}
func (m *ResponseMapCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseMapCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseMapCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseMapCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseMapCommand.Merge(dst, src)
}
func (m *ResponseMapCommand) XXX_Size() int {
	return m.Size()
}
func (m *ResponseMapCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseMapCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseMapCommand proto.InternalMessageInfo

func (m *ResponseMapCommand) GetError() ResponseMapCommand_Error {
	if m != nil {
		return m.Error
	}
	return ResponseMapCommand_nil
}

func (m *ResponseMapCommand) GetErrorDetails() string {
	if m != nil {
		return m.ErrorDetails
	}
	return ""
}

// -----------------------------------------------------------------------------
type RequestLeaveGame struct {
}

func (m *RequestLeaveGame) Reset()         { *m = RequestLeaveGame{} }
func (m *RequestLeaveGame) String() string { return proto.CompactTextString(m) }
func (*RequestLeaveGame) ProtoMessage()    {}
func (*RequestLeaveGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{14}
}
func (m *RequestLeaveGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLeaveGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLeaveGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestLeaveGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLeaveGame.Merge(dst, src)
}
func (m *RequestLeaveGame) XXX_Size() int {
	return m.Size()
}
func (m *RequestLeaveGame) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLeaveGame.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLeaveGame proto.InternalMessageInfo

type ResponseLeaveGame struct {
}

func (m *ResponseLeaveGame) Reset()         { *m = ResponseLeaveGame{} }
func (m *ResponseLeaveGame) String() string { return proto.CompactTextString(m) }
func (*ResponseLeaveGame) ProtoMessage()    {}
func (*ResponseLeaveGame) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{15}
}
func (m *ResponseLeaveGame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLeaveGame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLeaveGame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseLeaveGame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLeaveGame.Merge(dst, src)
}
func (m *ResponseLeaveGame) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLeaveGame) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLeaveGame.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLeaveGame proto.InternalMessageInfo

// -----------------------------------------------------------------------------
type RequestQuickSave struct {
}

func (m *RequestQuickSave) Reset()         { *m = RequestQuickSave{} }
func (m *RequestQuickSave) String() string { return proto.CompactTextString(m) }
func (*RequestQuickSave) ProtoMessage()    {}
func (*RequestQuickSave) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{16}
}
func (m *RequestQuickSave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestQuickSave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestQuickSave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestQuickSave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestQuickSave.Merge(dst, src)
}
func (m *RequestQuickSave) XXX_Size() int {
	return m.Size()
}
func (m *RequestQuickSave) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestQuickSave.DiscardUnknown(m)
}

var xxx_messageInfo_RequestQuickSave proto.InternalMessageInfo

// -----------------------------------------------------------------------------
type ResponseQuickSave struct {
}

func (m *ResponseQuickSave) Reset()         { *m = ResponseQuickSave{} }
func (m *ResponseQuickSave) String() string { return proto.CompactTextString(m) }
func (*ResponseQuickSave) ProtoMessage()    {}
func (*ResponseQuickSave) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{17}
}
func (m *ResponseQuickSave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseQuickSave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseQuickSave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseQuickSave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseQuickSave.Merge(dst, src)
}
func (m *ResponseQuickSave) XXX_Size() int {
	return m.Size()
}
func (m *ResponseQuickSave) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseQuickSave.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseQuickSave proto.InternalMessageInfo

// -----------------------------------------------------------------------------
type RequestQuickLoad struct {
}

func (m *RequestQuickLoad) Reset()         { *m = RequestQuickLoad{} }
func (m *RequestQuickLoad) String() string { return proto.CompactTextString(m) }
func (*RequestQuickLoad) ProtoMessage()    {}
func (*RequestQuickLoad) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{18}
}
func (m *RequestQuickLoad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestQuickLoad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestQuickLoad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestQuickLoad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestQuickLoad.Merge(dst, src)
}
func (m *RequestQuickLoad) XXX_Size() int {
	return m.Size()
}
func (m *RequestQuickLoad) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestQuickLoad.DiscardUnknown(m)
}

var xxx_messageInfo_RequestQuickLoad proto.InternalMessageInfo

// -----------------------------------------------------------------------------
type ResponseQuickLoad struct {
}

func (m *ResponseQuickLoad) Reset()         { *m = ResponseQuickLoad{} }
func (m *ResponseQuickLoad) String() string { return proto.CompactTextString(m) }
func (*ResponseQuickLoad) ProtoMessage()    {}
func (*ResponseQuickLoad) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{19}
}
func (m *ResponseQuickLoad) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseQuickLoad) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseQuickLoad.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseQuickLoad) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseQuickLoad.Merge(dst, src)
}
func (m *ResponseQuickLoad) XXX_Size() int {
	return m.Size()
}
func (m *ResponseQuickLoad) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseQuickLoad.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseQuickLoad proto.InternalMessageInfo

// -----------------------------------------------------------------------------
type RequestQuit struct {
}

func (m *RequestQuit) Reset()         { *m = RequestQuit{} }
func (m *RequestQuit) String() string { return proto.CompactTextString(m) }
func (*RequestQuit) ProtoMessage()    {}
func (*RequestQuit) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{20}
}
func (m *RequestQuit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestQuit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestQuit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestQuit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestQuit.Merge(dst, src)
}
func (m *RequestQuit) XXX_Size() int {
	return m.Size()
}
func (m *RequestQuit) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestQuit.DiscardUnknown(m)
}

var xxx_messageInfo_RequestQuit proto.InternalMessageInfo

type ResponseQuit struct {
}

func (m *ResponseQuit) Reset()         { *m = ResponseQuit{} }
func (m *ResponseQuit) String() string { return proto.CompactTextString(m) }
func (*ResponseQuit) ProtoMessage()    {}
func (*ResponseQuit) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{21}
}
func (m *ResponseQuit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseQuit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseQuit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseQuit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseQuit.Merge(dst, src)
}
func (m *ResponseQuit) XXX_Size() int {
	return m.Size()
}
func (m *ResponseQuit) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseQuit.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseQuit proto.InternalMessageInfo

// -----------------------------------------------------------------------------
type RequestGameInfo struct {
}

func (m *RequestGameInfo) Reset()         { *m = RequestGameInfo{} }
func (m *RequestGameInfo) String() string { return proto.CompactTextString(m) }
func (*RequestGameInfo) ProtoMessage()    {}
func (*RequestGameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{22}
}
func (m *RequestGameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestGameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGameInfo.Merge(dst, src)
}
func (m *RequestGameInfo) XXX_Size() int {
	return m.Size()
}
func (m *RequestGameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGameInfo proto.InternalMessageInfo

type ResponseGameInfo struct {
	MapName      string            `protobuf:"bytes,1,opt,name=map_name,json=mapName,proto3" json:"map_name,omitempty"`
	ModNames     []string          `protobuf:"bytes,6,rep,name=mod_names,json=modNames" json:"mod_names,omitempty"`
	LocalMapPath string            `protobuf:"bytes,2,opt,name=local_map_path,json=localMapPath,proto3" json:"local_map_path,omitempty"`
	PlayerInfo   []*PlayerInfo     `protobuf:"bytes,3,rep,name=player_info,json=playerInfo" json:"player_info,omitempty"`
	StartRaw     *StartRaw         `protobuf:"bytes,4,opt,name=start_raw,json=startRaw" json:"start_raw,omitempty"`
	Options      *InterfaceOptions `protobuf:"bytes,5,opt,name=options" json:"options,omitempty"`
}

func (m *ResponseGameInfo) Reset()         { *m = ResponseGameInfo{} }
func (m *ResponseGameInfo) String() string { return proto.CompactTextString(m) }
func (*ResponseGameInfo) ProtoMessage()    {}
func (*ResponseGameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{23}
}
func (m *ResponseGameInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGameInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGameInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseGameInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGameInfo.Merge(dst, src)
}
func (m *ResponseGameInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGameInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGameInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGameInfo proto.InternalMessageInfo

func (m *ResponseGameInfo) GetMapName() string {
	if m != nil {
		return m.MapName
	}
	return ""
}

func (m *ResponseGameInfo) GetModNames() []string {
	if m != nil {
		return m.ModNames
	}
	return nil
}

func (m *ResponseGameInfo) GetLocalMapPath() string {
	if m != nil {
		return m.LocalMapPath
	}
	return ""
}

func (m *ResponseGameInfo) GetPlayerInfo() []*PlayerInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *ResponseGameInfo) GetStartRaw() *StartRaw {
	if m != nil {
		return m.StartRaw
	}
	return nil
}

func (m *ResponseGameInfo) GetOptions() *InterfaceOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// -----------------------------------------------------------------------------
type RequestObservation struct {
	DisableFog bool `protobuf:"varint,1,opt,name=disable_fog,json=disableFog,proto3" json:"disable_fog,omitempty"`
}

func (m *RequestObservation) Reset()         { *m = RequestObservation{} }
func (m *RequestObservation) String() string { return proto.CompactTextString(m) }
func (*RequestObservation) ProtoMessage()    {}
func (*RequestObservation) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{24}
}
func (m *RequestObservation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestObservation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestObservation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestObservation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestObservation.Merge(dst, src)
}
func (m *RequestObservation) XXX_Size() int {
	return m.Size()
}
func (m *RequestObservation) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestObservation.DiscardUnknown(m)
}

var xxx_messageInfo_RequestObservation proto.InternalMessageInfo

func (m *RequestObservation) GetDisableFog() bool {
	if m != nil {
		return m.DisableFog
	}
	return false
}

type ResponseObservation struct {
	Actions      []*Action       `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
	ActionErrors []*ActionError  `protobuf:"bytes,2,rep,name=action_errors,json=actionErrors" json:"action_errors,omitempty"`
	Observation  *Observation    `protobuf:"bytes,3,opt,name=observation" json:"observation,omitempty"`
	PlayerResult []*PlayerResult `protobuf:"bytes,4,rep,name=player_result,json=playerResult" json:"player_result,omitempty"`
	Chat         []*ChatReceived `protobuf:"bytes,5,rep,name=chat" json:"chat,omitempty"`
}

func (m *ResponseObservation) Reset()         { *m = ResponseObservation{} }
func (m *ResponseObservation) String() string { return proto.CompactTextString(m) }
func (*ResponseObservation) ProtoMessage()    {}
func (*ResponseObservation) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{25}
}
func (m *ResponseObservation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseObservation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseObservation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseObservation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseObservation.Merge(dst, src)
}
func (m *ResponseObservation) XXX_Size() int {
	return m.Size()
}
func (m *ResponseObservation) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseObservation.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseObservation proto.InternalMessageInfo

func (m *ResponseObservation) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *ResponseObservation) GetActionErrors() []*ActionError {
	if m != nil {
		return m.ActionErrors
	}
	return nil
}

func (m *ResponseObservation) GetObservation() *Observation {
	if m != nil {
		return m.Observation
	}
	return nil
}

func (m *ResponseObservation) GetPlayerResult() []*PlayerResult {
	if m != nil {
		return m.PlayerResult
	}
	return nil
}

func (m *ResponseObservation) GetChat() []*ChatReceived {
	if m != nil {
		return m.Chat
	}
	return nil
}

type ChatReceived struct {
	PlayerId PlayerID `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3,casttype=PlayerID" json:"player_id,omitempty"`
	Message  string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ChatReceived) Reset()         { *m = ChatReceived{} }
func (m *ChatReceived) String() string { return proto.CompactTextString(m) }
func (*ChatReceived) ProtoMessage()    {}
func (*ChatReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{26}
}
func (m *ChatReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChatReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatReceived.Merge(dst, src)
}
func (m *ChatReceived) XXX_Size() int {
	return m.Size()
}
func (m *ChatReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatReceived.DiscardUnknown(m)
}

var xxx_messageInfo_ChatReceived proto.InternalMessageInfo

func (m *ChatReceived) GetPlayerId() PlayerID {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ChatReceived) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// -----------------------------------------------------------------------------
type RequestAction struct {
	Actions []*Action `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
}

func (m *RequestAction) Reset()         { *m = RequestAction{} }
func (m *RequestAction) String() string { return proto.CompactTextString(m) }
func (*RequestAction) ProtoMessage()    {}
func (*RequestAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{27}
}
func (m *RequestAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestAction.Merge(dst, src)
}
func (m *RequestAction) XXX_Size() int {
	return m.Size()
}
func (m *RequestAction) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestAction.DiscardUnknown(m)
}

var xxx_messageInfo_RequestAction proto.InternalMessageInfo

func (m *RequestAction) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type ResponseAction struct {
	Result []ActionResult `protobuf:"varint,1,rep,packed,name=result,enum=SC2APIProtocol.ActionResult" json:"result,omitempty"`
}

func (m *ResponseAction) Reset()         { *m = ResponseAction{} }
func (m *ResponseAction) String() string { return proto.CompactTextString(m) }
func (*ResponseAction) ProtoMessage()    {}
func (*ResponseAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{28}
}
func (m *ResponseAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseAction.Merge(dst, src)
}
func (m *ResponseAction) XXX_Size() int {
	return m.Size()
}
func (m *ResponseAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseAction.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseAction proto.InternalMessageInfo

func (m *ResponseAction) GetResult() []ActionResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// -----------------------------------------------------------------------------
type RequestObserverAction struct {
	Actions []*ObserverAction `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
}

func (m *RequestObserverAction) Reset()         { *m = RequestObserverAction{} }
func (m *RequestObserverAction) String() string { return proto.CompactTextString(m) }
func (*RequestObserverAction) ProtoMessage()    {}
func (*RequestObserverAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{29}
}
func (m *RequestObserverAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestObserverAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestObserverAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestObserverAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestObserverAction.Merge(dst, src)
}
func (m *RequestObserverAction) XXX_Size() int {
	return m.Size()
}
func (m *RequestObserverAction) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestObserverAction.DiscardUnknown(m)
}

var xxx_messageInfo_RequestObserverAction proto.InternalMessageInfo

func (m *RequestObserverAction) GetActions() []*ObserverAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

type ResponseObserverAction struct {
}

func (m *ResponseObserverAction) Reset()         { *m = ResponseObserverAction{} }
func (m *ResponseObserverAction) String() string { return proto.CompactTextString(m) }
func (*ResponseObserverAction) ProtoMessage()    {}
func (*ResponseObserverAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{30}
}
func (m *ResponseObserverAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseObserverAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseObserverAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseObserverAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseObserverAction.Merge(dst, src)
}
func (m *ResponseObserverAction) XXX_Size() int {
	return m.Size()
}
func (m *ResponseObserverAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseObserverAction.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseObserverAction proto.InternalMessageInfo

// -----------------------------------------------------------------------------
type RequestStep struct {
	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *RequestStep) Reset()         { *m = RequestStep{} }
func (m *RequestStep) String() string { return proto.CompactTextString(m) }
func (*RequestStep) ProtoMessage()    {}
func (*RequestStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{31}
}
func (m *RequestStep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStep.Merge(dst, src)
}
func (m *RequestStep) XXX_Size() int {
	return m.Size()
}
func (m *RequestStep) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStep.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStep proto.InternalMessageInfo

func (m *RequestStep) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ResponseStep struct {
}

func (m *ResponseStep) Reset()         { *m = ResponseStep{} }
func (m *ResponseStep) String() string { return proto.CompactTextString(m) }
func (*ResponseStep) ProtoMessage()    {}
func (*ResponseStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{32}
}
func (m *ResponseStep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseStep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseStep.Merge(dst, src)
}
func (m *ResponseStep) XXX_Size() int {
	return m.Size()
}
func (m *ResponseStep) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseStep.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseStep proto.InternalMessageInfo

// -----------------------------------------------------------------------------
type RequestData struct {
	AbilityId  bool `protobuf:"varint,1,opt,name=ability_id,json=abilityId,proto3" json:"ability_id,omitempty"`
	UnitTypeId bool `protobuf:"varint,2,opt,name=unit_type_id,json=unitTypeId,proto3" json:"unit_type_id,omitempty"`
	UpgradeId  bool `protobuf:"varint,3,opt,name=upgrade_id,json=upgradeId,proto3" json:"upgrade_id,omitempty"`
	BuffId     bool `protobuf:"varint,4,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	EffectId   bool `protobuf:"varint,5,opt,name=effect_id,json=effectId,proto3" json:"effect_id,omitempty"`
}

func (m *RequestData) Reset()         { *m = RequestData{} }
func (m *RequestData) String() string { return proto.CompactTextString(m) }
func (*RequestData) ProtoMessage()    {}
func (*RequestData) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{33}
}
func (m *RequestData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestData.Merge(dst, src)
}
func (m *RequestData) XXX_Size() int {
	return m.Size()
}
func (m *RequestData) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestData.DiscardUnknown(m)
}

var xxx_messageInfo_RequestData proto.InternalMessageInfo

func (m *RequestData) GetAbilityId() bool {
	if m != nil {
		return m.AbilityId
	}
	return false
}

func (m *RequestData) GetUnitTypeId() bool {
	if m != nil {
		return m.UnitTypeId
	}
	return false
}

func (m *RequestData) GetUpgradeId() bool {
	if m != nil {
		return m.UpgradeId
	}
	return false
}

func (m *RequestData) GetBuffId() bool {
	if m != nil {
		return m.BuffId
	}
	return false
}

func (m *RequestData) GetEffectId() bool {
	if m != nil {
		return m.EffectId
	}
	return false
}

type ResponseData struct {
	Abilities []*AbilityData  `protobuf:"bytes,1,rep,name=abilities" json:"abilities,omitempty"`
	Units     []*UnitTypeData `protobuf:"bytes,2,rep,name=units" json:"units,omitempty"`
	Upgrades  []*UpgradeData  `protobuf:"bytes,3,rep,name=upgrades" json:"upgrades,omitempty"`
	Buffs     []*BuffData     `protobuf:"bytes,4,rep,name=buffs" json:"buffs,omitempty"`
	Effects   []*EffectData   `protobuf:"bytes,5,rep,name=effects" json:"effects,omitempty"`
}

func (m *ResponseData) Reset()         { *m = ResponseData{} }
func (m *ResponseData) String() string { return proto.CompactTextString(m) }
func (*ResponseData) ProtoMessage()    {}
func (*ResponseData) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{34}
}
func (m *ResponseData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseData.Merge(dst, src)
}
func (m *ResponseData) XXX_Size() int {
	return m.Size()
}
func (m *ResponseData) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseData.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseData proto.InternalMessageInfo

func (m *ResponseData) GetAbilities() []*AbilityData {
	if m != nil {
		return m.Abilities
	}
	return nil
}

func (m *ResponseData) GetUnits() []*UnitTypeData {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *ResponseData) GetUpgrades() []*UpgradeData {
	if m != nil {
		return m.Upgrades
	}
	return nil
}

func (m *ResponseData) GetBuffs() []*BuffData {
	if m != nil {
		return m.Buffs
	}
	return nil
}

func (m *ResponseData) GetEffects() []*EffectData {
	if m != nil {
		return m.Effects
	}
	return nil
}

// -----------------------------------------------------------------------------
type RequestSaveReplay struct {
}

func (m *RequestSaveReplay) Reset()         { *m = RequestSaveReplay{} }
func (m *RequestSaveReplay) String() string { return proto.CompactTextString(m) }
func (*RequestSaveReplay) ProtoMessage()    {}
func (*RequestSaveReplay) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{35}
}
func (m *RequestSaveReplay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSaveReplay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSaveReplay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestSaveReplay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSaveReplay.Merge(dst, src)
}
func (m *RequestSaveReplay) XXX_Size() int {
	return m.Size()
}
func (m *RequestSaveReplay) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSaveReplay.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSaveReplay proto.InternalMessageInfo

type ResponseSaveReplay struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ResponseSaveReplay) Reset()         { *m = ResponseSaveReplay{} }
func (m *ResponseSaveReplay) String() string { return proto.CompactTextString(m) }
func (*ResponseSaveReplay) ProtoMessage()    {}
func (*ResponseSaveReplay) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{36}
}
func (m *ResponseSaveReplay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSaveReplay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSaveReplay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseSaveReplay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSaveReplay.Merge(dst, src)
}
func (m *ResponseSaveReplay) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSaveReplay) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSaveReplay.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSaveReplay proto.InternalMessageInfo

func (m *ResponseSaveReplay) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// -----------------------------------------------------------------------------
type RequestReplayInfo struct {
	// Types that are valid to be assigned to Replay:
	//	*RequestReplayInfo_ReplayPath
	//	*RequestReplayInfo_ReplayData
	Replay       isRequestReplayInfo_Replay `protobuf_oneof:"replay"`
	DownloadData bool                       `protobuf:"varint,3,opt,name=download_data,json=downloadData,proto3" json:"download_data,omitempty"`
}

func (m *RequestReplayInfo) Reset()         { *m = RequestReplayInfo{} }
func (m *RequestReplayInfo) String() string { return proto.CompactTextString(m) }
func (*RequestReplayInfo) ProtoMessage()    {}
func (*RequestReplayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{37}
}
func (m *RequestReplayInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestReplayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestReplayInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestReplayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestReplayInfo.Merge(dst, src)
}
func (m *RequestReplayInfo) XXX_Size() int {
	return m.Size()
}
func (m *RequestReplayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestReplayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RequestReplayInfo proto.InternalMessageInfo

type isRequestReplayInfo_Replay interface {
	isRequestReplayInfo_Replay()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestReplayInfo_ReplayPath struct {
	ReplayPath string `protobuf:"bytes,1,opt,name=replay_path,json=replayPath,proto3,oneof"`
}
type RequestReplayInfo_ReplayData struct {
	ReplayData []byte `protobuf:"bytes,2,opt,name=replay_data,json=replayData,proto3,oneof"`
}

func (*RequestReplayInfo_ReplayPath) isRequestReplayInfo_Replay() {}
func (*RequestReplayInfo_ReplayData) isRequestReplayInfo_Replay() {}

func (m *RequestReplayInfo) GetReplay() isRequestReplayInfo_Replay {
	if m != nil {
		return m.Replay
	}
	return nil
}

func (m *RequestReplayInfo) GetReplayPath() string {
	if x, ok := m.GetReplay().(*RequestReplayInfo_ReplayPath); ok {
		return x.ReplayPath
	}
	return ""
}

func (m *RequestReplayInfo) GetReplayData() []byte {
	if x, ok := m.GetReplay().(*RequestReplayInfo_ReplayData); ok {
		return x.ReplayData
	}
	return nil
}

func (m *RequestReplayInfo) GetDownloadData() bool {
	if m != nil {
		return m.DownloadData
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RequestReplayInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RequestReplayInfo_OneofMarshaler, _RequestReplayInfo_OneofUnmarshaler, _RequestReplayInfo_OneofSizer, []interface{}{
		(*RequestReplayInfo_ReplayPath)(nil),
		(*RequestReplayInfo_ReplayData)(nil),
	}
}

func _RequestReplayInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RequestReplayInfo)
	// replay
	switch x := m.Replay.(type) {
	case *RequestReplayInfo_ReplayPath:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.ReplayPath)
	case *RequestReplayInfo_ReplayData:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.ReplayData)
	case nil:
	default:
		return fmt.Errorf("RequestReplayInfo.Replay has unexpected type %T", x)
	}
	return nil
}

func _RequestReplayInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RequestReplayInfo)
	switch tag {
	case 1: // replay.replay_path
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Replay = &RequestReplayInfo_ReplayPath{x}
		return true, err
	case 2: // replay.replay_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Replay = &RequestReplayInfo_ReplayData{x}
		return true, err
	default:
		return false, nil
	}
}

func _RequestReplayInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RequestReplayInfo)
	// replay
	switch x := m.Replay.(type) {
	case *RequestReplayInfo_ReplayPath:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ReplayPath)))
		n += len(x.ReplayPath)
	case *RequestReplayInfo_ReplayData:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ReplayData)))
		n += len(x.ReplayData)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PlayerInfoExtra struct {
	PlayerInfo   *PlayerInfo   `protobuf:"bytes,1,opt,name=player_info,json=playerInfo" json:"player_info,omitempty"`
	PlayerResult *PlayerResult `protobuf:"bytes,2,opt,name=player_result,json=playerResult" json:"player_result,omitempty"`
	PlayerMmr    int32         `protobuf:"varint,3,opt,name=player_mmr,json=playerMmr,proto3" json:"player_mmr,omitempty"`
	PlayerApm    int32         `protobuf:"varint,4,opt,name=player_apm,json=playerApm,proto3" json:"player_apm,omitempty"`
}

func (m *PlayerInfoExtra) Reset()         { *m = PlayerInfoExtra{} }
func (m *PlayerInfoExtra) String() string { return proto.CompactTextString(m) }
func (*PlayerInfoExtra) ProtoMessage()    {}
func (*PlayerInfoExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{38}
}
func (m *PlayerInfoExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerInfoExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerInfoExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerInfoExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInfoExtra.Merge(dst, src)
}
func (m *PlayerInfoExtra) XXX_Size() int {
	return m.Size()
}
func (m *PlayerInfoExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInfoExtra.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInfoExtra proto.InternalMessageInfo

func (m *PlayerInfoExtra) GetPlayerInfo() *PlayerInfo {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *PlayerInfoExtra) GetPlayerResult() *PlayerResult {
	if m != nil {
		return m.PlayerResult
	}
	return nil
}

func (m *PlayerInfoExtra) GetPlayerMmr() int32 {
	if m != nil {
		return m.PlayerMmr
	}
	return 0
}

func (m *PlayerInfoExtra) GetPlayerApm() int32 {
	if m != nil {
		return m.PlayerApm
	}
	return 0
}

type ResponseReplayInfo struct {
	MapName             string                   `protobuf:"bytes,1,opt,name=map_name,json=mapName,proto3" json:"map_name,omitempty"`
	LocalMapPath        string                   `protobuf:"bytes,2,opt,name=local_map_path,json=localMapPath,proto3" json:"local_map_path,omitempty"`
	PlayerInfo          []*PlayerInfoExtra       `protobuf:"bytes,3,rep,name=player_info,json=playerInfo" json:"player_info,omitempty"`
	GameDurationLoops   uint32                   `protobuf:"varint,4,opt,name=game_duration_loops,json=gameDurationLoops,proto3" json:"game_duration_loops,omitempty"`
	GameDurationSeconds float32                  `protobuf:"fixed32,5,opt,name=game_duration_seconds,json=gameDurationSeconds,proto3" json:"game_duration_seconds,omitempty"`
	GameVersion         string                   `protobuf:"bytes,6,opt,name=game_version,json=gameVersion,proto3" json:"game_version,omitempty"`
	DataVersion         string                   `protobuf:"bytes,11,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
	DataBuild           uint32                   `protobuf:"varint,7,opt,name=data_build,json=dataBuild,proto3" json:"data_build,omitempty"`
	BaseBuild           uint32                   `protobuf:"varint,8,opt,name=base_build,json=baseBuild,proto3" json:"base_build,omitempty"`
	Error               ResponseReplayInfo_Error `protobuf:"varint,9,opt,name=error,proto3,enum=SC2APIProtocol.ResponseReplayInfo_Error" json:"error,omitempty"`
	ErrorDetails        string                   `protobuf:"bytes,10,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (m *ResponseReplayInfo) Reset()         { *m = ResponseReplayInfo{} }
func (m *ResponseReplayInfo) String() string { return proto.CompactTextString(m) }
func (*ResponseReplayInfo) ProtoMessage()    {}
func (*ResponseReplayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{39}
}
func (m *ResponseReplayInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseReplayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseReplayInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseReplayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseReplayInfo.Merge(dst, src)
}
func (m *ResponseReplayInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResponseReplayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseReplayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseReplayInfo proto.InternalMessageInfo

func (m *ResponseReplayInfo) GetMapName() string {
	if m != nil {
		return m.MapName
	}
	return ""
}

func (m *ResponseReplayInfo) GetLocalMapPath() string {
	if m != nil {
		return m.LocalMapPath
	}
	return ""
}

func (m *ResponseReplayInfo) GetPlayerInfo() []*PlayerInfoExtra {
	if m != nil {
		return m.PlayerInfo
	}
	return nil
}

func (m *ResponseReplayInfo) GetGameDurationLoops() uint32 {
	if m != nil {
		return m.GameDurationLoops
	}
	return 0
}

func (m *ResponseReplayInfo) GetGameDurationSeconds() float32 {
	if m != nil {
		return m.GameDurationSeconds
	}
	return 0
}

func (m *ResponseReplayInfo) GetGameVersion() string {
	if m != nil {
		return m.GameVersion
	}
	return ""
}

func (m *ResponseReplayInfo) GetDataVersion() string {
	if m != nil {
		return m.DataVersion
	}
	return ""
}

func (m *ResponseReplayInfo) GetDataBuild() uint32 {
	if m != nil {
		return m.DataBuild
	}
	return 0
}

func (m *ResponseReplayInfo) GetBaseBuild() uint32 {
	if m != nil {
		return m.BaseBuild
	}
	return 0
}

func (m *ResponseReplayInfo) GetError() ResponseReplayInfo_Error {
	if m != nil {
		return m.Error
	}
	return ResponseReplayInfo_nil
}

func (m *ResponseReplayInfo) GetErrorDetails() string {
	if m != nil {
		return m.ErrorDetails
	}
	return ""
}

// -----------------------------------------------------------------------------
type RequestAvailableMaps struct {
}

func (m *RequestAvailableMaps) Reset()         { *m = RequestAvailableMaps{} }
func (m *RequestAvailableMaps) String() string { return proto.CompactTextString(m) }
func (*RequestAvailableMaps) ProtoMessage()    {}
func (*RequestAvailableMaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{40}
}
func (m *RequestAvailableMaps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestAvailableMaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestAvailableMaps.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestAvailableMaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestAvailableMaps.Merge(dst, src)
}
func (m *RequestAvailableMaps) XXX_Size() int {
	return m.Size()
}
func (m *RequestAvailableMaps) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestAvailableMaps.DiscardUnknown(m)
}

var xxx_messageInfo_RequestAvailableMaps proto.InternalMessageInfo

// This will only contain locally cached BattleNet maps.
// To download all ladder maps, log in and queue into a ladder match.
// To download any other map, play a custom game on that map.
type ResponseAvailableMaps struct {
	LocalMapPaths     []string `protobuf:"bytes,1,rep,name=local_map_paths,json=localMapPaths" json:"local_map_paths,omitempty"`
	BattlenetMapNames []string `protobuf:"bytes,2,rep,name=battlenet_map_names,json=battlenetMapNames" json:"battlenet_map_names,omitempty"`
}

func (m *ResponseAvailableMaps) Reset()         { *m = ResponseAvailableMaps{} }
func (m *ResponseAvailableMaps) String() string { return proto.CompactTextString(m) }
func (*ResponseAvailableMaps) ProtoMessage()    {}
func (*ResponseAvailableMaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{41}
}
func (m *ResponseAvailableMaps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseAvailableMaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseAvailableMaps.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseAvailableMaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseAvailableMaps.Merge(dst, src)
}
func (m *ResponseAvailableMaps) XXX_Size() int {
	return m.Size()
}
func (m *ResponseAvailableMaps) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseAvailableMaps.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseAvailableMaps proto.InternalMessageInfo

func (m *ResponseAvailableMaps) GetLocalMapPaths() []string {
	if m != nil {
		return m.LocalMapPaths
	}
	return nil
}

func (m *ResponseAvailableMaps) GetBattlenetMapNames() []string {
	if m != nil {
		return m.BattlenetMapNames
	}
	return nil
}

// -----------------------------------------------------------------------------
// Copies map data into the path specified.
type RequestSaveMap struct {
	MapPath string `protobuf:"bytes,1,opt,name=map_path,json=mapPath,proto3" json:"map_path,omitempty"`
	MapData []byte `protobuf:"bytes,2,opt,name=map_data,json=mapData,proto3" json:"map_data,omitempty"`
}

func (m *RequestSaveMap) Reset()         { *m = RequestSaveMap{} }
func (m *RequestSaveMap) String() string { return proto.CompactTextString(m) }
func (*RequestSaveMap) ProtoMessage()    {}
func (*RequestSaveMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{42}
}
func (m *RequestSaveMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSaveMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSaveMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestSaveMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSaveMap.Merge(dst, src)
}
func (m *RequestSaveMap) XXX_Size() int {
	return m.Size()
}
func (m *RequestSaveMap) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSaveMap.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSaveMap proto.InternalMessageInfo

func (m *RequestSaveMap) GetMapPath() string {
	if m != nil {
		return m.MapPath
	}
	return ""
}

func (m *RequestSaveMap) GetMapData() []byte {
	if m != nil {
		return m.MapData
	}
	return nil
}

type ResponseSaveMap struct {
	Error ResponseSaveMap_Error `protobuf:"varint,1,opt,name=error,proto3,enum=SC2APIProtocol.ResponseSaveMap_Error" json:"error,omitempty"`
}

func (m *ResponseSaveMap) Reset()         { *m = ResponseSaveMap{} }
func (m *ResponseSaveMap) String() string { return proto.CompactTextString(m) }
func (*ResponseSaveMap) ProtoMessage()    {}
func (*ResponseSaveMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{43}
}
func (m *ResponseSaveMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSaveMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSaveMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseSaveMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSaveMap.Merge(dst, src)
}
func (m *ResponseSaveMap) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSaveMap) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSaveMap.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSaveMap proto.InternalMessageInfo

func (m *ResponseSaveMap) GetError() ResponseSaveMap_Error {
	if m != nil {
		return m.Error
	}
	return ResponseSaveMap_nil
}

// -----------------------------------------------------------------------------
type RequestPing struct {
}

func (m *RequestPing) Reset()         { *m = RequestPing{} }
func (m *RequestPing) String() string { return proto.CompactTextString(m) }
func (*RequestPing) ProtoMessage()    {}
func (*RequestPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{44}
}
func (m *RequestPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPing.Merge(dst, src)
}
func (m *RequestPing) XXX_Size() int {
	return m.Size()
}
func (m *RequestPing) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPing.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPing proto.InternalMessageInfo

type ResponsePing struct {
	GameVersion string `protobuf:"bytes,1,opt,name=game_version,json=gameVersion,proto3" json:"game_version,omitempty"`
	DataVersion string `protobuf:"bytes,2,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
	DataBuild   uint32 `protobuf:"varint,3,opt,name=data_build,json=dataBuild,proto3" json:"data_build,omitempty"`
	BaseBuild   uint32 `protobuf:"varint,4,opt,name=base_build,json=baseBuild,proto3" json:"base_build,omitempty"`
}

func (m *ResponsePing) Reset()         { *m = ResponsePing{} }
func (m *ResponsePing) String() string { return proto.CompactTextString(m) }
func (*ResponsePing) ProtoMessage()    {}
func (*ResponsePing) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{45}
}
func (m *ResponsePing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponsePing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponsePing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponsePing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponsePing.Merge(dst, src)
}
func (m *ResponsePing) XXX_Size() int {
	return m.Size()
}
func (m *ResponsePing) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponsePing.DiscardUnknown(m)
}

var xxx_messageInfo_ResponsePing proto.InternalMessageInfo

func (m *ResponsePing) GetGameVersion() string {
	if m != nil {
		return m.GameVersion
	}
	return ""
}

func (m *ResponsePing) GetDataVersion() string {
	if m != nil {
		return m.DataVersion
	}
	return ""
}

func (m *ResponsePing) GetDataBuild() uint32 {
	if m != nil {
		return m.DataBuild
	}
	return 0
}

func (m *ResponsePing) GetBaseBuild() uint32 {
	if m != nil {
		return m.BaseBuild
	}
	return 0
}

// -----------------------------------------------------------------------------
type RequestDebug struct {
	Debug []*DebugCommand `protobuf:"bytes,1,rep,name=debug" json:"debug,omitempty"`
}

func (m *RequestDebug) Reset()         { *m = RequestDebug{} }
func (m *RequestDebug) String() string { return proto.CompactTextString(m) }
func (*RequestDebug) ProtoMessage()    {}
func (*RequestDebug) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{46}
}
func (m *RequestDebug) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDebug) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDebug.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestDebug) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDebug.Merge(dst, src)
}
func (m *RequestDebug) XXX_Size() int {
	return m.Size()
}
func (m *RequestDebug) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDebug.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDebug proto.InternalMessageInfo

func (m *RequestDebug) GetDebug() []*DebugCommand {
	if m != nil {
		return m.Debug
	}
	return nil
}

type ResponseDebug struct {
}

func (m *ResponseDebug) Reset()         { *m = ResponseDebug{} }
func (m *ResponseDebug) String() string { return proto.CompactTextString(m) }
func (*ResponseDebug) ProtoMessage()    {}
func (*ResponseDebug) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{47}
}
func (m *ResponseDebug) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseDebug) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseDebug.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseDebug) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDebug.Merge(dst, src)
}
func (m *ResponseDebug) XXX_Size() int {
	return m.Size()
}
func (m *ResponseDebug) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDebug.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDebug proto.InternalMessageInfo

type PlayerSetup struct {
	Type       PlayerType `protobuf:"varint,1,opt,name=type,proto3,enum=SC2APIProtocol.PlayerType" json:"type,omitempty"`
	Race       Race       `protobuf:"varint,2,opt,name=race,proto3,enum=SC2APIProtocol.Race" json:"race,omitempty"`
	Difficulty Difficulty `protobuf:"varint,3,opt,name=difficulty,proto3,enum=SC2APIProtocol.Difficulty" json:"difficulty,omitempty"`
	PlayerName string     `protobuf:"bytes,4,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
}

func (m *PlayerSetup) Reset()         { *m = PlayerSetup{} }
func (m *PlayerSetup) String() string { return proto.CompactTextString(m) }
func (*PlayerSetup) ProtoMessage()    {}
func (*PlayerSetup) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{48}
}
func (m *PlayerSetup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerSetup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerSetup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerSetup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerSetup.Merge(dst, src)
}
func (m *PlayerSetup) XXX_Size() int {
	return m.Size()
}
func (m *PlayerSetup) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerSetup.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerSetup proto.InternalMessageInfo

func (m *PlayerSetup) GetType() PlayerType {
	if m != nil {
		return m.Type
	}
	return PlayerType_nil
}

func (m *PlayerSetup) GetRace() Race {
	if m != nil {
		return m.Race
	}
	return Race_NoRace
}

func (m *PlayerSetup) GetDifficulty() Difficulty {
	if m != nil {
		return m.Difficulty
	}
	return Difficulty_nil
}

func (m *PlayerSetup) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type SpatialCameraSetup struct {
	Width             float32  `protobuf:"fixed32,1,opt,name=width,proto3" json:"width,omitempty"`
	Resolution        *Size2DI `protobuf:"bytes,2,opt,name=resolution" json:"resolution,omitempty"`
	MinimapResolution *Size2DI `protobuf:"bytes,3,opt,name=minimap_resolution,json=minimapResolution" json:"minimap_resolution,omitempty"`
}

func (m *SpatialCameraSetup) Reset()         { *m = SpatialCameraSetup{} }
func (m *SpatialCameraSetup) String() string { return proto.CompactTextString(m) }
func (*SpatialCameraSetup) ProtoMessage()    {}
func (*SpatialCameraSetup) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{49}
}
func (m *SpatialCameraSetup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpatialCameraSetup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpatialCameraSetup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SpatialCameraSetup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpatialCameraSetup.Merge(dst, src)
}
func (m *SpatialCameraSetup) XXX_Size() int {
	return m.Size()
}
func (m *SpatialCameraSetup) XXX_DiscardUnknown() {
	xxx_messageInfo_SpatialCameraSetup.DiscardUnknown(m)
}

var xxx_messageInfo_SpatialCameraSetup proto.InternalMessageInfo

func (m *SpatialCameraSetup) GetWidth() float32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *SpatialCameraSetup) GetResolution() *Size2DI {
	if m != nil {
		return m.Resolution
	}
	return nil
}

func (m *SpatialCameraSetup) GetMinimapResolution() *Size2DI {
	if m != nil {
		return m.MinimapResolution
	}
	return nil
}

type InterfaceOptions struct {
	Raw          bool                `protobuf:"varint,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Score        bool                `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	FeatureLayer *SpatialCameraSetup `protobuf:"bytes,3,opt,name=feature_layer,json=featureLayer" json:"feature_layer,omitempty"`
	Render       *SpatialCameraSetup `protobuf:"bytes,4,opt,name=render" json:"render,omitempty"`
}

func (m *InterfaceOptions) Reset()         { *m = InterfaceOptions{} }
func (m *InterfaceOptions) String() string { return proto.CompactTextString(m) }
func (*InterfaceOptions) ProtoMessage()    {}
func (*InterfaceOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{50}
}
func (m *InterfaceOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfaceOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *InterfaceOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceOptions.Merge(dst, src)
}
func (m *InterfaceOptions) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceOptions.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceOptions proto.InternalMessageInfo

func (m *InterfaceOptions) GetRaw() bool {
	if m != nil {
		return m.Raw
	}
	return false
}

func (m *InterfaceOptions) GetScore() bool {
	if m != nil {
		return m.Score
	}
	return false
}

func (m *InterfaceOptions) GetFeatureLayer() *SpatialCameraSetup {
	if m != nil {
		return m.FeatureLayer
	}
	return nil
}

func (m *InterfaceOptions) GetRender() *SpatialCameraSetup {
	if m != nil {
		return m.Render
	}
	return nil
}

type PlayerInfo struct {
	PlayerId      PlayerID   `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3,casttype=PlayerID" json:"player_id,omitempty"`
	Type          PlayerType `protobuf:"varint,2,opt,name=type,proto3,enum=SC2APIProtocol.PlayerType" json:"type,omitempty"`
	RaceRequested Race       `protobuf:"varint,3,opt,name=race_requested,json=raceRequested,proto3,enum=SC2APIProtocol.Race" json:"race_requested,omitempty"`
	RaceActual    Race       `protobuf:"varint,4,opt,name=race_actual,json=raceActual,proto3,enum=SC2APIProtocol.Race" json:"race_actual,omitempty"`
	Difficulty    Difficulty `protobuf:"varint,5,opt,name=difficulty,proto3,enum=SC2APIProtocol.Difficulty" json:"difficulty,omitempty"`
	PlayerName    string     `protobuf:"bytes,6,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
}

func (m *PlayerInfo) Reset()         { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()    {}
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{51}
}
func (m *PlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInfo.Merge(dst, src)
}
func (m *PlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInfo proto.InternalMessageInfo

func (m *PlayerInfo) GetPlayerId() PlayerID {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerInfo) GetType() PlayerType {
	if m != nil {
		return m.Type
	}
	return PlayerType_nil
}

func (m *PlayerInfo) GetRaceRequested() Race {
	if m != nil {
		return m.RaceRequested
	}
	return Race_NoRace
}

func (m *PlayerInfo) GetRaceActual() Race {
	if m != nil {
		return m.RaceActual
	}
	return Race_NoRace
}

func (m *PlayerInfo) GetDifficulty() Difficulty {
	if m != nil {
		return m.Difficulty
	}
	return Difficulty_nil
}

func (m *PlayerInfo) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

type PlayerCommon struct {
	PlayerId        PlayerID `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3,casttype=PlayerID" json:"player_id,omitempty"`
	Minerals        uint32   `protobuf:"varint,2,opt,name=minerals,proto3" json:"minerals,omitempty"`
	Vespene         uint32   `protobuf:"varint,3,opt,name=vespene,proto3" json:"vespene,omitempty"`
	FoodCap         uint32   `protobuf:"varint,4,opt,name=food_cap,json=foodCap,proto3" json:"food_cap,omitempty"`
	FoodUsed        uint32   `protobuf:"varint,5,opt,name=food_used,json=foodUsed,proto3" json:"food_used,omitempty"`
	FoodArmy        uint32   `protobuf:"varint,6,opt,name=food_army,json=foodArmy,proto3" json:"food_army,omitempty"`
	FoodWorkers     uint32   `protobuf:"varint,7,opt,name=food_workers,json=foodWorkers,proto3" json:"food_workers,omitempty"`
	IdleWorkerCount uint32   `protobuf:"varint,8,opt,name=idle_worker_count,json=idleWorkerCount,proto3" json:"idle_worker_count,omitempty"`
	ArmyCount       uint32   `protobuf:"varint,9,opt,name=army_count,json=armyCount,proto3" json:"army_count,omitempty"`
	WarpGateCount   uint32   `protobuf:"varint,10,opt,name=warp_gate_count,json=warpGateCount,proto3" json:"warp_gate_count,omitempty"`
	LarvaCount      uint32   `protobuf:"varint,11,opt,name=larva_count,json=larvaCount,proto3" json:"larva_count,omitempty"`
}

func (m *PlayerCommon) Reset()         { *m = PlayerCommon{} }
func (m *PlayerCommon) String() string { return proto.CompactTextString(m) }
func (*PlayerCommon) ProtoMessage()    {}
func (*PlayerCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{52}
}
func (m *PlayerCommon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerCommon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerCommon.Merge(dst, src)
}
func (m *PlayerCommon) XXX_Size() int {
	return m.Size()
}
func (m *PlayerCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerCommon.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerCommon proto.InternalMessageInfo

func (m *PlayerCommon) GetPlayerId() PlayerID {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerCommon) GetMinerals() uint32 {
	if m != nil {
		return m.Minerals
	}
	return 0
}

func (m *PlayerCommon) GetVespene() uint32 {
	if m != nil {
		return m.Vespene
	}
	return 0
}

func (m *PlayerCommon) GetFoodCap() uint32 {
	if m != nil {
		return m.FoodCap
	}
	return 0
}

func (m *PlayerCommon) GetFoodUsed() uint32 {
	if m != nil {
		return m.FoodUsed
	}
	return 0
}

func (m *PlayerCommon) GetFoodArmy() uint32 {
	if m != nil {
		return m.FoodArmy
	}
	return 0
}

func (m *PlayerCommon) GetFoodWorkers() uint32 {
	if m != nil {
		return m.FoodWorkers
	}
	return 0
}

func (m *PlayerCommon) GetIdleWorkerCount() uint32 {
	if m != nil {
		return m.IdleWorkerCount
	}
	return 0
}

func (m *PlayerCommon) GetArmyCount() uint32 {
	if m != nil {
		return m.ArmyCount
	}
	return 0
}

func (m *PlayerCommon) GetWarpGateCount() uint32 {
	if m != nil {
		return m.WarpGateCount
	}
	return 0
}

func (m *PlayerCommon) GetLarvaCount() uint32 {
	if m != nil {
		return m.LarvaCount
	}
	return 0
}

type Observation struct {
	GameLoop         uint32                   `protobuf:"varint,9,opt,name=game_loop,json=gameLoop,proto3" json:"game_loop,omitempty"`
	PlayerCommon     *PlayerCommon            `protobuf:"bytes,1,opt,name=player_common,json=playerCommon" json:"player_common,omitempty"`
	Alerts           []Alert                  `protobuf:"varint,10,rep,packed,name=alerts,enum=SC2APIProtocol.Alert" json:"alerts,omitempty"`
	Abilities        []*AvailableAbility      `protobuf:"bytes,3,rep,name=abilities" json:"abilities,omitempty"`
	Score            *Score                   `protobuf:"bytes,4,opt,name=score" json:"score,omitempty"`
	RawData          *ObservationRaw          `protobuf:"bytes,5,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`
	FeatureLayerData *ObservationFeatureLayer `protobuf:"bytes,6,opt,name=feature_layer_data,json=featureLayerData" json:"feature_layer_data,omitempty"`
	RenderData       *ObservationRender       `protobuf:"bytes,7,opt,name=render_data,json=renderData" json:"render_data,omitempty"`
	UiData           *ObservationUI           `protobuf:"bytes,8,opt,name=ui_data,json=uiData" json:"ui_data,omitempty"`
}

func (m *Observation) Reset()         { *m = Observation{} }
func (m *Observation) String() string { return proto.CompactTextString(m) }
func (*Observation) ProtoMessage()    {}
func (*Observation) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{53}
}
func (m *Observation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Observation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Observation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Observation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Observation.Merge(dst, src)
}
func (m *Observation) XXX_Size() int {
	return m.Size()
}
func (m *Observation) XXX_DiscardUnknown() {
	xxx_messageInfo_Observation.DiscardUnknown(m)
}

var xxx_messageInfo_Observation proto.InternalMessageInfo

func (m *Observation) GetGameLoop() uint32 {
	if m != nil {
		return m.GameLoop
	}
	return 0
}

func (m *Observation) GetPlayerCommon() *PlayerCommon {
	if m != nil {
		return m.PlayerCommon
	}
	return nil
}

func (m *Observation) GetAlerts() []Alert {
	if m != nil {
		return m.Alerts
	}
	return nil
}

func (m *Observation) GetAbilities() []*AvailableAbility {
	if m != nil {
		return m.Abilities
	}
	return nil
}

func (m *Observation) GetScore() *Score {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *Observation) GetRawData() *ObservationRaw {
	if m != nil {
		return m.RawData
	}
	return nil
}

func (m *Observation) GetFeatureLayerData() *ObservationFeatureLayer {
	if m != nil {
		return m.FeatureLayerData
	}
	return nil
}

func (m *Observation) GetRenderData() *ObservationRender {
	if m != nil {
		return m.RenderData
	}
	return nil
}

func (m *Observation) GetUiData() *ObservationUI {
	if m != nil {
		return m.UiData
	}
	return nil
}

type Action struct {
	ActionRaw          *ActionRaw     `protobuf:"bytes,1,opt,name=action_raw,json=actionRaw" json:"action_raw,omitempty"`
	ActionFeatureLayer *ActionSpatial `protobuf:"bytes,2,opt,name=action_feature_layer,json=actionFeatureLayer" json:"action_feature_layer,omitempty"`
	ActionRender       *ActionSpatial `protobuf:"bytes,3,opt,name=action_render,json=actionRender" json:"action_render,omitempty"`
	ActionUi           *ActionUI      `protobuf:"bytes,4,opt,name=action_ui,json=actionUi" json:"action_ui,omitempty"`
	ActionChat         *ActionChat    `protobuf:"bytes,6,opt,name=action_chat,json=actionChat" json:"action_chat,omitempty"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{54}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(dst, src)
}
func (m *Action) XXX_Size() int {
	return m.Size()
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

func (m *Action) GetActionRaw() *ActionRaw {
	if m != nil {
		return m.ActionRaw
	}
	return nil
}

func (m *Action) GetActionFeatureLayer() *ActionSpatial {
	if m != nil {
		return m.ActionFeatureLayer
	}
	return nil
}

func (m *Action) GetActionRender() *ActionSpatial {
	if m != nil {
		return m.ActionRender
	}
	return nil
}

func (m *Action) GetActionUi() *ActionUI {
	if m != nil {
		return m.ActionUi
	}
	return nil
}

func (m *Action) GetActionChat() *ActionChat {
	if m != nil {
		return m.ActionChat
	}
	return nil
}

type ActionChat struct {
	Channel ActionChat_Channel `protobuf:"varint,1,opt,name=channel,proto3,enum=SC2APIProtocol.ActionChat_Channel" json:"channel,omitempty"`
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ActionChat) Reset()         { *m = ActionChat{} }
func (m *ActionChat) String() string { return proto.CompactTextString(m) }
func (*ActionChat) ProtoMessage()    {}
func (*ActionChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{55}
}
func (m *ActionChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionChat.Merge(dst, src)
}
func (m *ActionChat) XXX_Size() int {
	return m.Size()
}
func (m *ActionChat) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionChat.DiscardUnknown(m)
}

var xxx_messageInfo_ActionChat proto.InternalMessageInfo

func (m *ActionChat) GetChannel() ActionChat_Channel {
	if m != nil {
		return m.Channel
	}
	return ActionChat_nil
}

func (m *ActionChat) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ActionError struct {
	UnitTag   UnitTag      `protobuf:"varint,1,opt,name=unit_tag,json=unitTag,proto3,casttype=UnitTag" json:"unit_tag,omitempty"`
	AbilityId AbilityID    `protobuf:"varint,2,opt,name=ability_id,json=abilityId,proto3,casttype=AbilityID" json:"ability_id,omitempty"`
	Result    ActionResult `protobuf:"varint,3,opt,name=result,proto3,enum=SC2APIProtocol.ActionResult" json:"result,omitempty"`
}

func (m *ActionError) Reset()         { *m = ActionError{} }
func (m *ActionError) String() string { return proto.CompactTextString(m) }
func (*ActionError) ProtoMessage()    {}
func (*ActionError) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{56}
}
func (m *ActionError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionError.Merge(dst, src)
}
func (m *ActionError) XXX_Size() int {
	return m.Size()
}
func (m *ActionError) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionError.DiscardUnknown(m)
}

var xxx_messageInfo_ActionError proto.InternalMessageInfo

func (m *ActionError) GetUnitTag() UnitTag {
	if m != nil {
		return m.UnitTag
	}
	return 0
}

func (m *ActionError) GetAbilityId() AbilityID {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func (m *ActionError) GetResult() ActionResult {
	if m != nil {
		return m.Result
	}
	return ActionResult_nil
}

type ObserverAction struct {
	// Types that are valid to be assigned to Action:
	//	*ObserverAction_PlayerPerspective
	//	*ObserverAction_CameraMove
	//	*ObserverAction_CameraFollowPlayer
	//	*ObserverAction_CameraFollowUnits
	Action isObserverAction_Action `protobuf_oneof:"action"`
}

func (m *ObserverAction) Reset()         { *m = ObserverAction{} }
func (m *ObserverAction) String() string { return proto.CompactTextString(m) }
func (*ObserverAction) ProtoMessage()    {}
func (*ObserverAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{57}
}
func (m *ObserverAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObserverAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObserverAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ObserverAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObserverAction.Merge(dst, src)
}
func (m *ObserverAction) XXX_Size() int {
	return m.Size()
}
func (m *ObserverAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ObserverAction.DiscardUnknown(m)
}

var xxx_messageInfo_ObserverAction proto.InternalMessageInfo

type isObserverAction_Action interface {
	isObserverAction_Action()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ObserverAction_PlayerPerspective struct {
	PlayerPerspective *ActionObserverPlayerPerspective `protobuf:"bytes,1,opt,name=player_perspective,json=playerPerspective,oneof"`
}
type ObserverAction_CameraMove struct {
	CameraMove *ActionObserverCameraMove `protobuf:"bytes,2,opt,name=camera_move,json=cameraMove,oneof"`
}
type ObserverAction_CameraFollowPlayer struct {
	CameraFollowPlayer *ActionObserverCameraFollowPlayer `protobuf:"bytes,3,opt,name=camera_follow_player,json=cameraFollowPlayer,oneof"`
}
type ObserverAction_CameraFollowUnits struct {
	CameraFollowUnits *ActionObserverCameraFollowUnits `protobuf:"bytes,4,opt,name=camera_follow_units,json=cameraFollowUnits,oneof"`
}

func (*ObserverAction_PlayerPerspective) isObserverAction_Action()  {}
func (*ObserverAction_CameraMove) isObserverAction_Action()         {}
func (*ObserverAction_CameraFollowPlayer) isObserverAction_Action() {}
func (*ObserverAction_CameraFollowUnits) isObserverAction_Action()  {}

func (m *ObserverAction) GetAction() isObserverAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ObserverAction) GetPlayerPerspective() *ActionObserverPlayerPerspective {
	if x, ok := m.GetAction().(*ObserverAction_PlayerPerspective); ok {
		return x.PlayerPerspective
	}
	return nil
}

func (m *ObserverAction) GetCameraMove() *ActionObserverCameraMove {
	if x, ok := m.GetAction().(*ObserverAction_CameraMove); ok {
		return x.CameraMove
	}
	return nil
}

func (m *ObserverAction) GetCameraFollowPlayer() *ActionObserverCameraFollowPlayer {
	if x, ok := m.GetAction().(*ObserverAction_CameraFollowPlayer); ok {
		return x.CameraFollowPlayer
	}
	return nil
}

func (m *ObserverAction) GetCameraFollowUnits() *ActionObserverCameraFollowUnits {
	if x, ok := m.GetAction().(*ObserverAction_CameraFollowUnits); ok {
		return x.CameraFollowUnits
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ObserverAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ObserverAction_OneofMarshaler, _ObserverAction_OneofUnmarshaler, _ObserverAction_OneofSizer, []interface{}{
		(*ObserverAction_PlayerPerspective)(nil),
		(*ObserverAction_CameraMove)(nil),
		(*ObserverAction_CameraFollowPlayer)(nil),
		(*ObserverAction_CameraFollowUnits)(nil),
	}
}

func _ObserverAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ObserverAction)
	// action
	switch x := m.Action.(type) {
	case *ObserverAction_PlayerPerspective:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlayerPerspective); err != nil {
			return err
		}
	case *ObserverAction_CameraMove:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CameraMove); err != nil {
			return err
		}
	case *ObserverAction_CameraFollowPlayer:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CameraFollowPlayer); err != nil {
			return err
		}
	case *ObserverAction_CameraFollowUnits:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CameraFollowUnits); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ObserverAction.Action has unexpected type %T", x)
	}
	return nil
}

func _ObserverAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ObserverAction)
	switch tag {
	case 1: // action.player_perspective
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionObserverPlayerPerspective)
		err := b.DecodeMessage(msg)
		m.Action = &ObserverAction_PlayerPerspective{msg}
		return true, err
	case 2: // action.camera_move
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionObserverCameraMove)
		err := b.DecodeMessage(msg)
		m.Action = &ObserverAction_CameraMove{msg}
		return true, err
	case 3: // action.camera_follow_player
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionObserverCameraFollowPlayer)
		err := b.DecodeMessage(msg)
		m.Action = &ObserverAction_CameraFollowPlayer{msg}
		return true, err
	case 4: // action.camera_follow_units
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionObserverCameraFollowUnits)
		err := b.DecodeMessage(msg)
		m.Action = &ObserverAction_CameraFollowUnits{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ObserverAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ObserverAction)
	// action
	switch x := m.Action.(type) {
	case *ObserverAction_PlayerPerspective:
		s := proto.Size(x.PlayerPerspective)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ObserverAction_CameraMove:
		s := proto.Size(x.CameraMove)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ObserverAction_CameraFollowPlayer:
		s := proto.Size(x.CameraFollowPlayer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ObserverAction_CameraFollowUnits:
		s := proto.Size(x.CameraFollowUnits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActionObserverPlayerPerspective struct {
	PlayerId PlayerID `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3,casttype=PlayerID" json:"player_id,omitempty"`
}

func (m *ActionObserverPlayerPerspective) Reset()         { *m = ActionObserverPlayerPerspective{} }
func (m *ActionObserverPlayerPerspective) String() string { return proto.CompactTextString(m) }
func (*ActionObserverPlayerPerspective) ProtoMessage()    {}
func (*ActionObserverPlayerPerspective) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{58}
}
func (m *ActionObserverPlayerPerspective) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionObserverPlayerPerspective) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionObserverPlayerPerspective.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionObserverPlayerPerspective) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionObserverPlayerPerspective.Merge(dst, src)
}
func (m *ActionObserverPlayerPerspective) XXX_Size() int {
	return m.Size()
}
func (m *ActionObserverPlayerPerspective) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionObserverPlayerPerspective.DiscardUnknown(m)
}

var xxx_messageInfo_ActionObserverPlayerPerspective proto.InternalMessageInfo

func (m *ActionObserverPlayerPerspective) GetPlayerId() PlayerID {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type ActionObserverCameraMove struct {
	WorldPos *Point2D `protobuf:"bytes,1,opt,name=world_pos,json=worldPos" json:"world_pos,omitempty"`
	Distance float32  `protobuf:"fixed32,2,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (m *ActionObserverCameraMove) Reset()         { *m = ActionObserverCameraMove{} }
func (m *ActionObserverCameraMove) String() string { return proto.CompactTextString(m) }
func (*ActionObserverCameraMove) ProtoMessage()    {}
func (*ActionObserverCameraMove) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{59}
}
func (m *ActionObserverCameraMove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionObserverCameraMove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionObserverCameraMove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionObserverCameraMove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionObserverCameraMove.Merge(dst, src)
}
func (m *ActionObserverCameraMove) XXX_Size() int {
	return m.Size()
}
func (m *ActionObserverCameraMove) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionObserverCameraMove.DiscardUnknown(m)
}

var xxx_messageInfo_ActionObserverCameraMove proto.InternalMessageInfo

func (m *ActionObserverCameraMove) GetWorldPos() *Point2D {
	if m != nil {
		return m.WorldPos
	}
	return nil
}

func (m *ActionObserverCameraMove) GetDistance() float32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

type ActionObserverCameraFollowPlayer struct {
	PlayerId PlayerID `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3,casttype=PlayerID" json:"player_id,omitempty"`
}

func (m *ActionObserverCameraFollowPlayer) Reset()         { *m = ActionObserverCameraFollowPlayer{} }
func (m *ActionObserverCameraFollowPlayer) String() string { return proto.CompactTextString(m) }
func (*ActionObserverCameraFollowPlayer) ProtoMessage()    {}
func (*ActionObserverCameraFollowPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{60}
}
func (m *ActionObserverCameraFollowPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionObserverCameraFollowPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionObserverCameraFollowPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionObserverCameraFollowPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionObserverCameraFollowPlayer.Merge(dst, src)
}
func (m *ActionObserverCameraFollowPlayer) XXX_Size() int {
	return m.Size()
}
func (m *ActionObserverCameraFollowPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionObserverCameraFollowPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_ActionObserverCameraFollowPlayer proto.InternalMessageInfo

func (m *ActionObserverCameraFollowPlayer) GetPlayerId() PlayerID {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type ActionObserverCameraFollowUnits struct {
	UnitTags []UnitTag `protobuf:"varint,1,rep,packed,name=unit_tags,json=unitTags,casttype=UnitTag" json:"unit_tags,omitempty"`
}

func (m *ActionObserverCameraFollowUnits) Reset()         { *m = ActionObserverCameraFollowUnits{} }
func (m *ActionObserverCameraFollowUnits) String() string { return proto.CompactTextString(m) }
func (*ActionObserverCameraFollowUnits) ProtoMessage()    {}
func (*ActionObserverCameraFollowUnits) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{61}
}
func (m *ActionObserverCameraFollowUnits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionObserverCameraFollowUnits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionObserverCameraFollowUnits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionObserverCameraFollowUnits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionObserverCameraFollowUnits.Merge(dst, src)
}
func (m *ActionObserverCameraFollowUnits) XXX_Size() int {
	return m.Size()
}
func (m *ActionObserverCameraFollowUnits) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionObserverCameraFollowUnits.DiscardUnknown(m)
}

var xxx_messageInfo_ActionObserverCameraFollowUnits proto.InternalMessageInfo

func (m *ActionObserverCameraFollowUnits) GetUnitTags() []UnitTag {
	if m != nil {
		return m.UnitTags
	}
	return nil
}

type PlayerResult struct {
	PlayerId PlayerID `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3,casttype=PlayerID" json:"player_id,omitempty"`
	Result   Result   `protobuf:"varint,2,opt,name=result,proto3,enum=SC2APIProtocol.Result" json:"result,omitempty"`
}

func (m *PlayerResult) Reset()         { *m = PlayerResult{} }
func (m *PlayerResult) String() string { return proto.CompactTextString(m) }
func (*PlayerResult) ProtoMessage()    {}
func (*PlayerResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_sc2api_29ffa919afdeb744, []int{62}
}
func (m *PlayerResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerResult.Merge(dst, src)
}
func (m *PlayerResult) XXX_Size() int {
	return m.Size()
}
func (m *PlayerResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerResult.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerResult proto.InternalMessageInfo

func (m *PlayerResult) GetPlayerId() PlayerID {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *PlayerResult) GetResult() Result {
	if m != nil {
		return m.Result
	}
	return Result_nil
}

func init() {
	proto.RegisterType((*Request)(nil), "SC2APIProtocol.Request")
	proto.RegisterType((*Response)(nil), "SC2APIProtocol.Response")
	proto.RegisterType((*RequestCreateGame)(nil), "SC2APIProtocol.RequestCreateGame")
	proto.RegisterType((*LocalMap)(nil), "SC2APIProtocol.LocalMap")
	proto.RegisterType((*ResponseCreateGame)(nil), "SC2APIProtocol.ResponseCreateGame")
	proto.RegisterType((*RequestJoinGame)(nil), "SC2APIProtocol.RequestJoinGame")
	proto.RegisterType((*PortSet)(nil), "SC2APIProtocol.PortSet")
	proto.RegisterType((*ResponseJoinGame)(nil), "SC2APIProtocol.ResponseJoinGame")
	proto.RegisterType((*RequestRestartGame)(nil), "SC2APIProtocol.RequestRestartGame")
	proto.RegisterType((*ResponseRestartGame)(nil), "SC2APIProtocol.ResponseRestartGame")
	proto.RegisterType((*RequestStartReplay)(nil), "SC2APIProtocol.RequestStartReplay")
	proto.RegisterType((*ResponseStartReplay)(nil), "SC2APIProtocol.ResponseStartReplay")
	proto.RegisterType((*RequestMapCommand)(nil), "SC2APIProtocol.RequestMapCommand")
	proto.RegisterType((*ResponseMapCommand)(nil), "SC2APIProtocol.ResponseMapCommand")
	proto.RegisterType((*RequestLeaveGame)(nil), "SC2APIProtocol.RequestLeaveGame")
	proto.RegisterType((*ResponseLeaveGame)(nil), "SC2APIProtocol.ResponseLeaveGame")
	proto.RegisterType((*RequestQuickSave)(nil), "SC2APIProtocol.RequestQuickSave")
	proto.RegisterType((*ResponseQuickSave)(nil), "SC2APIProtocol.ResponseQuickSave")
	proto.RegisterType((*RequestQuickLoad)(nil), "SC2APIProtocol.RequestQuickLoad")
	proto.RegisterType((*ResponseQuickLoad)(nil), "SC2APIProtocol.ResponseQuickLoad")
	proto.RegisterType((*RequestQuit)(nil), "SC2APIProtocol.RequestQuit")
	proto.RegisterType((*ResponseQuit)(nil), "SC2APIProtocol.ResponseQuit")
	proto.RegisterType((*RequestGameInfo)(nil), "SC2APIProtocol.RequestGameInfo")
	proto.RegisterType((*ResponseGameInfo)(nil), "SC2APIProtocol.ResponseGameInfo")
	proto.RegisterType((*RequestObservation)(nil), "SC2APIProtocol.RequestObservation")
	proto.RegisterType((*ResponseObservation)(nil), "SC2APIProtocol.ResponseObservation")
	proto.RegisterType((*ChatReceived)(nil), "SC2APIProtocol.ChatReceived")
	proto.RegisterType((*RequestAction)(nil), "SC2APIProtocol.RequestAction")
	proto.RegisterType((*ResponseAction)(nil), "SC2APIProtocol.ResponseAction")
	proto.RegisterType((*RequestObserverAction)(nil), "SC2APIProtocol.RequestObserverAction")
	proto.RegisterType((*ResponseObserverAction)(nil), "SC2APIProtocol.ResponseObserverAction")
	proto.RegisterType((*RequestStep)(nil), "SC2APIProtocol.RequestStep")
	proto.RegisterType((*ResponseStep)(nil), "SC2APIProtocol.ResponseStep")
	proto.RegisterType((*RequestData)(nil), "SC2APIProtocol.RequestData")
	proto.RegisterType((*ResponseData)(nil), "SC2APIProtocol.ResponseData")
	proto.RegisterType((*RequestSaveReplay)(nil), "SC2APIProtocol.RequestSaveReplay")
	proto.RegisterType((*ResponseSaveReplay)(nil), "SC2APIProtocol.ResponseSaveReplay")
	proto.RegisterType((*RequestReplayInfo)(nil), "SC2APIProtocol.RequestReplayInfo")
	proto.RegisterType((*PlayerInfoExtra)(nil), "SC2APIProtocol.PlayerInfoExtra")
	proto.RegisterType((*ResponseReplayInfo)(nil), "SC2APIProtocol.ResponseReplayInfo")
	proto.RegisterType((*RequestAvailableMaps)(nil), "SC2APIProtocol.RequestAvailableMaps")
	proto.RegisterType((*ResponseAvailableMaps)(nil), "SC2APIProtocol.ResponseAvailableMaps")
	proto.RegisterType((*RequestSaveMap)(nil), "SC2APIProtocol.RequestSaveMap")
	proto.RegisterType((*ResponseSaveMap)(nil), "SC2APIProtocol.ResponseSaveMap")
	proto.RegisterType((*RequestPing)(nil), "SC2APIProtocol.RequestPing")
	proto.RegisterType((*ResponsePing)(nil), "SC2APIProtocol.ResponsePing")
	proto.RegisterType((*RequestDebug)(nil), "SC2APIProtocol.RequestDebug")
	proto.RegisterType((*ResponseDebug)(nil), "SC2APIProtocol.ResponseDebug")
	proto.RegisterType((*PlayerSetup)(nil), "SC2APIProtocol.PlayerSetup")
	proto.RegisterType((*SpatialCameraSetup)(nil), "SC2APIProtocol.SpatialCameraSetup")
	proto.RegisterType((*InterfaceOptions)(nil), "SC2APIProtocol.InterfaceOptions")
	proto.RegisterType((*PlayerInfo)(nil), "SC2APIProtocol.PlayerInfo")
	proto.RegisterType((*PlayerCommon)(nil), "SC2APIProtocol.PlayerCommon")
	proto.RegisterType((*Observation)(nil), "SC2APIProtocol.Observation")
	proto.RegisterType((*Action)(nil), "SC2APIProtocol.Action")
	proto.RegisterType((*ActionChat)(nil), "SC2APIProtocol.ActionChat")
	proto.RegisterType((*ActionError)(nil), "SC2APIProtocol.ActionError")
	proto.RegisterType((*ObserverAction)(nil), "SC2APIProtocol.ObserverAction")
	proto.RegisterType((*ActionObserverPlayerPerspective)(nil), "SC2APIProtocol.ActionObserverPlayerPerspective")
	proto.RegisterType((*ActionObserverCameraMove)(nil), "SC2APIProtocol.ActionObserverCameraMove")
	proto.RegisterType((*ActionObserverCameraFollowPlayer)(nil), "SC2APIProtocol.ActionObserverCameraFollowPlayer")
	proto.RegisterType((*ActionObserverCameraFollowUnits)(nil), "SC2APIProtocol.ActionObserverCameraFollowUnits")
	proto.RegisterType((*PlayerResult)(nil), "SC2APIProtocol.PlayerResult")
	proto.RegisterEnum("SC2APIProtocol.Status", Status_name, Status_value)
	proto.RegisterEnum("SC2APIProtocol.Difficulty", Difficulty_name, Difficulty_value)
	proto.RegisterEnum("SC2APIProtocol.PlayerType", PlayerType_name, PlayerType_value)
	proto.RegisterEnum("SC2APIProtocol.Alert", Alert_name, Alert_value)
	proto.RegisterEnum("SC2APIProtocol.Result", Result_name, Result_value)
	proto.RegisterEnum("SC2APIProtocol.ResponseCreateGame_Error", ResponseCreateGame_Error_name, ResponseCreateGame_Error_value)
	proto.RegisterEnum("SC2APIProtocol.ResponseJoinGame_Error", ResponseJoinGame_Error_name, ResponseJoinGame_Error_value)
	proto.RegisterEnum("SC2APIProtocol.ResponseRestartGame_Error", ResponseRestartGame_Error_name, ResponseRestartGame_Error_value)
	proto.RegisterEnum("SC2APIProtocol.ResponseStartReplay_Error", ResponseStartReplay_Error_name, ResponseStartReplay_Error_value)
	proto.RegisterEnum("SC2APIProtocol.ResponseMapCommand_Error", ResponseMapCommand_Error_name, ResponseMapCommand_Error_value)
	proto.RegisterEnum("SC2APIProtocol.ResponseReplayInfo_Error", ResponseReplayInfo_Error_name, ResponseReplayInfo_Error_value)
	proto.RegisterEnum("SC2APIProtocol.ResponseSaveMap_Error", ResponseSaveMap_Error_name, ResponseSaveMap_Error_value)
	proto.RegisterEnum("SC2APIProtocol.ActionChat_Channel", ActionChat_Channel_name, ActionChat_Channel_value)
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		nn1, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Request_CreateGame) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateGame != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.CreateGame.Size()))
		n2, err := m.CreateGame.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Request_JoinGame) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinGame != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.JoinGame.Size()))
		n3, err := m.JoinGame.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Request_RestartGame) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RestartGame != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.RestartGame.Size()))
		n4, err := m.RestartGame.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Request_StartReplay) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StartReplay != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.StartReplay.Size()))
		n5, err := m.StartReplay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Request_LeaveGame) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LeaveGame != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.LeaveGame.Size()))
		n6, err := m.LeaveGame.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Request_QuickSave) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.QuickSave != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.QuickSave.Size()))
		n7, err := m.QuickSave.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Request_QuickLoad) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.QuickLoad != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.QuickLoad.Size()))
		n8, err := m.QuickLoad.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Request_Quit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Quit != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Quit.Size()))
		n9, err := m.Quit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Request_GameInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GameInfo != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.GameInfo.Size()))
		n10, err := m.GameInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Request_Observation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Observation != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Observation.Size()))
		n11, err := m.Observation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Request_Action) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Action != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Action.Size()))
		n12, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Request_Step) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Step != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Step.Size()))
		n13, err := m.Step.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Request_Data) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Data != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Data.Size()))
		n14, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Request_Query) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Query != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Query.Size()))
		n15, err := m.Query.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Request_SaveReplay) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SaveReplay != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.SaveReplay.Size()))
		n16, err := m.SaveReplay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *Request_ReplayInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReplayInfo != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.ReplayInfo.Size()))
		n17, err := m.ReplayInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Request_AvailableMaps) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AvailableMaps != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.AvailableMaps.Size()))
		n18, err := m.AvailableMaps.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *Request_SaveMap) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SaveMap != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.SaveMap.Size()))
		n19, err := m.SaveMap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *Request_Ping) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ping != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Ping.Size()))
		n20, err := m.Ping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *Request_Debug) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Debug != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Debug.Size()))
		n21, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *Request_ObsAction) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ObsAction != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.ObsAction.Size()))
		n22, err := m.ObsAction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *Request_MapCommand) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MapCommand != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.MapCommand.Size()))
		n23, err := m.MapCommand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		nn24, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn24
	}
	if len(m.Error) > 0 {
		for _, s := range m.Error {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x6
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Status != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *Response_CreateGame) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CreateGame != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.CreateGame.Size()))
		n25, err := m.CreateGame.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *Response_JoinGame) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.JoinGame != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.JoinGame.Size()))
		n26, err := m.JoinGame.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *Response_RestartGame) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RestartGame != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.RestartGame.Size()))
		n27, err := m.RestartGame.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *Response_StartReplay) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StartReplay != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.StartReplay.Size()))
		n28, err := m.StartReplay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *Response_LeaveGame) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LeaveGame != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.LeaveGame.Size()))
		n29, err := m.LeaveGame.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *Response_QuickSave) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.QuickSave != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.QuickSave.Size()))
		n30, err := m.QuickSave.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *Response_QuickLoad) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.QuickLoad != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.QuickLoad.Size()))
		n31, err := m.QuickLoad.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}
func (m *Response_Quit) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Quit != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Quit.Size()))
		n32, err := m.Quit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}
func (m *Response_GameInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GameInfo != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.GameInfo.Size()))
		n33, err := m.GameInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}
func (m *Response_Observation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Observation != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Observation.Size()))
		n34, err := m.Observation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}
func (m *Response_Action) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Action != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Action.Size()))
		n35, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}
func (m *Response_Step) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Step != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Step.Size()))
		n36, err := m.Step.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}
func (m *Response_Data) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Data != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Data.Size()))
		n37, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *Response_Query) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Query != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Query.Size()))
		n38, err := m.Query.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *Response_SaveReplay) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SaveReplay != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.SaveReplay.Size()))
		n39, err := m.SaveReplay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *Response_ReplayInfo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReplayInfo != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.ReplayInfo.Size()))
		n40, err := m.ReplayInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *Response_AvailableMaps) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AvailableMaps != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.AvailableMaps.Size()))
		n41, err := m.AvailableMaps.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *Response_SaveMap) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SaveMap != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.SaveMap.Size()))
		n42, err := m.SaveMap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *Response_Ping) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ping != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Ping.Size()))
		n43, err := m.Ping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *Response_Debug) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Debug != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Debug.Size()))
		n44, err := m.Debug.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *Response_ObsAction) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ObsAction != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.ObsAction.Size()))
		n45, err := m.ObsAction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *Response_MapCommand) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MapCommand != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.MapCommand.Size()))
		n46, err := m.MapCommand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *RequestCreateGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCreateGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Map != nil {
		nn47, err := m.Map.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn47
	}
	if len(m.PlayerSetup) > 0 {
		for _, msg := range m.PlayerSetup {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DisableFog {
		dAtA[i] = 0x20
		i++
		if m.DisableFog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RandomSeed != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.RandomSeed))
	}
	if m.Realtime {
		dAtA[i] = 0x30
		i++
		if m.Realtime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RequestCreateGame_LocalMap) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.LocalMap != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.LocalMap.Size()))
		n48, err := m.LocalMap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	return i, nil
}
func (m *RequestCreateGame_BattlenetMapName) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x12
	i++
	i = encodeVarintSc2Api(dAtA, i, uint64(len(m.BattlenetMapName)))
	i += copy(dAtA[i:], m.BattlenetMapName)
	return i, nil
}
func (m *LocalMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MapPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.MapPath)))
		i += copy(dAtA[i:], m.MapPath)
	}
	if len(m.MapData) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.MapData)))
		i += copy(dAtA[i:], m.MapData)
	}
	return i, nil
}

func (m *ResponseCreateGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseCreateGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Error))
	}
	if len(m.ErrorDetails) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.ErrorDetails)))
		i += copy(dAtA[i:], m.ErrorDetails)
	}
	return i, nil
}

func (m *RequestJoinGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestJoinGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Participation != nil {
		nn49, err := m.Participation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn49
	}
	if m.Options != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Options.Size()))
		n50, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	if m.ServerPorts != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.ServerPorts.Size()))
		n51, err := m.ServerPorts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if len(m.ClientPorts) > 0 {
		for _, msg := range m.ClientPorts {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SharedPort != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.SharedPort))
	}
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	return i, nil
}

func (m *RequestJoinGame_Race) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintSc2Api(dAtA, i, uint64(m.Race))
	return i, nil
}
func (m *RequestJoinGame_ObservedPlayerId) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintSc2Api(dAtA, i, uint64(m.ObservedPlayerId))
	return i, nil
}
func (m *PortSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GamePort != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.GamePort))
	}
	if m.BasePort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.BasePort))
	}
	return i, nil
}

func (m *ResponseJoinGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseJoinGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerId))
	}
	if m.Error != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Error))
	}
	if len(m.ErrorDetails) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.ErrorDetails)))
		i += copy(dAtA[i:], m.ErrorDetails)
	}
	return i, nil
}

func (m *RequestRestartGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRestartGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseRestartGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseRestartGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Error))
	}
	if len(m.ErrorDetails) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.ErrorDetails)))
		i += copy(dAtA[i:], m.ErrorDetails)
	}
	return i, nil
}

func (m *RequestStartReplay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStartReplay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Replay != nil {
		nn52, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn52
	}
	if m.ObservedPlayerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.ObservedPlayerId))
	}
	if m.Options != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Options.Size()))
		n53, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	if m.DisableFog {
		dAtA[i] = 0x20
		i++
		if m.DisableFog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.MapData) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.MapData)))
		i += copy(dAtA[i:], m.MapData)
	}
	if m.Realtime {
		dAtA[i] = 0x38
		i++
		if m.Realtime {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RequestStartReplay_ReplayPath) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintSc2Api(dAtA, i, uint64(len(m.ReplayPath)))
	i += copy(dAtA[i:], m.ReplayPath)
	return i, nil
}
func (m *RequestStartReplay_ReplayData) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReplayData != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.ReplayData)))
		i += copy(dAtA[i:], m.ReplayData)
	}
	return i, nil
}
func (m *ResponseStartReplay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseStartReplay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Error))
	}
	if len(m.ErrorDetails) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.ErrorDetails)))
		i += copy(dAtA[i:], m.ErrorDetails)
	}
	return i, nil
}

func (m *RequestMapCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMapCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TriggerCmd) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.TriggerCmd)))
		i += copy(dAtA[i:], m.TriggerCmd)
	}
	return i, nil
}

func (m *ResponseMapCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseMapCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Error))
	}
	if len(m.ErrorDetails) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.ErrorDetails)))
		i += copy(dAtA[i:], m.ErrorDetails)
	}
	return i, nil
}

func (m *RequestLeaveGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLeaveGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseLeaveGame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLeaveGame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestQuickSave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestQuickSave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseQuickSave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseQuickSave) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestQuickLoad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestQuickLoad) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseQuickLoad) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseQuickLoad) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestQuit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestQuit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseQuit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseQuit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestGameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGameInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseGameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGameInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MapName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.MapName)))
		i += copy(dAtA[i:], m.MapName)
	}
	if len(m.LocalMapPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.LocalMapPath)))
		i += copy(dAtA[i:], m.LocalMapPath)
	}
	if len(m.PlayerInfo) > 0 {
		for _, msg := range m.PlayerInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.StartRaw != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.StartRaw.Size()))
		n54, err := m.StartRaw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	if m.Options != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Options.Size()))
		n55, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if len(m.ModNames) > 0 {
		for _, s := range m.ModNames {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RequestObservation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestObservation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DisableFog {
		dAtA[i] = 0x8
		i++
		if m.DisableFog {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ResponseObservation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseObservation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, msg := range m.Actions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ActionErrors) > 0 {
		for _, msg := range m.ActionErrors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Observation != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Observation.Size()))
		n56, err := m.Observation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	if len(m.PlayerResult) > 0 {
		for _, msg := range m.PlayerResult {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Chat) > 0 {
		for _, msg := range m.Chat {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChatReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatReceived) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerId))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *RequestAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, msg := range m.Actions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResponseAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA58 := make([]byte, len(m.Result)*10)
		var j57 int
		for _, num := range m.Result {
			for num >= 1<<7 {
				dAtA58[j57] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j57++
			}
			dAtA58[j57] = uint8(num)
			j57++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(j57))
		i += copy(dAtA[i:], dAtA58[:j57])
	}
	return i, nil
}

func (m *RequestObserverAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestObserverAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, msg := range m.Actions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResponseObserverAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseObserverAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestStep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStep) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *ResponseStep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseStep) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RequestData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AbilityId {
		dAtA[i] = 0x8
		i++
		if m.AbilityId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UnitTypeId {
		dAtA[i] = 0x10
		i++
		if m.UnitTypeId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpgradeId {
		dAtA[i] = 0x18
		i++
		if m.UpgradeId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BuffId {
		dAtA[i] = 0x20
		i++
		if m.BuffId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EffectId {
		dAtA[i] = 0x28
		i++
		if m.EffectId {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ResponseData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Abilities) > 0 {
		for _, msg := range m.Abilities {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Units) > 0 {
		for _, msg := range m.Units {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Upgrades) > 0 {
		for _, msg := range m.Upgrades {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Buffs) > 0 {
		for _, msg := range m.Buffs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Effects) > 0 {
		for _, msg := range m.Effects {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestSaveReplay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSaveReplay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseSaveReplay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSaveReplay) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *RequestReplayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestReplayInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Replay != nil {
		nn59, err := m.Replay.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn59
	}
	if m.DownloadData {
		dAtA[i] = 0x18
		i++
		if m.DownloadData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RequestReplayInfo_ReplayPath) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0xa
	i++
	i = encodeVarintSc2Api(dAtA, i, uint64(len(m.ReplayPath)))
	i += copy(dAtA[i:], m.ReplayPath)
	return i, nil
}
func (m *RequestReplayInfo_ReplayData) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ReplayData != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.ReplayData)))
		i += copy(dAtA[i:], m.ReplayData)
	}
	return i, nil
}
func (m *PlayerInfoExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerInfoExtra) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerInfo.Size()))
		n60, err := m.PlayerInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n60
	}
	if m.PlayerResult != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerResult.Size()))
		n61, err := m.PlayerResult.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n61
	}
	if m.PlayerMmr != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerMmr))
	}
	if m.PlayerApm != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerApm))
	}
	return i, nil
}

func (m *ResponseReplayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseReplayInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MapName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.MapName)))
		i += copy(dAtA[i:], m.MapName)
	}
	if len(m.LocalMapPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.LocalMapPath)))
		i += copy(dAtA[i:], m.LocalMapPath)
	}
	if len(m.PlayerInfo) > 0 {
		for _, msg := range m.PlayerInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GameDurationLoops != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.GameDurationLoops))
	}
	if m.GameDurationSeconds != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GameDurationSeconds))))
		i += 4
	}
	if len(m.GameVersion) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.GameVersion)))
		i += copy(dAtA[i:], m.GameVersion)
	}
	if m.DataBuild != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.DataBuild))
	}
	if m.BaseBuild != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.BaseBuild))
	}
	if m.Error != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Error))
	}
	if len(m.ErrorDetails) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.ErrorDetails)))
		i += copy(dAtA[i:], m.ErrorDetails)
	}
	if len(m.DataVersion) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.DataVersion)))
		i += copy(dAtA[i:], m.DataVersion)
	}
	return i, nil
}

func (m *RequestAvailableMaps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAvailableMaps) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponseAvailableMaps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseAvailableMaps) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocalMapPaths) > 0 {
		for _, s := range m.LocalMapPaths {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.BattlenetMapNames) > 0 {
		for _, s := range m.BattlenetMapNames {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RequestSaveMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSaveMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MapPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.MapPath)))
		i += copy(dAtA[i:], m.MapPath)
	}
	if len(m.MapData) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.MapData)))
		i += copy(dAtA[i:], m.MapData)
	}
	return i, nil
}

func (m *ResponseSaveMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSaveMap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Error))
	}
	return i, nil
}

func (m *RequestPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResponsePing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponsePing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameVersion) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.GameVersion)))
		i += copy(dAtA[i:], m.GameVersion)
	}
	if len(m.DataVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.DataVersion)))
		i += copy(dAtA[i:], m.DataVersion)
	}
	if m.DataBuild != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.DataBuild))
	}
	if m.BaseBuild != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.BaseBuild))
	}
	return i, nil
}

func (m *RequestDebug) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDebug) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Debug) > 0 {
		for _, msg := range m.Debug {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResponseDebug) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDebug) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PlayerSetup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerSetup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Type))
	}
	if m.Race != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Race))
	}
	if m.Difficulty != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Difficulty))
	}
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	return i, nil
}

func (m *SpatialCameraSetup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpatialCameraSetup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Width != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Width))))
		i += 4
	}
	if m.Resolution != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Resolution.Size()))
		n62, err := m.Resolution.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n62
	}
	if m.MinimapResolution != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.MinimapResolution.Size()))
		n63, err := m.MinimapResolution.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n63
	}
	return i, nil
}

func (m *InterfaceOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Raw {
		dAtA[i] = 0x8
		i++
		if m.Raw {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Score {
		dAtA[i] = 0x10
		i++
		if m.Score {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FeatureLayer != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.FeatureLayer.Size()))
		n64, err := m.FeatureLayer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n64
	}
	if m.Render != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Render.Size()))
		n65, err := m.Render.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n65
	}
	return i, nil
}

func (m *PlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Type))
	}
	if m.RaceRequested != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.RaceRequested))
	}
	if m.RaceActual != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.RaceActual))
	}
	if m.Difficulty != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Difficulty))
	}
	if len(m.PlayerName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.PlayerName)))
		i += copy(dAtA[i:], m.PlayerName)
	}
	return i, nil
}

func (m *PlayerCommon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerCommon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerId))
	}
	if m.Minerals != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Minerals))
	}
	if m.Vespene != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Vespene))
	}
	if m.FoodCap != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.FoodCap))
	}
	if m.FoodUsed != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.FoodUsed))
	}
	if m.FoodArmy != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.FoodArmy))
	}
	if m.FoodWorkers != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.FoodWorkers))
	}
	if m.IdleWorkerCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.IdleWorkerCount))
	}
	if m.ArmyCount != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.ArmyCount))
	}
	if m.WarpGateCount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.WarpGateCount))
	}
	if m.LarvaCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.LarvaCount))
	}
	return i, nil
}

func (m *Observation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Observation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerCommon != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerCommon.Size()))
		n66, err := m.PlayerCommon.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n66
	}
	if len(m.Abilities) > 0 {
		for _, msg := range m.Abilities {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSc2Api(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Score != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Score.Size()))
		n67, err := m.Score.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n67
	}
	if m.RawData != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.RawData.Size()))
		n68, err := m.RawData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n68
	}
	if m.FeatureLayerData != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.FeatureLayerData.Size()))
		n69, err := m.FeatureLayerData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n69
	}
	if m.RenderData != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.RenderData.Size()))
		n70, err := m.RenderData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n70
	}
	if m.UiData != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.UiData.Size()))
		n71, err := m.UiData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n71
	}
	if m.GameLoop != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.GameLoop))
	}
	if len(m.Alerts) > 0 {
		dAtA73 := make([]byte, len(m.Alerts)*10)
		var j72 int
		for _, num := range m.Alerts {
			for num >= 1<<7 {
				dAtA73[j72] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j72++
			}
			dAtA73[j72] = uint8(num)
			j72++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(j72))
		i += copy(dAtA[i:], dAtA73[:j72])
	}
	return i, nil
}

func (m *Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Action) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActionRaw != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.ActionRaw.Size()))
		n74, err := m.ActionRaw.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n74
	}
	if m.ActionFeatureLayer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.ActionFeatureLayer.Size()))
		n75, err := m.ActionFeatureLayer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n75
	}
	if m.ActionRender != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.ActionRender.Size()))
		n76, err := m.ActionRender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n76
	}
	if m.ActionUi != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.ActionUi.Size()))
		n77, err := m.ActionUi.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n77
	}
	if m.ActionChat != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.ActionChat.Size()))
		n78, err := m.ActionChat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n78
	}
	return i, nil
}

func (m *ActionChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Channel))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *ActionError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnitTag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.UnitTag))
	}
	if m.AbilityId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.AbilityId))
	}
	if m.Result != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *ObserverAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObserverAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		nn79, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn79
	}
	return i, nil
}

func (m *ObserverAction_PlayerPerspective) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PlayerPerspective != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerPerspective.Size()))
		n80, err := m.PlayerPerspective.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n80
	}
	return i, nil
}
func (m *ObserverAction_CameraMove) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CameraMove != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.CameraMove.Size()))
		n81, err := m.CameraMove.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n81
	}
	return i, nil
}
func (m *ObserverAction_CameraFollowPlayer) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CameraFollowPlayer != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.CameraFollowPlayer.Size()))
		n82, err := m.CameraFollowPlayer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n82
	}
	return i, nil
}
func (m *ObserverAction_CameraFollowUnits) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CameraFollowUnits != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.CameraFollowUnits.Size()))
		n83, err := m.CameraFollowUnits.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n83
	}
	return i, nil
}
func (m *ActionObserverPlayerPerspective) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionObserverPlayerPerspective) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerId))
	}
	return i, nil
}

func (m *ActionObserverCameraMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionObserverCameraMove) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorldPos != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.WorldPos.Size()))
		n84, err := m.WorldPos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n84
	}
	if m.Distance != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Distance))))
		i += 4
	}
	return i, nil
}

func (m *ActionObserverCameraFollowPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionObserverCameraFollowPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerId))
	}
	return i, nil
}

func (m *ActionObserverCameraFollowUnits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionObserverCameraFollowUnits) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UnitTags) > 0 {
		dAtA86 := make([]byte, len(m.UnitTags)*10)
		var j85 int
		for _, num := range m.UnitTags {
			for num >= 1<<7 {
				dAtA86[j85] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j85++
			}
			dAtA86[j85] = uint8(num)
			j85++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(j85))
		i += copy(dAtA[i:], dAtA86[:j85])
	}
	return i, nil
}

func (m *PlayerResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PlayerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.PlayerId))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSc2Api(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func encodeVarintSc2Api(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *Request_CreateGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateGame != nil {
		l = m.CreateGame.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_JoinGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinGame != nil {
		l = m.JoinGame.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_RestartGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RestartGame != nil {
		l = m.RestartGame.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_StartReplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartReplay != nil {
		l = m.StartReplay.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_LeaveGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaveGame != nil {
		l = m.LeaveGame.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_QuickSave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QuickSave != nil {
		l = m.QuickSave.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_QuickLoad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QuickLoad != nil {
		l = m.QuickLoad.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_Quit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Quit != nil {
		l = m.Quit.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_GameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameInfo != nil {
		l = m.GameInfo.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_Observation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Observation != nil {
		l = m.Observation.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_Step) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Step != nil {
		l = m.Step.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_SaveReplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SaveReplay != nil {
		l = m.SaveReplay.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_ReplayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplayInfo != nil {
		l = m.ReplayInfo.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_AvailableMaps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AvailableMaps != nil {
		l = m.AvailableMaps.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_SaveMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SaveMap != nil {
		l = m.SaveMap.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_Debug) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_ObsAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObsAction != nil {
		l = m.ObsAction.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Request_MapCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapCommand != nil {
		l = m.MapCommand.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	if len(m.Error) > 0 {
		for _, s := range m.Error {
			l = len(s)
			n += 2 + l + sovSc2Api(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 2 + sovSc2Api(uint64(m.Status))
	}
	return n
}

func (m *Response_CreateGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateGame != nil {
		l = m.CreateGame.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_JoinGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinGame != nil {
		l = m.JoinGame.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_RestartGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RestartGame != nil {
		l = m.RestartGame.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_StartReplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartReplay != nil {
		l = m.StartReplay.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_LeaveGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaveGame != nil {
		l = m.LeaveGame.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_QuickSave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QuickSave != nil {
		l = m.QuickSave.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_QuickLoad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QuickLoad != nil {
		l = m.QuickLoad.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_Quit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Quit != nil {
		l = m.Quit.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_GameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameInfo != nil {
		l = m.GameInfo.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_Observation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Observation != nil {
		l = m.Observation.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_Step) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Step != nil {
		l = m.Step.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_SaveReplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SaveReplay != nil {
		l = m.SaveReplay.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_ReplayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplayInfo != nil {
		l = m.ReplayInfo.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_AvailableMaps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AvailableMaps != nil {
		l = m.AvailableMaps.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_SaveMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SaveMap != nil {
		l = m.SaveMap.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_Debug) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_ObsAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObsAction != nil {
		l = m.ObsAction.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *Response_MapCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapCommand != nil {
		l = m.MapCommand.Size()
		n += 2 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *RequestCreateGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Map != nil {
		n += m.Map.Size()
	}
	if len(m.PlayerSetup) > 0 {
		for _, e := range m.PlayerSetup {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if m.DisableFog {
		n += 2
	}
	if m.RandomSeed != 0 {
		n += 1 + sovSc2Api(uint64(m.RandomSeed))
	}
	if m.Realtime {
		n += 2
	}
	return n
}

func (m *RequestCreateGame_LocalMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocalMap != nil {
		l = m.LocalMap.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *RequestCreateGame_BattlenetMapName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BattlenetMapName)
	n += 1 + l + sovSc2Api(uint64(l))
	return n
}
func (m *LocalMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MapPath)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	l = len(m.MapData)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *ResponseCreateGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovSc2Api(uint64(m.Error))
	}
	l = len(m.ErrorDetails)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *RequestJoinGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Participation != nil {
		n += m.Participation.Size()
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.ServerPorts != nil {
		l = m.ServerPorts.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if len(m.ClientPorts) > 0 {
		for _, e := range m.ClientPorts {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if m.SharedPort != 0 {
		n += 1 + sovSc2Api(uint64(m.SharedPort))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *RequestJoinGame_Race) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSc2Api(uint64(m.Race))
	return n
}
func (m *RequestJoinGame_ObservedPlayerId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSc2Api(uint64(m.ObservedPlayerId))
	return n
}
func (m *PortSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GamePort != 0 {
		n += 1 + sovSc2Api(uint64(m.GamePort))
	}
	if m.BasePort != 0 {
		n += 1 + sovSc2Api(uint64(m.BasePort))
	}
	return n
}

func (m *ResponseJoinGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovSc2Api(uint64(m.PlayerId))
	}
	if m.Error != 0 {
		n += 1 + sovSc2Api(uint64(m.Error))
	}
	l = len(m.ErrorDetails)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *RequestRestartGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseRestartGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovSc2Api(uint64(m.Error))
	}
	l = len(m.ErrorDetails)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *RequestStartReplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Replay != nil {
		n += m.Replay.Size()
	}
	if m.ObservedPlayerId != 0 {
		n += 1 + sovSc2Api(uint64(m.ObservedPlayerId))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.DisableFog {
		n += 2
	}
	l = len(m.MapData)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.Realtime {
		n += 2
	}
	return n
}

func (m *RequestStartReplay_ReplayPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReplayPath)
	n += 1 + l + sovSc2Api(uint64(l))
	return n
}
func (m *RequestStartReplay_ReplayData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplayData != nil {
		l = len(m.ReplayData)
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *ResponseStartReplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovSc2Api(uint64(m.Error))
	}
	l = len(m.ErrorDetails)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *RequestMapCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TriggerCmd)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *ResponseMapCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovSc2Api(uint64(m.Error))
	}
	l = len(m.ErrorDetails)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *RequestLeaveGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseLeaveGame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestQuickSave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseQuickSave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestQuickLoad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseQuickLoad) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestQuit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseQuit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestGameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseGameInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MapName)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	l = len(m.LocalMapPath)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if len(m.PlayerInfo) > 0 {
		for _, e := range m.PlayerInfo {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if m.StartRaw != nil {
		l = m.StartRaw.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if len(m.ModNames) > 0 {
		for _, s := range m.ModNames {
			l = len(s)
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	return n
}

func (m *RequestObservation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisableFog {
		n += 2
	}
	return n
}

func (m *ResponseObservation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if len(m.ActionErrors) > 0 {
		for _, e := range m.ActionErrors {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if m.Observation != nil {
		l = m.Observation.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if len(m.PlayerResult) > 0 {
		for _, e := range m.PlayerResult {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if len(m.Chat) > 0 {
		for _, e := range m.Chat {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	return n
}

func (m *ChatReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovSc2Api(uint64(m.PlayerId))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *RequestAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	return n
}

func (m *ResponseAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		l = 0
		for _, e := range m.Result {
			l += sovSc2Api(uint64(e))
		}
		n += 1 + sovSc2Api(uint64(l)) + l
	}
	return n
}

func (m *RequestObserverAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	return n
}

func (m *ResponseObserverAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestStep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovSc2Api(uint64(m.Count))
	}
	return n
}

func (m *ResponseStep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbilityId {
		n += 2
	}
	if m.UnitTypeId {
		n += 2
	}
	if m.UpgradeId {
		n += 2
	}
	if m.BuffId {
		n += 2
	}
	if m.EffectId {
		n += 2
	}
	return n
}

func (m *ResponseData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Abilities) > 0 {
		for _, e := range m.Abilities {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if len(m.Upgrades) > 0 {
		for _, e := range m.Upgrades {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if len(m.Buffs) > 0 {
		for _, e := range m.Buffs {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if len(m.Effects) > 0 {
		for _, e := range m.Effects {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	return n
}

func (m *RequestSaveReplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseSaveReplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *RequestReplayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Replay != nil {
		n += m.Replay.Size()
	}
	if m.DownloadData {
		n += 2
	}
	return n
}

func (m *RequestReplayInfo_ReplayPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReplayPath)
	n += 1 + l + sovSc2Api(uint64(l))
	return n
}
func (m *RequestReplayInfo_ReplayData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplayData != nil {
		l = len(m.ReplayData)
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *PlayerInfoExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerInfo != nil {
		l = m.PlayerInfo.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.PlayerResult != nil {
		l = m.PlayerResult.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.PlayerMmr != 0 {
		n += 1 + sovSc2Api(uint64(m.PlayerMmr))
	}
	if m.PlayerApm != 0 {
		n += 1 + sovSc2Api(uint64(m.PlayerApm))
	}
	return n
}

func (m *ResponseReplayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MapName)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	l = len(m.LocalMapPath)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if len(m.PlayerInfo) > 0 {
		for _, e := range m.PlayerInfo {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if m.GameDurationLoops != 0 {
		n += 1 + sovSc2Api(uint64(m.GameDurationLoops))
	}
	if m.GameDurationSeconds != 0 {
		n += 5
	}
	l = len(m.GameVersion)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.DataBuild != 0 {
		n += 1 + sovSc2Api(uint64(m.DataBuild))
	}
	if m.BaseBuild != 0 {
		n += 1 + sovSc2Api(uint64(m.BaseBuild))
	}
	if m.Error != 0 {
		n += 1 + sovSc2Api(uint64(m.Error))
	}
	l = len(m.ErrorDetails)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	l = len(m.DataVersion)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *RequestAvailableMaps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseAvailableMaps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LocalMapPaths) > 0 {
		for _, s := range m.LocalMapPaths {
			l = len(s)
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if len(m.BattlenetMapNames) > 0 {
		for _, s := range m.BattlenetMapNames {
			l = len(s)
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	return n
}

func (m *RequestSaveMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MapPath)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	l = len(m.MapData)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *ResponseSaveMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != 0 {
		n += 1 + sovSc2Api(uint64(m.Error))
	}
	return n
}

func (m *RequestPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponsePing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GameVersion)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	l = len(m.DataVersion)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.DataBuild != 0 {
		n += 1 + sovSc2Api(uint64(m.DataBuild))
	}
	if m.BaseBuild != 0 {
		n += 1 + sovSc2Api(uint64(m.BaseBuild))
	}
	return n
}

func (m *RequestDebug) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Debug) > 0 {
		for _, e := range m.Debug {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	return n
}

func (m *ResponseDebug) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PlayerSetup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSc2Api(uint64(m.Type))
	}
	if m.Race != 0 {
		n += 1 + sovSc2Api(uint64(m.Race))
	}
	if m.Difficulty != 0 {
		n += 1 + sovSc2Api(uint64(m.Difficulty))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *SpatialCameraSetup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != 0 {
		n += 5
	}
	if m.Resolution != nil {
		l = m.Resolution.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.MinimapResolution != nil {
		l = m.MinimapResolution.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *InterfaceOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Raw {
		n += 2
	}
	if m.Score {
		n += 2
	}
	if m.FeatureLayer != nil {
		l = m.FeatureLayer.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.Render != nil {
		l = m.Render.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *PlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovSc2Api(uint64(m.PlayerId))
	}
	if m.Type != 0 {
		n += 1 + sovSc2Api(uint64(m.Type))
	}
	if m.RaceRequested != 0 {
		n += 1 + sovSc2Api(uint64(m.RaceRequested))
	}
	if m.RaceActual != 0 {
		n += 1 + sovSc2Api(uint64(m.RaceActual))
	}
	if m.Difficulty != 0 {
		n += 1 + sovSc2Api(uint64(m.Difficulty))
	}
	l = len(m.PlayerName)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *PlayerCommon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovSc2Api(uint64(m.PlayerId))
	}
	if m.Minerals != 0 {
		n += 1 + sovSc2Api(uint64(m.Minerals))
	}
	if m.Vespene != 0 {
		n += 1 + sovSc2Api(uint64(m.Vespene))
	}
	if m.FoodCap != 0 {
		n += 1 + sovSc2Api(uint64(m.FoodCap))
	}
	if m.FoodUsed != 0 {
		n += 1 + sovSc2Api(uint64(m.FoodUsed))
	}
	if m.FoodArmy != 0 {
		n += 1 + sovSc2Api(uint64(m.FoodArmy))
	}
	if m.FoodWorkers != 0 {
		n += 1 + sovSc2Api(uint64(m.FoodWorkers))
	}
	if m.IdleWorkerCount != 0 {
		n += 1 + sovSc2Api(uint64(m.IdleWorkerCount))
	}
	if m.ArmyCount != 0 {
		n += 1 + sovSc2Api(uint64(m.ArmyCount))
	}
	if m.WarpGateCount != 0 {
		n += 1 + sovSc2Api(uint64(m.WarpGateCount))
	}
	if m.LarvaCount != 0 {
		n += 1 + sovSc2Api(uint64(m.LarvaCount))
	}
	return n
}

func (m *Observation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerCommon != nil {
		l = m.PlayerCommon.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if len(m.Abilities) > 0 {
		for _, e := range m.Abilities {
			l = e.Size()
			n += 1 + l + sovSc2Api(uint64(l))
		}
	}
	if m.Score != nil {
		l = m.Score.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.RawData != nil {
		l = m.RawData.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.FeatureLayerData != nil {
		l = m.FeatureLayerData.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.RenderData != nil {
		l = m.RenderData.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.UiData != nil {
		l = m.UiData.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.GameLoop != 0 {
		n += 1 + sovSc2Api(uint64(m.GameLoop))
	}
	if len(m.Alerts) > 0 {
		l = 0
		for _, e := range m.Alerts {
			l += sovSc2Api(uint64(e))
		}
		n += 1 + sovSc2Api(uint64(l)) + l
	}
	return n
}

func (m *Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionRaw != nil {
		l = m.ActionRaw.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.ActionFeatureLayer != nil {
		l = m.ActionFeatureLayer.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.ActionRender != nil {
		l = m.ActionRender.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.ActionUi != nil {
		l = m.ActionUi.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.ActionChat != nil {
		l = m.ActionChat.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *ActionChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != 0 {
		n += 1 + sovSc2Api(uint64(m.Channel))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}

func (m *ActionError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnitTag != 0 {
		n += 1 + sovSc2Api(uint64(m.UnitTag))
	}
	if m.AbilityId != 0 {
		n += 1 + sovSc2Api(uint64(m.AbilityId))
	}
	if m.Result != 0 {
		n += 1 + sovSc2Api(uint64(m.Result))
	}
	return n
}

func (m *ObserverAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		n += m.Action.Size()
	}
	return n
}

func (m *ObserverAction_PlayerPerspective) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerPerspective != nil {
		l = m.PlayerPerspective.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *ObserverAction_CameraMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CameraMove != nil {
		l = m.CameraMove.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *ObserverAction_CameraFollowPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CameraFollowPlayer != nil {
		l = m.CameraFollowPlayer.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *ObserverAction_CameraFollowUnits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CameraFollowUnits != nil {
		l = m.CameraFollowUnits.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	return n
}
func (m *ActionObserverPlayerPerspective) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovSc2Api(uint64(m.PlayerId))
	}
	return n
}

func (m *ActionObserverCameraMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorldPos != nil {
		l = m.WorldPos.Size()
		n += 1 + l + sovSc2Api(uint64(l))
	}
	if m.Distance != 0 {
		n += 5
	}
	return n
}

func (m *ActionObserverCameraFollowPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovSc2Api(uint64(m.PlayerId))
	}
	return n
}

func (m *ActionObserverCameraFollowUnits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnitTags) > 0 {
		l = 0
		for _, e := range m.UnitTags {
			l += sovSc2Api(uint64(e))
		}
		n += 1 + sovSc2Api(uint64(l)) + l
	}
	return n
}

func (m *PlayerResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerId != 0 {
		n += 1 + sovSc2Api(uint64(m.PlayerId))
	}
	if m.Result != 0 {
		n += 1 + sovSc2Api(uint64(m.Result))
	}
	return n
}

func sovSc2Api(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSc2Api(x uint64) (n int) {
	return sovSc2Api(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestCreateGame{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_CreateGame{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestJoinGame{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_JoinGame{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestRestartGame{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_RestartGame{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartReplay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestStartReplay{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_StartReplay{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestLeaveGame{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_LeaveGame{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuickSave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestQuickSave{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_QuickSave{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuickLoad", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestQuickLoad{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_QuickLoad{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestQuit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Quit{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestGameInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_GameInfo{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Observation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestObservation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Observation{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestAction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Action{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestStep{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Step{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Data{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Query{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveReplay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestSaveReplay{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_SaveReplay{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestReplayInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_ReplayInfo{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableMaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestAvailableMaps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_AvailableMaps{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestSaveMap{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_SaveMap{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestPing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Ping{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestDebug{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Debug{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObsAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestObserverAction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_ObsAction{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestMapCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_MapCommand{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseCreateGame{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_CreateGame{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseJoinGame{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_JoinGame{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseRestartGame{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_RestartGame{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartReplay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseStartReplay{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_StartReplay{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveGame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseLeaveGame{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_LeaveGame{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuickSave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseQuickSave{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_QuickSave{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuickLoad", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseQuickLoad{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_QuickLoad{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseQuit{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Quit{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseGameInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_GameInfo{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Observation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseObservation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Observation{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseAction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Action{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseStep{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Step{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Data{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Query{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveReplay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseSaveReplay{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_SaveReplay{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseReplayInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_ReplayInfo{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableMaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseAvailableMaps{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_AvailableMaps{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseSaveMap{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_SaveMap{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponsePing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Ping{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseDebug{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Debug{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObsAction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseObserverAction{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_ObsAction{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseMapCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_MapCommand{v}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = append(m.Error, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCreateGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCreateGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCreateGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LocalMap{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Map = &RequestCreateGame_LocalMap{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattlenetMapName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = &RequestCreateGame_BattlenetMapName{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerSetup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerSetup = append(m.PlayerSetup, &PlayerSetup{})
			if err := m.PlayerSetup[len(m.PlayerSetup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableFog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableFog = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomSeed", wireType)
			}
			m.RandomSeed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomSeed |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realtime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Realtime = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapData = append(m.MapData[:0], dAtA[iNdEx:postIndex]...)
			if m.MapData == nil {
				m.MapData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseCreateGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseCreateGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseCreateGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ResponseCreateGame_Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestJoinGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestJoinGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestJoinGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Race", wireType)
			}
			var v Race
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Race(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Participation = &RequestJoinGame_Race{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedPlayerId", wireType)
			}
			var v PlayerID
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (PlayerID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Participation = &RequestJoinGame_ObservedPlayerId{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &InterfaceOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerPorts == nil {
				m.ServerPorts = &PortSet{}
			}
			if err := m.ServerPorts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPorts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientPorts = append(m.ClientPorts, &PortSet{})
			if err := m.ClientPorts[len(m.ClientPorts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedPort", wireType)
			}
			m.SharedPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SharedPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GamePort", wireType)
			}
			m.GamePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GamePort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePort", wireType)
			}
			m.BasePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BasePort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseJoinGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseJoinGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseJoinGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (PlayerID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ResponseJoinGame_Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRestartGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRestartGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRestartGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseRestartGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseRestartGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseRestartGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ResponseRestartGame_Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStartReplay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStartReplay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStartReplay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replay = &RequestStartReplay_ReplayPath{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedPlayerId", wireType)
			}
			m.ObservedPlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedPlayerId |= (PlayerID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &InterfaceOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableFog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableFog = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Replay = &RequestStartReplay_ReplayData{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapData = append(m.MapData[:0], dAtA[iNdEx:postIndex]...)
			if m.MapData == nil {
				m.MapData = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Realtime", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Realtime = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseStartReplay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseStartReplay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseStartReplay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ResponseStartReplay_Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMapCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMapCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMapCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerCmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggerCmd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseMapCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseMapCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseMapCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ResponseMapCommand_Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLeaveGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLeaveGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLeaveGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLeaveGame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLeaveGame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLeaveGame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestQuickSave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestQuickSave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestQuickSave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseQuickSave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseQuickSave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseQuickSave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestQuickLoad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestQuickLoad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestQuickLoad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseQuickLoad) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseQuickLoad: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseQuickLoad: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestQuit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestQuit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestQuit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseQuit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseQuit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseQuit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalMapPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalMapPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerInfo = append(m.PlayerInfo, &PlayerInfo{})
			if err := m.PlayerInfo[len(m.PlayerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRaw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartRaw == nil {
				m.StartRaw = &StartRaw{}
			}
			if err := m.StartRaw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &InterfaceOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModNames = append(m.ModNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestObservation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestObservation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestObservation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableFog", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableFog = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseObservation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseObservation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseObservation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &Action{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActionErrors = append(m.ActionErrors, &ActionError{})
			if err := m.ActionErrors[len(m.ActionErrors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Observation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Observation == nil {
				m.Observation = &Observation{}
			}
			if err := m.Observation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerResult = append(m.PlayerResult, &PlayerResult{})
			if err := m.PlayerResult[len(m.PlayerResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chat = append(m.Chat, &ChatReceived{})
			if err := m.Chat[len(m.Chat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (PlayerID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &Action{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ActionResult
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSc2Api
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ActionResult(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Result = append(m.Result, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSc2Api
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSc2Api
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Result) == 0 {
					m.Result = make([]ActionResult, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ActionResult
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSc2Api
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ActionResult(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Result = append(m.Result, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestObserverAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestObserverAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestObserverAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &ObserverAction{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseObserverAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseObserverAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseObserverAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseStep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseStep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseStep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AbilityId = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTypeId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnitTypeId = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpgradeId = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BuffId = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectId", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectId = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abilities = append(m.Abilities, &AbilityData{})
			if err := m.Abilities[len(m.Abilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, &UnitTypeData{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upgrades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Upgrades = append(m.Upgrades, &UpgradeData{})
			if err := m.Upgrades[len(m.Upgrades)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buffs = append(m.Buffs, &BuffData{})
			if err := m.Buffs[len(m.Buffs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Effects = append(m.Effects, &EffectData{})
			if err := m.Effects[len(m.Effects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSaveReplay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSaveReplay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSaveReplay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSaveReplay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSaveReplay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSaveReplay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestReplayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestReplayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestReplayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replay = &RequestReplayInfo_ReplayPath{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Replay = &RequestReplayInfo_ReplayData{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DownloadData = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerInfoExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerInfoExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerInfoExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerInfo == nil {
				m.PlayerInfo = &PlayerInfo{}
			}
			if err := m.PlayerInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerResult == nil {
				m.PlayerResult = &PlayerResult{}
			}
			if err := m.PlayerResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerMmr", wireType)
			}
			m.PlayerMmr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerMmr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerApm", wireType)
			}
			m.PlayerApm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerApm |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseReplayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseReplayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseReplayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalMapPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalMapPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerInfo = append(m.PlayerInfo, &PlayerInfoExtra{})
			if err := m.PlayerInfo[len(m.PlayerInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameDurationLoops", wireType)
			}
			m.GameDurationLoops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameDurationLoops |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameDurationSeconds", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GameDurationSeconds = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataBuild", wireType)
			}
			m.DataBuild = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataBuild |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseBuild", wireType)
			}
			m.BaseBuild = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseBuild |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ResponseReplayInfo_Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAvailableMaps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAvailableMaps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAvailableMaps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseAvailableMaps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseAvailableMaps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseAvailableMaps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalMapPaths", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalMapPaths = append(m.LocalMapPaths, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattlenetMapNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BattlenetMapNames = append(m.BattlenetMapNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSaveMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSaveMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSaveMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapData = append(m.MapData[:0], dAtA[iNdEx:postIndex]...)
			if m.MapData == nil {
				m.MapData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSaveMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSaveMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSaveMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			m.Error = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Error |= (ResponseSaveMap_Error(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponsePing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponsePing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponsePing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataBuild", wireType)
			}
			m.DataBuild = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataBuild |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseBuild", wireType)
			}
			m.BaseBuild = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseBuild |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDebug) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDebug: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDebug: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Debug = append(m.Debug, &DebugCommand{})
			if err := m.Debug[len(m.Debug)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDebug) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDebug: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDebug: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerSetup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerSetup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerSetup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PlayerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Race", wireType)
			}
			m.Race = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Race |= (Race(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difficulty", wireType)
			}
			m.Difficulty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Difficulty |= (Difficulty(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpatialCameraSetup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpatialCameraSetup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpatialCameraSetup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Width = float32(math.Float32frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resolution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resolution == nil {
				m.Resolution = &Size2DI{}
			}
			if err := m.Resolution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimapResolution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinimapResolution == nil {
				m.MinimapResolution = &Size2DI{}
			}
			if err := m.MinimapResolution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Raw = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Score = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureLayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeatureLayer == nil {
				m.FeatureLayer = &SpatialCameraSetup{}
			}
			if err := m.FeatureLayer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Render", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Render == nil {
				m.Render = &SpatialCameraSetup{}
			}
			if err := m.Render.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (PlayerID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PlayerType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaceRequested", wireType)
			}
			m.RaceRequested = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaceRequested |= (Race(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaceActual", wireType)
			}
			m.RaceActual = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaceActual |= (Race(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difficulty", wireType)
			}
			m.Difficulty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Difficulty |= (Difficulty(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerCommon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerCommon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerCommon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (PlayerID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minerals", wireType)
			}
			m.Minerals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minerals |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vespene", wireType)
			}
			m.Vespene = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vespene |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodCap", wireType)
			}
			m.FoodCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FoodCap |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodUsed", wireType)
			}
			m.FoodUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FoodUsed |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodArmy", wireType)
			}
			m.FoodArmy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FoodArmy |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodWorkers", wireType)
			}
			m.FoodWorkers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FoodWorkers |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdleWorkerCount", wireType)
			}
			m.IdleWorkerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdleWorkerCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmyCount", wireType)
			}
			m.ArmyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArmyCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarpGateCount", wireType)
			}
			m.WarpGateCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarpGateCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LarvaCount", wireType)
			}
			m.LarvaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LarvaCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Observation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Observation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Observation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerCommon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerCommon == nil {
				m.PlayerCommon = &PlayerCommon{}
			}
			if err := m.PlayerCommon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abilities = append(m.Abilities, &AvailableAbility{})
			if err := m.Abilities[len(m.Abilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Score == nil {
				m.Score = &Score{}
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RawData == nil {
				m.RawData = &ObservationRaw{}
			}
			if err := m.RawData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureLayerData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeatureLayerData == nil {
				m.FeatureLayerData = &ObservationFeatureLayer{}
			}
			if err := m.FeatureLayerData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenderData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RenderData == nil {
				m.RenderData = &ObservationRender{}
			}
			if err := m.RenderData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UiData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UiData == nil {
				m.UiData = &ObservationUI{}
			}
			if err := m.UiData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameLoop", wireType)
			}
			m.GameLoop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameLoop |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v Alert
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSc2Api
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Alert(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Alerts = append(m.Alerts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSc2Api
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSc2Api
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Alerts) == 0 {
					m.Alerts = make([]Alert, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Alert
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSc2Api
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Alert(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Alerts = append(m.Alerts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Alerts", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionRaw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionRaw == nil {
				m.ActionRaw = &ActionRaw{}
			}
			if err := m.ActionRaw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionFeatureLayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionFeatureLayer == nil {
				m.ActionFeatureLayer = &ActionSpatial{}
			}
			if err := m.ActionFeatureLayer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionRender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionRender == nil {
				m.ActionRender = &ActionSpatial{}
			}
			if err := m.ActionRender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionUi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionUi == nil {
				m.ActionUi = &ActionUI{}
			}
			if err := m.ActionUi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionChat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActionChat == nil {
				m.ActionChat = &ActionChat{}
			}
			if err := m.ActionChat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (ActionChat_Channel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTag", wireType)
			}
			m.UnitTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitTag |= (UnitTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityId", wireType)
			}
			m.AbilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityId |= (AbilityID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ActionResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObserverAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObserverAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObserverAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerPerspective", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionObserverPlayerPerspective{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ObserverAction_PlayerPerspective{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CameraMove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionObserverCameraMove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ObserverAction_CameraMove{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CameraFollowPlayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionObserverCameraFollowPlayer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ObserverAction_CameraFollowPlayer{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CameraFollowUnits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionObserverCameraFollowUnits{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ObserverAction_CameraFollowUnits{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionObserverPlayerPerspective) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionObserverPlayerPerspective: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionObserverPlayerPerspective: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (PlayerID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionObserverCameraMove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionObserverCameraMove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionObserverCameraMove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorldPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSc2Api
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorldPos == nil {
				m.WorldPos = &Point2D{}
			}
			if err := m.WorldPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Distance = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionObserverCameraFollowPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionObserverCameraFollowPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionObserverCameraFollowPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (PlayerID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionObserverCameraFollowUnits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionObserverCameraFollowUnits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionObserverCameraFollowUnits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v UnitTag
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSc2Api
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (UnitTag(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnitTags = append(m.UnitTags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSc2Api
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSc2Api
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnitTags) == 0 {
					m.UnitTags = make([]UnitTag, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UnitTag
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSc2Api
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (UnitTag(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnitTags = append(m.UnitTags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTags", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			m.PlayerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerId |= (PlayerID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (Result(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSc2Api(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSc2Api
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSc2Api(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSc2Api
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSc2Api
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSc2Api
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSc2Api
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSc2Api(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSc2Api = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSc2Api   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("sc2api.proto", fileDescriptor_sc2api_29ffa919afdeb744) }

var fileDescriptor_sc2api_29ffa919afdeb744 = []byte{
	// 4068 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5b, 0x4d, 0x6c, 0x24, 0x49,
	0x56, 0x76, 0xd6, 0x6f, 0xd6, 0xab, 0x2a, 0x3b, 0x1d, 0x76, 0x77, 0xd7, 0x74, 0x4f, 0xdb, 0x9e,
	0x9c, 0x9d, 0xa6, 0xb7, 0x01, 0x33, 0x78, 0xbb, 0x99, 0xdd, 0x9e, 0x66, 0x66, 0xfc, 0xdb, 0x36,
	0xdb, 0xee, 0xf6, 0xa4, 0xc7, 0xbd, 0x12, 0x97, 0x22, 0x9c, 0x19, 0xb6, 0x73, 0x3b, 0x2b, 0x33,
	0x3b, 0x7f, 0xec, 0x35, 0xe2, 0x04, 0x42, 0x42, 0x9c, 0xd0, 0x0a, 0x09, 0x21, 0x81, 0xc4, 0xdf,
	0x0d, 0xc1, 0x05, 0x84, 0xb8, 0x20, 0x2e, 0x48, 0x80, 0x10, 0x62, 0x8f, 0x9c, 0x46, 0x68, 0xe6,
	0xca, 0x89, 0xe3, 0x70, 0x41, 0x2f, 0x22, 0xf2, 0xa7, 0xb2, 0x32, 0xcb, 0xee, 0x19, 0xf6, 0xe4,
	0x8c, 0x17, 0xef, 0xbd, 0x8a, 0x88, 0xf7, 0xe2, 0x7b, 0x3f, 0x99, 0x86, 0x5e, 0x68, 0xae, 0x51,
	0xdf, 0x5e, 0xf5, 0x03, 0x2f, 0xf2, 0xc8, 0xec, 0xe1, 0xe6, 0xda, 0xfa, 0xc1, 0xde, 0x01, 0x0e,
	0x4c, 0xcf, 0xb9, 0x0d, 0xa7, 0xde, 0xa9, 0x27, 0xe6, 0x6e, 0xf7, 0x4c, 0x6f, 0x34, 0xf2, 0x5c,
	0x39, 0x02, 0x8b, 0x46, 0x54, 0x3e, 0x77, 0x2d, 0x76, 0x1c, 0x9f, 0x26, 0x03, 0x16, 0x04, 0x5e,
	0x90, 0x0c, 0x5e, 0xc7, 0x2c, 0xb8, 0x94, 0x83, 0x4e, 0x40, 0x2f, 0x12, 0x7a, 0x68, 0x7a, 0x01,
	0x93, 0x83, 0x7e, 0xe8, 0xd3, 0xc8, 0xa6, 0x8e, 0x1c, 0xaa, 0xb1, 0x5c, 0x8d, 0xfe, 0xfb, 0x5d,
	0x68, 0x1b, 0xec, 0x75, 0xcc, 0xc2, 0x88, 0x6c, 0x41, 0xd7, 0x0c, 0x18, 0x8d, 0xd8, 0xf0, 0x94,
	0x8e, 0xd8, 0x40, 0x59, 0x51, 0xee, 0x77, 0xd7, 0xde, 0x59, 0x1d, 0x5f, 0xef, 0xaa, 0xe4, 0xde,
	0xe4, 0x9c, 0x4f, 0xe9, 0x88, 0xed, 0xce, 0x18, 0x60, 0xa6, 0x23, 0xf2, 0x11, 0x74, 0x7e, 0xe8,
	0xd9, 0xae, 0xd0, 0x51, 0xe3, 0x3a, 0x96, 0x2b, 0x74, 0xfc, 0x8a, 0x67, 0xbb, 0x52, 0x83, 0xfa,
	0x43, 0xf9, 0x4c, 0x9e, 0x42, 0x2f, 0x60, 0x61, 0x44, 0x83, 0x48, 0xa8, 0xa8, 0x73, 0x15, 0x7a,
	0x85, 0x0a, 0x43, 0xb0, 0x4a, 0x2d, 0xdd, 0x20, 0x1b, 0xa2, 0x22, 0xa1, 0x26, 0x60, 0xbe, 0x43,
	0x2f, 0x07, 0x8d, 0xa9, 0x8a, 0x0e, 0x91, 0xd5, 0xe0, 0x9c, 0xa8, 0x28, 0xcc, 0x86, 0x64, 0x1d,
	0xc0, 0x61, 0xf4, 0x5c, 0x1e, 0x4b, 0x93, 0xab, 0x59, 0xa9, 0x50, 0xf3, 0x0c, 0x19, 0xe5, 0x6a,
	0x3a, 0x4e, 0x32, 0x40, 0x15, 0xaf, 0x63, 0xdb, 0x7c, 0x35, 0x0c, 0xe9, 0x39, 0x1b, 0xb4, 0xa6,
	0xaa, 0xf8, 0x14, 0x19, 0x0f, 0xe9, 0x39, 0x57, 0xf1, 0x3a, 0x19, 0x64, 0x2a, 0x1c, 0x8f, 0x5a,
	0x83, 0xf6, 0xd5, 0x2a, 0x9e, 0x79, 0xd4, 0x4a, 0x55, 0xe0, 0x80, 0xfc, 0x22, 0x34, 0x5e, 0xc7,
	0x76, 0x34, 0x50, 0xb9, 0xf0, 0x9d, 0x6a, 0xe1, 0x68, 0x77, 0xc6, 0xe0, 0xac, 0x68, 0x4d, 0xdc,
	0xf5, 0xd0, 0x76, 0x4f, 0xbc, 0x41, 0x67, 0xaa, 0x35, 0x71, 0xa3, 0x7b, 0xee, 0x89, 0x87, 0xd6,
	0x3c, 0x95, 0xcf, 0x64, 0x07, 0xba, 0xde, 0x71, 0xc8, 0x82, 0x73, 0x1a, 0xd9, 0x9e, 0x3b, 0x80,
	0xa9, 0x36, 0x78, 0x91, 0x71, 0xa2, 0x0d, 0x72, 0x82, 0xe4, 0x03, 0x68, 0x51, 0x93, 0xab, 0xe8,
	0x72, 0x15, 0x77, 0x2b, 0x54, 0xac, 0x9b, 0x52, 0x5a, 0xb2, 0xe3, 0x9e, 0xc3, 0x88, 0xf9, 0x83,
	0xde, 0xd4, 0x3d, 0x1f, 0x46, 0xcc, 0xc7, 0x3d, 0x23, 0x2b, 0x8a, 0xe0, 0xcd, 0x1b, 0xf4, 0xa7,
	0x8a, 0x6c, 0xd1, 0x88, 0xa2, 0x08, 0xb2, 0x92, 0x87, 0xd0, 0xe4, 0xd7, 0x70, 0x30, 0xcb, 0x65,
	0xde, 0xae, 0x3c, 0x5a, 0x16, 0xa0, 0x7b, 0x09, 0x66, 0xbc, 0x70, 0xe8, 0x0f, 0x89, 0x83, 0xce,
	0x4d, 0xbd, 0x70, 0xe8, 0x04, 0xa9, 0x7f, 0x42, 0x98, 0x8e, 0x50, 0x8b, 0x50, 0x20, 0x8c, 0xa4,
	0x4d, 0xd5, 0x22, 0x64, 0xa4, 0x99, 0x20, 0x48, 0x47, 0x64, 0x1f, 0x66, 0xe9, 0x39, 0xb5, 0x1d,
	0x7a, 0xec, 0xb0, 0xe1, 0x88, 0xfa, 0xe1, 0x60, 0x9e, 0x2b, 0xfa, 0x56, 0xd5, 0x41, 0x27, 0xcc,
	0xfb, 0xd4, 0x0f, 0x77, 0x67, 0x8c, 0x3e, 0xcd, 0x13, 0xc8, 0x87, 0xa0, 0xf2, 0xad, 0x8d, 0xa8,
	0x3f, 0x20, 0x5c, 0xd1, 0xd2, 0x94, 0x7d, 0xed, 0x53, 0x3c, 0xfd, 0x76, 0x28, 0x1e, 0xd1, 0x00,
	0xbe, 0xed, 0x9e, 0x0e, 0x16, 0xa6, 0x1a, 0xe0, 0xc0, 0x76, 0x4f, 0xd1, 0x00, 0xc8, 0x8a, 0x06,
	0xe0, 0x08, 0x39, 0x58, 0x9c, 0x6a, 0x80, 0x2d, 0xe4, 0x41, 0x03, 0x70, 0x66, 0xb2, 0x03, 0xe0,
	0x1d, 0x87, 0x43, 0xe9, 0x59, 0x37, 0xb8, 0xe8, 0x7b, 0x53, 0x9d, 0x93, 0x05, 0xa9, 0x87, 0x75,
	0xbc, 0xe3, 0x50, 0x0c, 0xd0, 0x04, 0x23, 0xea, 0x0f, 0x11, 0xbd, 0xa9, 0x6b, 0x0d, 0x6e, 0x4e,
	0x35, 0xc1, 0x3e, 0xf5, 0x37, 0x05, 0x23, 0x9a, 0x60, 0x94, 0x8e, 0x36, 0x3a, 0xd0, 0x0e, 0x04,
	0x8b, 0xfe, 0x3f, 0x5d, 0x50, 0x0d, 0x16, 0xfa, 0x9e, 0x1b, 0x32, 0xb2, 0x5d, 0x86, 0xcb, 0x25,
	0x77, 0x48, 0xb0, 0x57, 0x02, 0xf3, 0xc7, 0x93, 0xc0, 0xbc, 0x52, 0xa5, 0xa4, 0x14, 0x99, 0x77,
	0x4b, 0x91, 0xf9, 0xdd, 0x2a, 0x1d, 0x53, 0xa0, 0x79, 0xb7, 0x14, 0x9a, 0x2b, 0x35, 0x4d, 0xc1,
	0xe6, 0x8d, 0x12, 0x6c, 0x7e, 0xa7, 0x4a, 0x4f, 0x05, 0x38, 0x6f, 0x94, 0x80, 0x73, 0xa5, 0x8e,
	0x0a, 0x74, 0xde, 0x28, 0x41, 0xe7, 0xe9, 0x3a, 0x26, 0xe1, 0x79, 0x6d, 0x0c, 0x9e, 0xdf, 0x9e,
	0x22, 0x9d, 0xe1, 0xf3, 0xc7, 0x93, 0xf8, 0x5c, 0x69, 0xd4, 0x52, 0x80, 0x7e, 0x5a, 0x06, 0xd0,
	0x95, 0x96, 0x98, 0x82, 0xd0, 0xdf, 0x2d, 0x20, 0xf4, 0x52, 0x95, 0x8e, 0x09, 0x88, 0x5e, 0x1b,
	0x83, 0xe8, 0xb7, 0xab, 0xbd, 0x20, 0x87, 0xd1, 0x6b, 0x63, 0x18, 0x5d, 0x29, 0x33, 0x06, 0xd2,
	0x8f, 0xc6, 0x41, 0xfa, 0x6e, 0xf5, 0x01, 0x8f, 0xa1, 0xf4, 0x76, 0x19, 0x4a, 0x57, 0x5e, 0xbf,
	0x4a, 0x98, 0xde, 0x2e, 0x83, 0x69, 0xbd, 0xfa, 0xf2, 0x54, 0xe0, 0xf4, 0xf3, 0x0a, 0x9c, 0x7e,
	0xaf, 0xf2, 0xb8, 0xa7, 0x03, 0xf5, 0x93, 0x09, 0xa0, 0x5e, 0x9e, 0xb6, 0xb5, 0x02, 0x52, 0xaf,
	0x8d, 0x21, 0x75, 0xa5, 0x19, 0xc6, 0xa0, 0xfa, 0xd1, 0x38, 0x54, 0x57, 0x9a, 0xa1, 0x80, 0xd5,
	0x4f, 0x4b, 0xb0, 0xfa, 0xde, 0x74, 0x3f, 0x2d, 0x07, 0xeb, 0xed, 0x32, 0xb0, 0xae, 0x34, 0x44,
	0x15, 0x5a, 0x93, 0x45, 0x68, 0xf2, 0x34, 0x7c, 0x70, 0xbc, 0x52, 0xbf, 0xdf, 0x31, 0xc4, 0x80,
	0xac, 0x42, 0x2b, 0x8c, 0x68, 0x14, 0x87, 0x03, 0x73, 0x45, 0xb9, 0x3f, 0xbb, 0x76, 0xb3, 0xa8,
	0xf7, 0x90, 0xcf, 0x1a, 0x92, 0x6b, 0x03, 0x40, 0x0d, 0xe4, 0x2f, 0xe9, 0x7f, 0x5a, 0x83, 0xf9,
	0x89, 0xec, 0x9a, 0x7c, 0x00, 0x1d, 0xc7, 0x33, 0xa9, 0xc3, 0x2d, 0x24, 0xb0, 0x7f, 0x50, 0x54,
	0xfa, 0x0c, 0x19, 0x84, 0x69, 0x54, 0x47, 0x3e, 0x93, 0x55, 0x20, 0xc7, 0x34, 0x8a, 0x1c, 0xe6,
	0xb2, 0x08, 0x85, 0x87, 0x6e, 0x02, 0xfc, 0x9d, 0xdd, 0x19, 0x43, 0x4b, 0xe7, 0xf6, 0xa9, 0xff,
	0x5c, 0x24, 0xee, 0x3d, 0xf4, 0x32, 0x16, 0x0c, 0x43, 0x16, 0xc5, 0xfe, 0xa0, 0xbe, 0x52, 0x2f,
	0x8b, 0xbe, 0x07, 0x9c, 0xe7, 0x10, 0x59, 0x8c, 0xae, 0x9f, 0x0d, 0xc8, 0x32, 0x74, 0x2d, 0x3b,
	0xe4, 0x7e, 0x79, 0xe2, 0x9d, 0x72, 0x4c, 0x57, 0x0d, 0x90, 0xa4, 0x1d, 0xef, 0x14, 0x19, 0x02,
	0xea, 0x5a, 0xde, 0x68, 0x18, 0x32, 0x66, 0x71, 0xb0, 0xee, 0x1b, 0x20, 0x48, 0x87, 0x8c, 0x59,
	0xe4, 0x36, 0x1e, 0x06, 0x75, 0x22, 0x7b, 0x24, 0x60, 0x58, 0x35, 0xd2, 0xf1, 0x46, 0x13, 0xea,
	0xfb, 0xd4, 0xd7, 0x3f, 0x01, 0x35, 0xd9, 0x2c, 0x79, 0x0b, 0x54, 0xdc, 0x96, 0x4f, 0xa3, 0x33,
	0x7e, 0x30, 0x1d, 0xa3, 0x3d, 0xa2, 0xfe, 0x01, 0x8d, 0xce, 0x92, 0x29, 0x0e, 0x11, 0x08, 0xc6,
	0x3d, 0x3e, 0x85, 0x68, 0xa0, 0xff, 0x6b, 0x0d, 0xc8, 0x64, 0xac, 0x24, 0x1f, 0x25, 0xe6, 0x54,
	0xb8, 0xdd, 0xee, 0x5f, 0x1d, 0x5e, 0x57, 0xb7, 0x91, 0x3f, 0x31, 0xfc, 0xbb, 0xd0, 0xe7, 0x0f,
	0x43, 0x8b, 0x45, 0xd4, 0x76, 0x42, 0x71, 0xd0, 0x46, 0x8f, 0x13, 0xb7, 0x04, 0x4d, 0xff, 0x77,
	0x05, 0x9a, 0x5c, 0x8a, 0xdc, 0x84, 0x0e, 0x7f, 0x18, 0xba, 0xb6, 0xa3, 0xcd, 0xdc, 0x6e, 0xff,
	0xee, 0x1f, 0xaf, 0xd4, 0x5d, 0xdb, 0x21, 0xb3, 0x00, 0xfb, 0x76, 0x18, 0xda, 0xee, 0xe9, 0x3e,
	0xf5, 0x35, 0x85, 0x10, 0x98, 0xdd, 0x73, 0xcf, 0xa9, 0x63, 0x5b, 0xfb, 0x62, 0x6b, 0x5a, 0x6d,
	0x9c, 0x86, 0x7b, 0xd2, 0xea, 0xe3, 0x34, 0x34, 0xa7, 0xd6, 0x20, 0x8b, 0xa0, 0x65, 0xb4, 0x5d,
	0xea, 0x5a, 0x0e, 0xd3, 0x9a, 0xe4, 0x26, 0x10, 0xf9, 0x0b, 0x39, 0x4b, 0x6a, 0x2d, 0xa4, 0x4b,
	0xee, 0x3c, 0xbd, 0x4d, 0x6e, 0xc3, 0xcd, 0xfd, 0xd8, 0x89, 0x6c, 0x61, 0xea, 0x23, 0x37, 0x8c,
	0x7d, 0xdf, 0x0b, 0x22, 0x66, 0x69, 0xaa, 0xfe, 0x9b, 0x75, 0x98, 0x2b, 0xd4, 0x72, 0xe4, 0x01,
	0x34, 0x02, 0x6a, 0x32, 0x79, 0x8e, 0x8b, 0x13, 0xe7, 0x48, 0x4d, 0x0c, 0x9d, 0x9c, 0x87, 0x3c,
	0x01, 0x22, 0x42, 0x08, 0xb3, 0x86, 0xd2, 0xf7, 0x6c, 0x8b, 0x9f, 0x5c, 0x7f, 0xa3, 0xf7, 0xd5,
	0xe7, 0xcb, 0xaa, 0x58, 0xca, 0xde, 0x16, 0x3a, 0x6c, 0xc2, 0x29, 0x69, 0x16, 0x79, 0x0c, 0x6d,
	0xcf, 0xc7, 0x2b, 0x1d, 0xca, 0x54, 0x64, 0x22, 0xf2, 0xed, 0xb9, 0x11, 0x0b, 0x4e, 0xa8, 0xc9,
	0x5e, 0x08, 0x3e, 0x23, 0x11, 0x20, 0x8f, 0xa1, 0x27, 0x10, 0x62, 0x88, 0x9b, 0x09, 0x65, 0x06,
	0x72, 0x6b, 0xc2, 0xd9, 0xbd, 0x20, 0x3a, 0x64, 0x91, 0xd1, 0x15, 0xcc, 0x38, 0xe4, 0xb2, 0xa6,
	0x63, 0x33, 0x37, 0x92, 0xb2, 0x4d, 0x7e, 0x51, 0xaa, 0x65, 0x05, 0xb3, 0x90, 0x5d, 0x86, 0x6e,
	0x78, 0x46, 0x03, 0xdc, 0xaf, 0x17, 0x44, 0xdc, 0xcb, 0x9b, 0x06, 0x08, 0x12, 0x72, 0x20, 0x83,
	0x3c, 0x09, 0x7e, 0x5d, 0xdb, 0xdc, 0x8b, 0x40, 0x90, 0xd0, 0xae, 0x1b, 0x73, 0xd0, 0xf7, 0x69,
	0x10, 0xd9, 0xa6, 0xed, 0xf3, 0xc0, 0xab, 0x6f, 0x42, 0x5b, 0xfe, 0x14, 0xb9, 0x23, 0xb3, 0x01,
	0xae, 0x5b, 0xe1, 0xba, 0x79, 0xa4, 0xe7, 0x9a, 0xef, 0x40, 0xe7, 0x98, 0x86, 0x72, 0xb2, 0x26,
	0x26, 0x91, 0x80, 0x93, 0xfa, 0x3f, 0xd7, 0x41, 0x2b, 0x26, 0x7f, 0xe4, 0xdb, 0xd0, 0xc9, 0xac,
	0xa2, 0x4c, 0x5a, 0xc5, 0x50, 0xfd, 0xc4, 0x16, 0x4f, 0x92, 0xeb, 0x53, 0xe3, 0x66, 0xbf, 0x77,
	0x55, 0x62, 0x79, 0xc5, 0xe5, 0xa9, 0x97, 0x5c, 0x9e, 0xbf, 0xa8, 0x5d, 0x75, 0x79, 0x06, 0xb0,
	0x98, 0xb8, 0x76, 0xfe, 0x84, 0x34, 0x85, 0xdc, 0x81, 0x5b, 0xd2, 0xb9, 0x5f, 0x14, 0xbc, 0x48,
	0xdc, 0x27, 0x29, 0x26, 0xdd, 0x44, 0xab, 0x13, 0x0d, 0x7a, 0x89, 0x2a, 0xb4, 0x9b, 0xd6, 0x20,
	0x3d, 0x50, 0x71, 0xe1, 0x3b, 0xb1, 0xe3, 0x68, 0x4d, 0x32, 0x07, 0xdd, 0x67, 0x34, 0x76, 0xcd,
	0x33, 0xbe, 0x10, 0x71, 0x7d, 0x76, 0x18, 0x8d, 0xe2, 0x80, 0xe5, 0xaf, 0x48, 0x1b, 0x95, 0x3f,
	0xf7, 0x0e, 0x7d, 0x6a, 0xb2, 0x1d, 0x2f, 0x38, 0x0a, 0x59, 0xa0, 0xa9, 0x64, 0x01, 0xe6, 0xf0,
	0xe6, 0x7a, 0x2c, 0x7c, 0xee, 0x45, 0xdb, 0x3f, 0xb2, 0xc3, 0x48, 0xeb, 0x90, 0x79, 0xe8, 0x6f,
	0x52, 0xd7, 0xf5, 0xa2, 0x17, 0x3e, 0x73, 0xf1, 0xf2, 0x03, 0x27, 0x9d, 0x31, 0xf3, 0x55, 0x18,
	0x8f, 0xc4, 0xcf, 0x74, 0x71, 0x5d, 0xcf, 0x59, 0x74, 0xe1, 0x05, 0xaf, 0x04, 0xa5, 0x87, 0x88,
	0xf1, 0x22, 0x3a, 0x63, 0x81, 0x18, 0xf7, 0xf5, 0x45, 0x84, 0xb7, 0x62, 0x6f, 0x44, 0xff, 0x2b,
	0x05, 0x16, 0x4a, 0x12, 0x73, 0xf2, 0xf1, 0x38, 0xec, 0x7d, 0xfb, 0x1a, 0xc9, 0xfc, 0xd7, 0xc0,
	0xbd, 0xf7, 0xaf, 0xb2, 0x5c, 0xe1, 0x38, 0x15, 0xfd, 0x6f, 0x6b, 0xe9, 0x36, 0x72, 0xd9, 0x3f,
	0x79, 0x27, 0x4d, 0xa2, 0x32, 0xd4, 0xcf, 0x12, 0x24, 0x0e, 0xfd, 0x8f, 0x2b, 0x31, 0xa5, 0x59,
	0xf0, 0xde, 0xff, 0x5f, 0x44, 0xb9, 0x32, 0xfc, 0x65, 0x6b, 0xe7, 0x61, 0x09, 0xc3, 0x5f, 0x2f,
	0x5b, 0x3b, 0xe2, 0xf8, 0x58, 0xd8, 0x6a, 0x8d, 0x85, 0xad, 0xb1, 0xd8, 0xd8, 0x2e, 0xc4, 0x46,
	0x15, 0x5a, 0x42, 0x09, 0x1e, 0xdb, 0x42, 0x49, 0xd5, 0x74, 0x6d, 0x33, 0xe7, 0x64, 0xbe, 0x86,
	0x99, 0xff, 0xee, 0xca, 0xf0, 0x36, 0x0f, 0x7d, 0x79, 0xad, 0xc4, 0x8f, 0x68, 0x0a, 0xb9, 0x01,
	0xf3, 0xf2, 0x6a, 0x1a, 0xa9, 0x11, 0xb5, 0xda, 0x04, 0xb9, 0x2c, 0xce, 0x71, 0x5a, 0x63, 0xda,
	0xe5, 0x6e, 0x96, 0x5c, 0xee, 0x56, 0xd1, 0xdb, 0xda, 0xfa, 0xc3, 0x34, 0xf1, 0xca, 0xd2, 0x3d,
	0x34, 0x68, 0x14, 0xd8, 0xa7, 0xa7, 0x2c, 0x18, 0x9a, 0x23, 0x4b, 0x66, 0x18, 0x20, 0x49, 0x9b,
	0x23, 0x4b, 0xff, 0x6b, 0x25, 0xcb, 0x24, 0x72, 0x72, 0xd7, 0xcd, 0x24, 0x32, 0x91, 0xaf, 0x71,
	0xd4, 0xdf, 0xb9, 0xea, 0xa4, 0x39, 0xee, 0x7c, 0x26, 0x16, 0x9b, 0x5c, 0x2a, 0x82, 0x18, 0x3f,
	0xde, 0xa6, 0xd4, 0x17, 0x70, 0xeb, 0x85, 0xf2, 0x38, 0xc7, 0x98, 0x96, 0xbb, 0x79, 0xc6, 0x8c,
	0x58, 0x60, 0xc4, 0x32, 0x76, 0x82, 0x91, 0x13, 0xfb, 0xd0, 0xcd, 0xb5, 0x17, 0xf5, 0x59, 0xe8,
	0xe5, 0xcb, 0x59, 0x7d, 0x3e, 0xcd, 0x23, 0x92, 0x22, 0x55, 0xff, 0x93, 0x5a, 0x16, 0x91, 0x12,
	0x62, 0x72, 0x41, 0xdc, 0xa4, 0x0f, 0x22, 0x52, 0x3e, 0x9e, 0xbe, 0x7e, 0x0b, 0x66, 0xd3, 0x3c,
	0x59, 0xa0, 0x83, 0x3c, 0xb7, 0x24, 0x21, 0xe6, 0xe8, 0xf0, 0x61, 0x1a, 0x5e, 0x79, 0x15, 0x26,
	0x72, 0xdc, 0xdb, 0xe5, 0x39, 0x2e, 0xfe, 0x62, 0x12, 0x7a, 0xf9, 0xaf, 0x3f, 0x82, 0x8e, 0x6c,
	0x5b, 0xd0, 0x0b, 0x99, 0x31, 0x0c, 0x4a, 0xf2, 0xfb, 0x20, 0x32, 0xe8, 0x85, 0xa1, 0x86, 0xf2,
	0x29, 0x8f, 0x2a, 0xcd, 0x37, 0x45, 0x95, 0x3b, 0xd0, 0x19, 0x79, 0x16, 0xdf, 0x70, 0x38, 0x68,
	0xf1, 0x4a, 0x43, 0x1d, 0x79, 0x16, 0xee, 0x38, 0xd4, 0x1f, 0xa5, 0x18, 0x99, 0xab, 0xcb, 0x8b,
	0x40, 0xa4, 0x14, 0x81, 0x48, 0xff, 0x87, 0x1c, 0x48, 0xe4, 0x05, 0xdf, 0x87, 0xb6, 0xa8, 0xae,
	0xc2, 0x81, 0xc2, 0xcf, 0x65, 0xa2, 0x78, 0x11, 0x15, 0x94, 0x91, 0xb0, 0x91, 0x4f, 0xa0, 0x2f,
	0x1e, 0x87, 0xdc, 0x39, 0xd1, 0x55, 0x4b, 0x6b, 0x06, 0x21, 0x27, 0xbc, 0xbc, 0x47, 0xb3, 0x41,
	0x48, 0x7e, 0x79, 0xbc, 0xfd, 0x50, 0x2f, 0xef, 0xf8, 0xe5, 0x56, 0x39, 0xde, 0x74, 0x58, 0x87,
	0xbe, 0x34, 0x67, 0xc0, 0xc2, 0xd8, 0x89, 0x06, 0x0d, 0xbe, 0x80, 0xb7, 0xcb, 0x0d, 0x6a, 0x70,
	0x1e, 0x43, 0x96, 0x39, 0x62, 0x44, 0xde, 0x87, 0x86, 0x79, 0x46, 0x23, 0x99, 0xc5, 0x4d, 0x48,
	0x6e, 0x9e, 0xd1, 0xc8, 0x60, 0x26, 0xb3, 0xcf, 0x99, 0x65, 0x70, 0x4e, 0xfd, 0x10, 0x7a, 0x79,
	0xea, 0x9b, 0xa4, 0x49, 0x03, 0x68, 0x8f, 0x58, 0x18, 0xd2, 0x53, 0x59, 0x88, 0x19, 0xc9, 0x50,
	0x5f, 0x87, 0xfe, 0x58, 0x0b, 0xfb, 0xcd, 0xad, 0xa1, 0xef, 0xc0, 0xec, 0x78, 0x8f, 0x85, 0x3c,
	0xc4, 0xc0, 0xc0, 0xcf, 0x05, 0x55, 0xcc, 0x4e, 0xee, 0x4e, 0xaa, 0x10, 0xe7, 0x22, 0x79, 0xf5,
	0x4f, 0xe1, 0x46, 0x69, 0xcf, 0x93, 0x7c, 0xb7, 0xb8, 0xa4, 0xa5, 0x72, 0x43, 0x25, 0x02, 0xd9,
	0xd2, 0x06, 0x70, 0xb3, 0xbc, 0x34, 0xd7, 0xdf, 0x4d, 0x81, 0xe1, 0x30, 0x62, 0x3e, 0x56, 0xd5,
	0xa6, 0x17, 0xbb, 0x22, 0x7b, 0xed, 0x1b, 0x62, 0x90, 0x87, 0x0b, 0xe4, 0xd2, 0xff, 0x5c, 0x49,
	0xa5, 0x78, 0x70, 0xbc, 0x0b, 0x40, 0x8f, 0x6d, 0xc7, 0x8e, 0x2e, 0x13, 0x13, 0xa8, 0x46, 0x47,
	0x52, 0xf6, 0x2c, 0xb2, 0x02, 0xbd, 0xd8, 0xb5, 0xa3, 0x61, 0x74, 0xe9, 0xb3, 0x24, 0x19, 0x50,
	0x0d, 0x40, 0xda, 0x67, 0x97, 0x3e, 0xdb, 0xb3, 0x50, 0x41, 0xec, 0x9f, 0x06, 0xd4, 0xe2, 0xf3,
	0x75, 0xa1, 0x40, 0x52, 0xf6, 0x2c, 0x72, 0x0b, 0xda, 0xc7, 0xf1, 0xc9, 0x09, 0xce, 0x89, 0xb8,
	0xde, 0xc2, 0xe1, 0x9e, 0x85, 0xd7, 0x93, 0x9d, 0x9c, 0x30, 0x33, 0xc2, 0xa9, 0xa6, 0x08, 0xcb,
	0x82, 0xb0, 0x67, 0xe9, 0x7f, 0x54, 0xcb, 0x96, 0xcd, 0x97, 0xf9, 0x3d, 0x90, 0x8b, 0xb2, 0x59,
	0x72, 0x82, 0x93, 0x57, 0x45, 0xac, 0x1a, 0xf9, 0x8d, 0x8c, 0x9b, 0xac, 0x41, 0x13, 0x97, 0x9b,
	0xdc, 0xb0, 0x09, 0x43, 0x1e, 0xc9, 0xbd, 0x70, 0x39, 0xc1, 0x4a, 0x3e, 0x00, 0x55, 0x6e, 0x21,
	0xac, 0x2a, 0xe6, 0x8f, 0xc4, 0x3c, 0x97, 0x4a, 0x99, 0xc9, 0x2a, 0x34, 0x71, 0x7f, 0xa1, 0xbc,
	0x4d, 0x13, 0x18, 0xb7, 0x11, 0x9f, 0x9c, 0x88, 0x1f, 0xe2, 0x6c, 0xe4, 0x21, 0xb4, 0xc5, 0xa6,
	0x93, 0x5a, 0x68, 0x02, 0x50, 0xb7, 0xf9, 0x34, 0x97, 0x49, 0x58, 0x45, 0x9c, 0x28, 0xbc, 0xda,
	0xd0, 0xef, 0x67, 0x21, 0x35, 0xa3, 0x12, 0x22, 0xbb, 0x7d, 0x0a, 0xcf, 0x89, 0xf8, 0xb3, 0xfe,
	0x3b, 0x4a, 0x2a, 0x9f, 0x35, 0xcb, 0xae, 0x93, 0x20, 0x16, 0xf2, 0xb0, 0x5a, 0x49, 0x1e, 0xf6,
	0x2e, 0xf4, 0x2d, 0xef, 0xc2, 0x75, 0x3c, 0x6a, 0x09, 0x26, 0xe1, 0x11, 0xbd, 0x84, 0x88, 0x4c,
	0xb9, 0xac, 0xeb, 0x3f, 0x14, 0x98, 0xcb, 0x42, 0xc6, 0xf6, 0x8f, 0xa2, 0x80, 0x16, 0x03, 0x8d,
	0x68, 0xdc, 0x5c, 0x37, 0xd0, 0x4c, 0xc0, 0x5a, 0xad, 0xbc, 0xbf, 0x36, 0x05, 0xd6, 0xee, 0x82,
	0x54, 0x38, 0x1c, 0x8d, 0x02, 0xbe, 0xfe, 0xa6, 0x21, 0x61, 0x6a, 0x7f, 0x14, 0xe4, 0xa6, 0xa9,
	0x3f, 0xe2, 0x4e, 0x9d, 0x4e, 0xaf, 0xfb, 0x23, 0xfd, 0xbf, 0x1b, 0x99, 0x1d, 0x72, 0xa7, 0xfb,
	0x8d, 0xc3, 0xef, 0x27, 0x65, 0xe1, 0x77, 0xb9, 0xfa, 0x54, 0xf8, 0x59, 0x8e, 0x1d, 0xcd, 0x2a,
	0x2c, 0xf0, 0x12, 0xd7, 0x8a, 0x03, 0x1e, 0x02, 0x86, 0x8e, 0xe7, 0xf9, 0xa2, 0x7e, 0xef, 0x1b,
	0xf3, 0x38, 0xb5, 0x25, 0x67, 0x9e, 0xe1, 0x04, 0x59, 0x83, 0x1b, 0xe3, 0xfc, 0x21, 0x33, 0x3d,
	0xd7, 0x12, 0xa1, 0xb8, 0x66, 0x2c, 0xe4, 0x25, 0x0e, 0xc5, 0x14, 0x79, 0x07, 0x7a, 0x5c, 0xe6,
	0x9c, 0x05, 0x21, 0x46, 0xa5, 0x16, 0xdf, 0x49, 0x17, 0x69, 0x2f, 0x05, 0x09, 0xcf, 0x0f, 0x1d,
	0x63, 0x78, 0x1c, 0xdb, 0x8e, 0xe8, 0xf7, 0xf7, 0x8d, 0x0e, 0x52, 0x36, 0x90, 0x80, 0xd3, 0xbc,
	0xd6, 0x16, 0xd3, 0xaa, 0x98, 0x46, 0x8a, 0x98, 0x4e, 0x53, 0xc4, 0xce, 0xf4, 0x14, 0x31, 0x3b,
	0xfa, 0x2b, 0x52, 0x44, 0x98, 0x4c, 0x11, 0x71, 0x17, 0x7c, 0x89, 0xc9, 0x2e, 0xba, 0x62, 0x17,
	0x48, 0x93, 0xbb, 0xd0, 0x7f, 0xfb, 0xa7, 0x9f, 0xb0, 0x6b, 0xd0, 0x3b, 0xa0, 0x01, 0x2a, 0x10,
	0x59, 0x68, 0x03, 0x55, 0x6e, 0xc9, 0x7b, 0x24, 0x48, 0x4d, 0xfd, 0x26, 0x2c, 0x96, 0xbd, 0x56,
	0xd4, 0x3d, 0x8c, 0x44, 0x25, 0x6d, 0x6c, 0x72, 0x0f, 0xe6, 0xc6, 0xbd, 0x4d, 0xe0, 0x69, 0xc7,
	0xe8, 0xe7, 0xdd, 0x0d, 0x91, 0x6c, 0x61, 0xb2, 0x07, 0x2a, 0x40, 0xb4, 0x63, 0xcc, 0x17, 0x5b,
	0xa0, 0x32, 0x84, 0xe6, 0x5f, 0x4b, 0x5e, 0xb7, 0xc9, 0x58, 0x1b, 0x6f, 0x32, 0xfe, 0x96, 0x82,
	0x09, 0xed, 0x58, 0xdb, 0x9c, 0x7c, 0x38, 0x5e, 0x17, 0xbc, 0x77, 0x45, 0x9b, 0x7d, 0xcc, 0xe2,
	0xd7, 0xca, 0xf7, 0x0b, 0x85, 0x91, 0x92, 0x4b, 0xba, 0x0f, 0x6c, 0xf7, 0x54, 0xff, 0xb1, 0x92,
	0xc5, 0x23, 0x24, 0x4c, 0xf8, 0xb9, 0x32, 0xe9, 0xe7, 0x45, 0x27, 0xaa, 0x4d, 0x38, 0x51, 0xe1,
	0x2a, 0xd4, 0xa7, 0x5f, 0x85, 0x46, 0xe1, 0x2a, 0xe8, 0x1b, 0xb8, 0xa6, 0xec, 0xdd, 0x2c, 0x06,
	0x3a, 0xf1, 0x76, 0x40, 0x29, 0x0f, 0x74, 0x9c, 0x4b, 0xd6, 0x4d, 0xf2, 0xd5, 0x80, 0x3e, 0x87,
	0xb9, 0x53, 0xee, 0xa5, 0x81, 0xfe, 0x4f, 0x0a, 0x74, 0x73, 0x5d, 0x4c, 0xb2, 0x0a, 0x0d, 0x8c,
	0xfd, 0xf2, 0xe4, 0x2b, 0x50, 0x18, 0xc3, 0xa7, 0xc1, 0xf9, 0xc8, 0x7d, 0xd9, 0xc3, 0xac, 0x55,
	0xf7, 0x30, 0x65, 0x07, 0xf3, 0x31, 0x80, 0x65, 0x9f, 0x9c, 0xd8, 0x66, 0xec, 0x44, 0x97, 0x7c,
	0xf3, 0x25, 0xfa, 0xb7, 0x52, 0x0e, 0x23, 0xc7, 0x5d, 0x6c, 0xf5, 0x35, 0x8a, 0xad, 0x3e, 0xfd,
	0x2f, 0x15, 0x20, 0x87, 0xe2, 0xc3, 0x9d, 0x4d, 0x3a, 0x62, 0x01, 0x15, 0xbb, 0x59, 0x84, 0xe6,
	0x85, 0x6d, 0x49, 0x7f, 0xac, 0x19, 0x62, 0x40, 0x3e, 0x00, 0x08, 0x58, 0xe8, 0x39, 0x71, 0x94,
	0xd8, 0xa9, 0xa4, 0x27, 0x79, 0x68, 0xff, 0x3a, 0x5b, 0xdb, 0xda, 0x33, 0x72, 0xac, 0x64, 0x07,
	0xc8, 0xc8, 0x76, 0x6d, 0x74, 0xe5, 0x9c, 0x82, 0xfa, 0x74, 0x05, 0xf3, 0x52, 0xc4, 0x48, 0x25,
	0xf4, 0x7f, 0x54, 0x40, 0x2b, 0x16, 0x32, 0x44, 0x83, 0x3a, 0x16, 0x4b, 0x22, 0x25, 0xc3, 0x47,
	0x5c, 0x3d, 0xff, 0x32, 0x49, 0x66, 0x61, 0x62, 0x40, 0x9e, 0x42, 0xff, 0x44, 0xb4, 0xcf, 0x86,
	0x7c, 0xff, 0x55, 0x9f, 0xfd, 0x4c, 0x1e, 0x87, 0xd1, 0x93, 0x82, 0xcf, 0x50, 0x8e, 0x3c, 0xc6,
	0xa8, 0xec, 0x5a, 0x2c, 0xa8, 0xfa, 0xde, 0xa7, 0x44, 0x83, 0x94, 0xd0, 0xff, 0xbe, 0x06, 0x90,
	0xc5, 0x9e, 0x37, 0xc9, 0xeb, 0x13, 0x07, 0xab, 0x5d, 0xd3, 0xc1, 0x3e, 0x84, 0x59, 0x74, 0x9f,
	0xa1, 0x7c, 0xdf, 0xcf, 0x2c, 0xe9, 0x3a, 0xe5, 0xae, 0xd6, 0x47, 0x5e, 0x23, 0x61, 0x25, 0x8f,
	0xa0, 0xcb, 0x85, 0xa9, 0x19, 0xc5, 0xd4, 0xe1, 0xfb, 0xac, 0x92, 0x04, 0x64, 0x5c, 0xe7, 0x7c,
	0x05, 0x57, 0x6d, 0x7e, 0x13, 0x57, 0x6d, 0x4d, 0xb8, 0xea, 0xff, 0xd6, 0xa0, 0x27, 0x76, 0xb9,
	0xc9, 0x3f, 0x61, 0x7b, 0x93, 0xc3, 0xbb, 0x0d, 0xea, 0xc8, 0x76, 0x59, 0x40, 0x65, 0xaf, 0xa3,
	0x6f, 0xa4, 0x63, 0x2c, 0x98, 0xce, 0x59, 0xe8, 0x33, 0x97, 0x49, 0x64, 0x49, 0x86, 0x88, 0xbe,
	0x27, 0x9e, 0x67, 0x0d, 0x4d, 0xea, 0x4b, 0x54, 0x69, 0xe3, 0x78, 0x93, 0xfa, 0x98, 0x95, 0xf3,
	0xa9, 0x38, 0x4c, 0x5f, 0x33, 0x71, 0xde, 0xa3, 0x90, 0x59, 0xe9, 0x24, 0x0d, 0x46, 0x97, 0x7c,
	0x23, 0x72, 0x72, 0x3d, 0x18, 0x5d, 0x22, 0xdc, 0xf1, 0xc9, 0x0b, 0x2f, 0x78, 0xc5, 0x82, 0x50,
	0x06, 0xf6, 0x2e, 0xd2, 0x7e, 0x20, 0x48, 0xe4, 0x01, 0xcc, 0xdb, 0x96, 0xc3, 0x24, 0xcb, 0x50,
	0x54, 0x2b, 0x22, 0xc2, 0xcf, 0xe1, 0x84, 0xe0, 0xdb, 0x44, 0x32, 0xaf, 0x4b, 0x82, 0xd1, 0xa5,
	0x64, 0xea, 0x08, 0xec, 0x43, 0x8a, 0x98, 0xbe, 0x07, 0x73, 0x17, 0x34, 0xf0, 0x87, 0xa7, 0x34,
	0x62, 0x92, 0x07, 0x38, 0x4f, 0x1f, 0xc9, 0x4f, 0x69, 0xc4, 0x04, 0xdf, 0x32, 0x74, 0x1d, 0x1a,
	0x9c, 0x53, 0xc9, 0xd3, 0x15, 0x2f, 0xce, 0x38, 0x89, 0x33, 0xe8, 0x7f, 0xd0, 0x80, 0xee, 0x8b,
	0xd2, 0xb2, 0x58, 0x7c, 0x50, 0x28, 0xd3, 0xcf, 0x8a, 0xfc, 0x51, 0x58, 0x2c, 0xc9, 0x1f, 0xa5,
	0xfd, 0x3e, 0xca, 0xd7, 0x2a, 0x22, 0x4f, 0x9b, 0x68, 0x5b, 0xa4, 0x31, 0x59, 0x16, 0x2d, 0xf9,
	0x82, 0xe5, 0x67, 0x93, 0x6b, 0x2e, 0xae, 0xe1, 0x8d, 0x89, 0x6b, 0x88, 0x93, 0xc9, 0xed, 0xff,
	0x1e, 0xa8, 0x01, 0xbd, 0xc8, 0xfa, 0xa2, 0x95, 0x95, 0xa5, 0x68, 0x01, 0xd0, 0x0b, 0xa3, 0x1d,
	0xd0, 0x0b, 0x9e, 0xaa, 0x1f, 0x01, 0x19, 0x03, 0x8e, 0xac, 0x79, 0xda, 0x5d, 0xfb, 0x99, 0x29,
	0x4a, 0x76, 0x72, 0xa0, 0x61, 0x68, 0x79, 0x08, 0xe1, 0x6a, 0x37, 0xb0, 0x48, 0x40, 0x50, 0xc8,
	0xde, 0x21, 0x96, 0x7c, 0xd0, 0x91, 0x5f, 0x14, 0xe7, 0x46, 0x60, 0xc5, 0xbf, 0x5c, 0xc7, 0x2f,
	0x41, 0x3b, 0xb6, 0x85, 0xbc, 0x5a, 0xfe, 0xaa, 0x3b, 0x27, 0x7f, 0xb4, 0x67, 0xb4, 0x62, 0x9b,
	0xcb, 0x25, 0x6f, 0x71, 0x30, 0xb3, 0x95, 0x4e, 0xc3, 0xdf, 0xe2, 0x60, 0x42, 0x4b, 0x7e, 0x1e,
	0x5a, 0xd4, 0x61, 0x41, 0x84, 0x39, 0x1f, 0x96, 0xf4, 0x13, 0x07, 0xbb, 0x8e, 0xb3, 0x86, 0x64,
	0xd2, 0xff, 0xad, 0x06, 0xad, 0xb4, 0x7a, 0x07, 0xd9, 0xac, 0x49, 0x10, 0xb9, 0xbb, 0xf6, 0x56,
	0x45, 0x43, 0x80, 0x5e, 0x18, 0x1d, 0x9a, 0x3c, 0x92, 0x17, 0xb0, 0x28, 0x25, 0xc7, 0x31, 0xba,
	0x56, 0xbe, 0x2b, 0xa1, 0x43, 0xe2, 0xac, 0x41, 0x84, 0x68, 0xfe, 0xbc, 0xc9, 0x46, 0xda, 0x37,
	0x92, 0x58, 0x5d, 0xbf, 0x8e, 0x26, 0xd9, 0x39, 0x12, 0x27, 0x4d, 0x1e, 0x81, 0x5c, 0xe1, 0x30,
	0xb6, 0xab, 0x9a, 0x71, 0x42, 0xfe, 0x68, 0xcf, 0x50, 0x05, 0xeb, 0x91, 0x8d, 0x75, 0x99, 0x14,
	0xe3, 0x5d, 0x9f, 0x56, 0x79, 0x5d, 0x26, 0x04, 0x79, 0x97, 0x47, 0x1e, 0x1a, 0x3e, 0xeb, 0x7f,
	0xa6, 0x00, 0x64, 0x53, 0xe4, 0x09, 0xb4, 0xcd, 0x33, 0xea, 0xba, 0xcc, 0x91, 0x99, 0x85, 0x5e,
	0xad, 0x67, 0x75, 0x53, 0x70, 0x1a, 0x89, 0xc8, 0x94, 0x5e, 0xd0, 0x13, 0x68, 0x6f, 0xa6, 0x4c,
	0x5d, 0xf9, 0x58, 0x4c, 0xf8, 0xfa, 0xd0, 0xd9, 0x08, 0x3c, 0x6a, 0x99, 0x34, 0x8c, 0x34, 0x85,
	0xa8, 0xd0, 0xf8, 0x8c, 0xd1, 0x91, 0x56, 0xd3, 0xff, 0x50, 0x81, 0x6e, 0xae, 0xe1, 0x46, 0xee,
	0x81, 0x2a, 0xba, 0x1f, 0x54, 0x34, 0x03, 0x1b, 0x1b, 0xdd, 0xaf, 0x3e, 0x5f, 0x6e, 0xf3, 0x8e,
	0x01, 0x3d, 0x35, 0xda, 0xb1, 0x78, 0x20, 0x3f, 0x37, 0xd6, 0x44, 0xa9, 0x71, 0xce, 0xfe, 0x57,
	0x9f, 0x2f, 0x77, 0xe4, 0xed, 0xde, 0xdb, 0xca, 0xf7, 0x54, 0xb2, 0xd6, 0x92, 0x88, 0x5c, 0xd7,
	0x6b, 0x2d, 0xfd, 0xb8, 0x0e, 0xb3, 0x85, 0xa6, 0xd2, 0xaf, 0x01, 0x91, 0x58, 0xe5, 0xb3, 0x20,
	0xf4, 0x99, 0x19, 0xd9, 0xe7, 0xc9, 0x47, 0x6e, 0xbf, 0x50, 0xae, 0x34, 0xd1, 0x20, 0xe0, 0xeb,
	0x20, 0x13, 0xdb, 0x9d, 0x31, 0xe6, 0xfd, 0x22, 0x91, 0x7c, 0x1f, 0xba, 0x26, 0x8f, 0xf6, 0xc3,
	0x91, 0x77, 0x9e, 0x7c, 0xfa, 0x76, 0x7f, 0xba, 0x6a, 0x91, 0x1e, 0xec, 0x7b, 0xe7, 0xe2, 0x2b,
	0xba, 0x74, 0x44, 0x2c, 0x58, 0x94, 0xca, 0x4e, 0x3c, 0xc7, 0xf1, 0x2e, 0xe4, 0x3b, 0x26, 0xe9,
	0xc1, 0xef, 0x5f, 0x47, 0xeb, 0x0e, 0x17, 0x14, 0x8b, 0xdf, 0x9d, 0x31, 0x88, 0x39, 0x41, 0x25,
	0x14, 0x16, 0xc6, 0x7f, 0x45, 0x34, 0x7f, 0x1a, 0xd7, 0x39, 0x95, 0xfc, 0x8f, 0xa0, 0x91, 0x43,
	0x3c, 0x15, 0xb3, 0x48, 0xdc, 0x50, 0x93, 0xef, 0xb5, 0xf4, 0x67, 0xb0, 0x7c, 0xc5, 0xb9, 0xbe,
	0x41, 0x34, 0xd7, 0x1d, 0x18, 0x54, 0x1d, 0x25, 0x79, 0x08, 0x9d, 0x0b, 0x2f, 0x70, 0xac, 0xa1,
	0xef, 0x85, 0xd2, 0xc4, 0x25, 0xaf, 0xcd, 0x6d, 0x37, 0x5a, 0xdb, 0x32, 0x54, 0xce, 0x79, 0xe0,
	0x85, 0x98, 0x1f, 0x58, 0x76, 0x18, 0x51, 0x57, 0x66, 0xe4, 0x35, 0x23, 0x1d, 0xeb, 0xfb, 0xb0,
	0x72, 0xd5, 0x11, 0xbf, 0xc9, 0xe2, 0xbf, 0x5f, 0x3c, 0x8a, 0x89, 0xc3, 0x24, 0xf7, 0xa1, 0x93,
	0x5c, 0x27, 0x51, 0x74, 0x16, 0xee, 0x93, 0x2a, 0xef, 0x53, 0xa8, 0xdb, 0x49, 0x4a, 0x24, 0x5b,
	0x32, 0x6f, 0x94, 0x4f, 0xb6, 0x72, 0x9d, 0x9f, 0x92, 0xcf, 0x88, 0xc6, 0xef, 0xd5, 0x83, 0xdf,
	0x80, 0x96, 0xf8, 0xb0, 0x88, 0xdc, 0x02, 0x10, 0x4f, 0x45, 0xbc, 0xe8, 0x81, 0xea, 0xf0, 0x97,
	0x5e, 0xcc, 0xd2, 0x14, 0x44, 0x0f, 0x1b, 0x77, 0x81, 0x71, 0x45, 0xab, 0x91, 0x2e, 0xb4, 0xe5,
	0x97, 0xa1, 0x5a, 0x5d, 0xcc, 0xc9, 0xcf, 0xdd, 0xb4, 0x06, 0xe9, 0x40, 0x13, 0x11, 0xd7, 0xd2,
	0x9a, 0x08, 0x32, 0xaf, 0x63, 0x3b, 0xd2, 0x5a, 0x28, 0x10, 0xbb, 0xaf, 0x5c, 0xef, 0xc2, 0xd5,
	0xcc, 0x07, 0x7f, 0xa3, 0x00, 0x64, 0x89, 0x23, 0xb9, 0x03, 0xb3, 0xd9, 0xa8, 0x64, 0x19, 0x2f,
	0x59, 0x70, 0xb9, 0x4d, 0xc3, 0x4b, 0x81, 0x5a, 0xfc, 0xa9, 0x46, 0x00, 0x5a, 0xfb, 0xcc, 0xb2,
	0xe3, 0x91, 0x56, 0xe7, 0x1f, 0xc1, 0xf0, 0xe7, 0x5d, 0x1a, 0x58, 0x5a, 0x03, 0xb9, 0xf8, 0x53,
	0x13, 0xb9, 0xf0, 0x89, 0x05, 0x5a, 0x2b, 0xd1, 0xc4, 0x67, 0xda, 0x64, 0x0e, 0x81, 0x92, 0xd1,
	0xe8, 0xa5, 0x8d, 0x45, 0xa9, 0xa6, 0xa2, 0x12, 0x4e, 0xd8, 0xf7, 0x5c, 0x76, 0xa9, 0x75, 0x52,
	0x86, 0x3d, 0x37, 0xa4, 0x2e, 0xd3, 0xe0, 0xc1, 0xcb, 0x24, 0xd9, 0xc7, 0xbc, 0x1c, 0x17, 0x9d,
	0x8d, 0x4a, 0x5e, 0x4f, 0xa7, 0x5f, 0x14, 0xb8, 0x88, 0xb6, 0x3d, 0x50, 0x37, 0xbd, 0x91, 0x1f,
	0x47, 0x2c, 0xd0, 0x6a, 0x38, 0x4a, 0xfc, 0x45, 0xab, 0x3f, 0xf8, 0x14, 0x9a, 0x3c, 0x06, 0x63,
	0xa9, 0xce, 0x1f, 0x8a, 0xda, 0xde, 0x82, 0x1b, 0xcf, 0x63, 0xd3, 0x61, 0x34, 0x10, 0x6f, 0x21,
	0xb7, 0x58, 0xc4, 0xcc, 0x88, 0x9b, 0xe5, 0x06, 0xcc, 0x3f, 0xbf, 0xb4, 0xe2, 0xf0, 0x07, 0x5e,
	0x30, 0x4a, 0xc9, 0xb5, 0x07, 0x06, 0xb4, 0xa4, 0x0f, 0xdd, 0x02, 0x10, 0x4f, 0x45, 0xa5, 0x5d,
	0x68, 0xbf, 0xb4, 0xcd, 0xc8, 0x0b, 0xf0, 0x58, 0x01, 0x5a, 0x5b, 0x0c, 0x63, 0xb5, 0x56, 0x23,
	0x6d, 0xa8, 0x7f, 0x66, 0x4b, 0xb3, 0x1e, 0xb9, 0x16, 0x33, 0x6d, 0xb4, 0x65, 0x63, 0xe3, 0xee,
	0xbf, 0x7c, 0xb1, 0xa4, 0xfc, 0xe4, 0x8b, 0x25, 0xe5, 0xbf, 0xbe, 0x58, 0x52, 0x7e, 0xef, 0xcb,
	0xa5, 0x99, 0x9f, 0x7c, 0xb9, 0x34, 0xf3, 0x9f, 0x5f, 0x2e, 0xcd, 0xfc, 0x6a, 0x9d, 0xfa, 0xf6,
	0x71, 0x8b, 0xff, 0x7f, 0xc8, 0x77, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x49, 0xc7, 0xcd,
	0xbd, 0x32, 0x00, 0x00,
}
