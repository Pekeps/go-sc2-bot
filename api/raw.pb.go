// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raw.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DisplayType int32

const (
	DisplayType_DisplayType_not_specified DisplayType = 0
	DisplayType_Visible                   DisplayType = 1
	DisplayType_Snapshot                  DisplayType = 2
	DisplayType_Hidden                    DisplayType = 3
)

var DisplayType_name = map[int32]string{
	0: "DisplayType_not_specified",
	1: "Visible",
	2: "Snapshot",
	3: "Hidden",
}
var DisplayType_value = map[string]int32{
	"DisplayType_not_specified": 0,
	"Visible":                   1,
	"Snapshot":                  2,
	"Hidden":                    3,
}

func (x DisplayType) String() string {
	return proto.EnumName(DisplayType_name, int32(x))
}
func (DisplayType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{0}
}

type Alliance int32

const (
	Alliance_Alliance_not_specified Alliance = 0
	Alliance_Self                   Alliance = 1
	Alliance_Ally                   Alliance = 2
	Alliance_Neutral                Alliance = 3
	Alliance_Enemy                  Alliance = 4
)

var Alliance_name = map[int32]string{
	0: "Alliance_not_specified",
	1: "Self",
	2: "Ally",
	3: "Neutral",
	4: "Enemy",
}
var Alliance_value = map[string]int32{
	"Alliance_not_specified": 0,
	"Self":                   1,
	"Ally":                   2,
	"Neutral":                3,
	"Enemy":                  4,
}

func (x Alliance) String() string {
	return proto.EnumName(Alliance_name, int32(x))
}
func (Alliance) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{1}
}

type CloakState int32

const (
	CloakState_CloakState_not_specified CloakState = 0
	CloakState_Cloaked                  CloakState = 1
	CloakState_CloakedDetected          CloakState = 2
	CloakState_NotCloaked               CloakState = 3
)

var CloakState_name = map[int32]string{
	0: "CloakState_not_specified",
	1: "Cloaked",
	2: "CloakedDetected",
	3: "NotCloaked",
}
var CloakState_value = map[string]int32{
	"CloakState_not_specified": 0,
	"Cloaked":                  1,
	"CloakedDetected":          2,
	"NotCloaked":               3,
}

func (x CloakState) String() string {
	return proto.EnumName(CloakState_name, int32(x))
}
func (CloakState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{2}
}

type StartRaw struct {
	MapSize        *Size2DI    `protobuf:"bytes,1,opt,name=map_size,json=mapSize" json:"map_size,omitempty"`
	PathingGrid    *ImageData  `protobuf:"bytes,2,opt,name=pathing_grid,json=pathingGrid" json:"pathing_grid,omitempty"`
	TerrainHeight  *ImageData  `protobuf:"bytes,3,opt,name=terrain_height,json=terrainHeight" json:"terrain_height,omitempty"`
	PlacementGrid  *ImageData  `protobuf:"bytes,4,opt,name=placement_grid,json=placementGrid" json:"placement_grid,omitempty"`
	PlayableArea   *RectangleI `protobuf:"bytes,5,opt,name=playable_area,json=playableArea" json:"playable_area,omitempty"`
	StartLocations []*Point2D  `protobuf:"bytes,6,rep,name=start_locations,json=startLocations" json:"start_locations,omitempty"`
}

func (m *StartRaw) Reset()         { *m = StartRaw{} }
func (m *StartRaw) String() string { return proto.CompactTextString(m) }
func (*StartRaw) ProtoMessage()    {}
func (*StartRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{0}
}
func (m *StartRaw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartRaw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StartRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRaw.Merge(dst, src)
}
func (m *StartRaw) XXX_Size() int {
	return m.Size()
}
func (m *StartRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRaw.DiscardUnknown(m)
}

var xxx_messageInfo_StartRaw proto.InternalMessageInfo

func (m *StartRaw) GetMapSize() *Size2DI {
	if m != nil {
		return m.MapSize
	}
	return nil
}

func (m *StartRaw) GetPathingGrid() *ImageData {
	if m != nil {
		return m.PathingGrid
	}
	return nil
}

func (m *StartRaw) GetTerrainHeight() *ImageData {
	if m != nil {
		return m.TerrainHeight
	}
	return nil
}

func (m *StartRaw) GetPlacementGrid() *ImageData {
	if m != nil {
		return m.PlacementGrid
	}
	return nil
}

func (m *StartRaw) GetPlayableArea() *RectangleI {
	if m != nil {
		return m.PlayableArea
	}
	return nil
}

func (m *StartRaw) GetStartLocations() []*Point2D {
	if m != nil {
		return m.StartLocations
	}
	return nil
}

type ObservationRaw struct {
	Player   *PlayerRaw `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	Units    []*Unit    `protobuf:"bytes,2,rep,name=units" json:"units,omitempty"`
	MapState *MapState  `protobuf:"bytes,3,opt,name=map_state,json=mapState" json:"map_state,omitempty"`
	Event    *Event     `protobuf:"bytes,4,opt,name=event" json:"event,omitempty"`
	Effects  []*Effect  `protobuf:"bytes,5,rep,name=effects" json:"effects,omitempty"`
}

func (m *ObservationRaw) Reset()         { *m = ObservationRaw{} }
func (m *ObservationRaw) String() string { return proto.CompactTextString(m) }
func (*ObservationRaw) ProtoMessage()    {}
func (*ObservationRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{1}
}
func (m *ObservationRaw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObservationRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObservationRaw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ObservationRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservationRaw.Merge(dst, src)
}
func (m *ObservationRaw) XXX_Size() int {
	return m.Size()
}
func (m *ObservationRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservationRaw.DiscardUnknown(m)
}

var xxx_messageInfo_ObservationRaw proto.InternalMessageInfo

func (m *ObservationRaw) GetPlayer() *PlayerRaw {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *ObservationRaw) GetUnits() []*Unit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *ObservationRaw) GetMapState() *MapState {
	if m != nil {
		return m.MapState
	}
	return nil
}

func (m *ObservationRaw) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ObservationRaw) GetEffects() []*Effect {
	if m != nil {
		return m.Effects
	}
	return nil
}

type PowerSource struct {
	Pos    *Point  `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
	Radius float32 `protobuf:"fixed32,2,opt,name=radius,proto3" json:"radius,omitempty"`
	Tag    uint64  `protobuf:"varint,3,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (m *PowerSource) Reset()         { *m = PowerSource{} }
func (m *PowerSource) String() string { return proto.CompactTextString(m) }
func (*PowerSource) ProtoMessage()    {}
func (*PowerSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{2}
}
func (m *PowerSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PowerSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PowerSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PowerSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PowerSource.Merge(dst, src)
}
func (m *PowerSource) XXX_Size() int {
	return m.Size()
}
func (m *PowerSource) XXX_DiscardUnknown() {
	xxx_messageInfo_PowerSource.DiscardUnknown(m)
}

var xxx_messageInfo_PowerSource proto.InternalMessageInfo

func (m *PowerSource) GetPos() *Point {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *PowerSource) GetRadius() float32 {
	if m != nil {
		return m.Radius
	}
	return 0
}

func (m *PowerSource) GetTag() uint64 {
	if m != nil {
		return m.Tag
	}
	return 0
}

type PlayerRaw struct {
	PowerSources []*PowerSource `protobuf:"bytes,1,rep,name=power_sources,json=powerSources" json:"power_sources,omitempty"`
	Camera       *Point         `protobuf:"bytes,2,opt,name=camera" json:"camera,omitempty"`
	UpgradeIds   []uint32       `protobuf:"varint,3,rep,packed,name=upgrade_ids,json=upgradeIds" json:"upgrade_ids,omitempty"`
}

func (m *PlayerRaw) Reset()         { *m = PlayerRaw{} }
func (m *PlayerRaw) String() string { return proto.CompactTextString(m) }
func (*PlayerRaw) ProtoMessage()    {}
func (*PlayerRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{3}
}
func (m *PlayerRaw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerRaw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerRaw.Merge(dst, src)
}
func (m *PlayerRaw) XXX_Size() int {
	return m.Size()
}
func (m *PlayerRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerRaw.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerRaw proto.InternalMessageInfo

func (m *PlayerRaw) GetPowerSources() []*PowerSource {
	if m != nil {
		return m.PowerSources
	}
	return nil
}

func (m *PlayerRaw) GetCamera() *Point {
	if m != nil {
		return m.Camera
	}
	return nil
}

func (m *PlayerRaw) GetUpgradeIds() []uint32 {
	if m != nil {
		return m.UpgradeIds
	}
	return nil
}

type UnitOrder struct {
	AbilityId uint32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId,proto3" json:"ability_id,omitempty"`
	// Types that are valid to be assigned to Target:
	//	*UnitOrder_TargetWorldSpacePos
	//	*UnitOrder_TargetUnitTag
	Target   isUnitOrder_Target `protobuf_oneof:"target"`
	Progress float32            `protobuf:"fixed32,4,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (m *UnitOrder) Reset()         { *m = UnitOrder{} }
func (m *UnitOrder) String() string { return proto.CompactTextString(m) }
func (*UnitOrder) ProtoMessage()    {}
func (*UnitOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{4}
}
func (m *UnitOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnitOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnitOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnitOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitOrder.Merge(dst, src)
}
func (m *UnitOrder) XXX_Size() int {
	return m.Size()
}
func (m *UnitOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitOrder.DiscardUnknown(m)
}

var xxx_messageInfo_UnitOrder proto.InternalMessageInfo

type isUnitOrder_Target interface {
	isUnitOrder_Target()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UnitOrder_TargetWorldSpacePos struct {
	TargetWorldSpacePos *Point `protobuf:"bytes,2,opt,name=target_world_space_pos,json=targetWorldSpacePos,oneof"`
}
type UnitOrder_TargetUnitTag struct {
	TargetUnitTag uint64 `protobuf:"varint,3,opt,name=target_unit_tag,json=targetUnitTag,proto3,oneof"`
}

func (*UnitOrder_TargetWorldSpacePos) isUnitOrder_Target() {}
func (*UnitOrder_TargetUnitTag) isUnitOrder_Target()       {}

func (m *UnitOrder) GetTarget() isUnitOrder_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *UnitOrder) GetAbilityId() uint32 {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func (m *UnitOrder) GetTargetWorldSpacePos() *Point {
	if x, ok := m.GetTarget().(*UnitOrder_TargetWorldSpacePos); ok {
		return x.TargetWorldSpacePos
	}
	return nil
}

func (m *UnitOrder) GetTargetUnitTag() uint64 {
	if x, ok := m.GetTarget().(*UnitOrder_TargetUnitTag); ok {
		return x.TargetUnitTag
	}
	return 0
}

func (m *UnitOrder) GetProgress() float32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UnitOrder) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UnitOrder_OneofMarshaler, _UnitOrder_OneofUnmarshaler, _UnitOrder_OneofSizer, []interface{}{
		(*UnitOrder_TargetWorldSpacePos)(nil),
		(*UnitOrder_TargetUnitTag)(nil),
	}
}

func _UnitOrder_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UnitOrder)
	// target
	switch x := m.Target.(type) {
	case *UnitOrder_TargetWorldSpacePos:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TargetWorldSpacePos); err != nil {
			return err
		}
	case *UnitOrder_TargetUnitTag:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.TargetUnitTag))
	case nil:
	default:
		return fmt.Errorf("UnitOrder.Target has unexpected type %T", x)
	}
	return nil
}

func _UnitOrder_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UnitOrder)
	switch tag {
	case 2: // target.target_world_space_pos
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Point)
		err := b.DecodeMessage(msg)
		m.Target = &UnitOrder_TargetWorldSpacePos{msg}
		return true, err
	case 3: // target.target_unit_tag
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Target = &UnitOrder_TargetUnitTag{x}
		return true, err
	default:
		return false, nil
	}
}

func _UnitOrder_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UnitOrder)
	// target
	switch x := m.Target.(type) {
	case *UnitOrder_TargetWorldSpacePos:
		s := proto.Size(x.TargetWorldSpacePos)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UnitOrder_TargetUnitTag:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.TargetUnitTag))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PassengerUnit struct {
	Tag       uint64  `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Health    float32 `protobuf:"fixed32,2,opt,name=health,proto3" json:"health,omitempty"`
	HealthMax float32 `protobuf:"fixed32,3,opt,name=health_max,json=healthMax,proto3" json:"health_max,omitempty"`
	Shield    float32 `protobuf:"fixed32,4,opt,name=shield,proto3" json:"shield,omitempty"`
	ShieldMax float32 `protobuf:"fixed32,7,opt,name=shield_max,json=shieldMax,proto3" json:"shield_max,omitempty"`
	Energy    float32 `protobuf:"fixed32,5,opt,name=energy,proto3" json:"energy,omitempty"`
	EnergyMax float32 `protobuf:"fixed32,8,opt,name=energy_max,json=energyMax,proto3" json:"energy_max,omitempty"`
	UnitType  uint32  `protobuf:"varint,6,opt,name=unit_type,json=unitType,proto3" json:"unit_type,omitempty"`
}

func (m *PassengerUnit) Reset()         { *m = PassengerUnit{} }
func (m *PassengerUnit) String() string { return proto.CompactTextString(m) }
func (*PassengerUnit) ProtoMessage()    {}
func (*PassengerUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{5}
}
func (m *PassengerUnit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PassengerUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PassengerUnit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PassengerUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PassengerUnit.Merge(dst, src)
}
func (m *PassengerUnit) XXX_Size() int {
	return m.Size()
}
func (m *PassengerUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_PassengerUnit.DiscardUnknown(m)
}

var xxx_messageInfo_PassengerUnit proto.InternalMessageInfo

func (m *PassengerUnit) GetTag() uint64 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *PassengerUnit) GetHealth() float32 {
	if m != nil {
		return m.Health
	}
	return 0
}

func (m *PassengerUnit) GetHealthMax() float32 {
	if m != nil {
		return m.HealthMax
	}
	return 0
}

func (m *PassengerUnit) GetShield() float32 {
	if m != nil {
		return m.Shield
	}
	return 0
}

func (m *PassengerUnit) GetShieldMax() float32 {
	if m != nil {
		return m.ShieldMax
	}
	return 0
}

func (m *PassengerUnit) GetEnergy() float32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *PassengerUnit) GetEnergyMax() float32 {
	if m != nil {
		return m.EnergyMax
	}
	return 0
}

func (m *PassengerUnit) GetUnitType() uint32 {
	if m != nil {
		return m.UnitType
	}
	return 0
}

type Unit struct {
	// Fields are populated based on type/alliance
	DisplayType   DisplayType `protobuf:"varint,1,opt,name=display_type,json=displayType,proto3,enum=SC2APIProtocol.DisplayType" json:"display_type,omitempty"`
	Alliance      Alliance    `protobuf:"varint,2,opt,name=alliance,proto3,enum=SC2APIProtocol.Alliance" json:"alliance,omitempty"`
	Tag           uint64      `protobuf:"varint,3,opt,name=tag,proto3" json:"tag,omitempty"`
	UnitType      uint32      `protobuf:"varint,4,opt,name=unit_type,json=unitType,proto3" json:"unit_type,omitempty"`
	Owner         int32       `protobuf:"varint,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Pos           *Point      `protobuf:"bytes,6,opt,name=pos" json:"pos,omitempty"`
	Facing        float32     `protobuf:"fixed32,7,opt,name=facing,proto3" json:"facing,omitempty"`
	Radius        float32     `protobuf:"fixed32,8,opt,name=radius,proto3" json:"radius,omitempty"`
	BuildProgress float32     `protobuf:"fixed32,9,opt,name=build_progress,json=buildProgress,proto3" json:"build_progress,omitempty"`
	Cloak         CloakState  `protobuf:"varint,10,opt,name=cloak,proto3,enum=SC2APIProtocol.CloakState" json:"cloak,omitempty"`
	DetectRange   float32     `protobuf:"fixed32,31,opt,name=detect_range,json=detectRange,proto3" json:"detect_range,omitempty"`
	RadarRange    float32     `protobuf:"fixed32,32,opt,name=radar_range,json=radarRange,proto3" json:"radar_range,omitempty"`
	IsSelected    bool        `protobuf:"varint,11,opt,name=is_selected,json=isSelected,proto3" json:"is_selected,omitempty"`
	IsOnScreen    bool        `protobuf:"varint,12,opt,name=is_on_screen,json=isOnScreen,proto3" json:"is_on_screen,omitempty"`
	IsBlip        bool        `protobuf:"varint,13,opt,name=is_blip,json=isBlip,proto3" json:"is_blip,omitempty"`
	IsPowered     bool        `protobuf:"varint,35,opt,name=is_powered,json=isPowered,proto3" json:"is_powered,omitempty"`
	// Not populated for snapshots
	Health          float32 `protobuf:"fixed32,14,opt,name=health,proto3" json:"health,omitempty"`
	HealthMax       float32 `protobuf:"fixed32,15,opt,name=health_max,json=healthMax,proto3" json:"health_max,omitempty"`
	Shield          float32 `protobuf:"fixed32,16,opt,name=shield,proto3" json:"shield,omitempty"`
	ShieldMax       float32 `protobuf:"fixed32,36,opt,name=shield_max,json=shieldMax,proto3" json:"shield_max,omitempty"`
	Energy          float32 `protobuf:"fixed32,17,opt,name=energy,proto3" json:"energy,omitempty"`
	EnergyMax       float32 `protobuf:"fixed32,37,opt,name=energy_max,json=energyMax,proto3" json:"energy_max,omitempty"`
	MineralContents int32   `protobuf:"varint,18,opt,name=mineral_contents,json=mineralContents,proto3" json:"mineral_contents,omitempty"`
	VespeneContents int32   `protobuf:"varint,19,opt,name=vespene_contents,json=vespeneContents,proto3" json:"vespene_contents,omitempty"`
	IsFlying        bool    `protobuf:"varint,20,opt,name=is_flying,json=isFlying,proto3" json:"is_flying,omitempty"`
	IsBurrowed      bool    `protobuf:"varint,21,opt,name=is_burrowed,json=isBurrowed,proto3" json:"is_burrowed,omitempty"`
	// Not populated for enemies
	Orders             []*UnitOrder     `protobuf:"bytes,22,rep,name=orders" json:"orders,omitempty"`
	AddOnTag           uint64           `protobuf:"varint,23,opt,name=add_on_tag,json=addOnTag,proto3" json:"add_on_tag,omitempty"`
	Passengers         []*PassengerUnit `protobuf:"bytes,24,rep,name=passengers" json:"passengers,omitempty"`
	CargoSpaceTaken    int32            `protobuf:"varint,25,opt,name=cargo_space_taken,json=cargoSpaceTaken,proto3" json:"cargo_space_taken,omitempty"`
	CargoSpaceMax      int32            `protobuf:"varint,26,opt,name=cargo_space_max,json=cargoSpaceMax,proto3" json:"cargo_space_max,omitempty"`
	BuffIds            []uint32         `protobuf:"varint,27,rep,packed,name=buff_ids,json=buffIds" json:"buff_ids,omitempty"`
	AssignedHarvesters int32            `protobuf:"varint,28,opt,name=assigned_harvesters,json=assignedHarvesters,proto3" json:"assigned_harvesters,omitempty"`
	IdealHarvesters    int32            `protobuf:"varint,29,opt,name=ideal_harvesters,json=idealHarvesters,proto3" json:"ideal_harvesters,omitempty"`
	WeaponCooldown     float32          `protobuf:"fixed32,30,opt,name=weapon_cooldown,json=weaponCooldown,proto3" json:"weapon_cooldown,omitempty"`
	EngagedTargetTag   uint64           `protobuf:"varint,34,opt,name=engaged_target_tag,json=engagedTargetTag,proto3" json:"engaged_target_tag,omitempty"`
}

func (m *Unit) Reset()         { *m = Unit{} }
func (m *Unit) String() string { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()    {}
func (*Unit) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{6}
}
func (m *Unit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Unit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Unit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Unit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unit.Merge(dst, src)
}
func (m *Unit) XXX_Size() int {
	return m.Size()
}
func (m *Unit) XXX_DiscardUnknown() {
	xxx_messageInfo_Unit.DiscardUnknown(m)
}

var xxx_messageInfo_Unit proto.InternalMessageInfo

func (m *Unit) GetDisplayType() DisplayType {
	if m != nil {
		return m.DisplayType
	}
	return DisplayType_DisplayType_not_specified
}

func (m *Unit) GetAlliance() Alliance {
	if m != nil {
		return m.Alliance
	}
	return Alliance_Alliance_not_specified
}

func (m *Unit) GetTag() uint64 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *Unit) GetUnitType() uint32 {
	if m != nil {
		return m.UnitType
	}
	return 0
}

func (m *Unit) GetOwner() int32 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *Unit) GetPos() *Point {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Unit) GetFacing() float32 {
	if m != nil {
		return m.Facing
	}
	return 0
}

func (m *Unit) GetRadius() float32 {
	if m != nil {
		return m.Radius
	}
	return 0
}

func (m *Unit) GetBuildProgress() float32 {
	if m != nil {
		return m.BuildProgress
	}
	return 0
}

func (m *Unit) GetCloak() CloakState {
	if m != nil {
		return m.Cloak
	}
	return CloakState_CloakState_not_specified
}

func (m *Unit) GetDetectRange() float32 {
	if m != nil {
		return m.DetectRange
	}
	return 0
}

func (m *Unit) GetRadarRange() float32 {
	if m != nil {
		return m.RadarRange
	}
	return 0
}

func (m *Unit) GetIsSelected() bool {
	if m != nil {
		return m.IsSelected
	}
	return false
}

func (m *Unit) GetIsOnScreen() bool {
	if m != nil {
		return m.IsOnScreen
	}
	return false
}

func (m *Unit) GetIsBlip() bool {
	if m != nil {
		return m.IsBlip
	}
	return false
}

func (m *Unit) GetIsPowered() bool {
	if m != nil {
		return m.IsPowered
	}
	return false
}

func (m *Unit) GetHealth() float32 {
	if m != nil {
		return m.Health
	}
	return 0
}

func (m *Unit) GetHealthMax() float32 {
	if m != nil {
		return m.HealthMax
	}
	return 0
}

func (m *Unit) GetShield() float32 {
	if m != nil {
		return m.Shield
	}
	return 0
}

func (m *Unit) GetShieldMax() float32 {
	if m != nil {
		return m.ShieldMax
	}
	return 0
}

func (m *Unit) GetEnergy() float32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *Unit) GetEnergyMax() float32 {
	if m != nil {
		return m.EnergyMax
	}
	return 0
}

func (m *Unit) GetMineralContents() int32 {
	if m != nil {
		return m.MineralContents
	}
	return 0
}

func (m *Unit) GetVespeneContents() int32 {
	if m != nil {
		return m.VespeneContents
	}
	return 0
}

func (m *Unit) GetIsFlying() bool {
	if m != nil {
		return m.IsFlying
	}
	return false
}

func (m *Unit) GetIsBurrowed() bool {
	if m != nil {
		return m.IsBurrowed
	}
	return false
}

func (m *Unit) GetOrders() []*UnitOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *Unit) GetAddOnTag() uint64 {
	if m != nil {
		return m.AddOnTag
	}
	return 0
}

func (m *Unit) GetPassengers() []*PassengerUnit {
	if m != nil {
		return m.Passengers
	}
	return nil
}

func (m *Unit) GetCargoSpaceTaken() int32 {
	if m != nil {
		return m.CargoSpaceTaken
	}
	return 0
}

func (m *Unit) GetCargoSpaceMax() int32 {
	if m != nil {
		return m.CargoSpaceMax
	}
	return 0
}

func (m *Unit) GetBuffIds() []uint32 {
	if m != nil {
		return m.BuffIds
	}
	return nil
}

func (m *Unit) GetAssignedHarvesters() int32 {
	if m != nil {
		return m.AssignedHarvesters
	}
	return 0
}

func (m *Unit) GetIdealHarvesters() int32 {
	if m != nil {
		return m.IdealHarvesters
	}
	return 0
}

func (m *Unit) GetWeaponCooldown() float32 {
	if m != nil {
		return m.WeaponCooldown
	}
	return 0
}

func (m *Unit) GetEngagedTargetTag() uint64 {
	if m != nil {
		return m.EngagedTargetTag
	}
	return 0
}

type MapState struct {
	Visibility *ImageData `protobuf:"bytes,1,opt,name=visibility" json:"visibility,omitempty"`
	Creep      *ImageData `protobuf:"bytes,2,opt,name=creep" json:"creep,omitempty"`
}

func (m *MapState) Reset()         { *m = MapState{} }
func (m *MapState) String() string { return proto.CompactTextString(m) }
func (*MapState) ProtoMessage()    {}
func (*MapState) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{7}
}
func (m *MapState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MapState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapState.Merge(dst, src)
}
func (m *MapState) XXX_Size() int {
	return m.Size()
}
func (m *MapState) XXX_DiscardUnknown() {
	xxx_messageInfo_MapState.DiscardUnknown(m)
}

var xxx_messageInfo_MapState proto.InternalMessageInfo

func (m *MapState) GetVisibility() *ImageData {
	if m != nil {
		return m.Visibility
	}
	return nil
}

func (m *MapState) GetCreep() *ImageData {
	if m != nil {
		return m.Creep
	}
	return nil
}

type Event struct {
	DeadUnits []uint64 `protobuf:"varint,1,rep,packed,name=dead_units,json=deadUnits" json:"dead_units,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{8}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetDeadUnits() []uint64 {
	if m != nil {
		return m.DeadUnits
	}
	return nil
}

type Effect struct {
	EffectId uint32     `protobuf:"varint,1,opt,name=effect_id,json=effectId,proto3" json:"effect_id,omitempty"`
	Pos      []*Point2D `protobuf:"bytes,2,rep,name=pos" json:"pos,omitempty"`
}

func (m *Effect) Reset()         { *m = Effect{} }
func (m *Effect) String() string { return proto.CompactTextString(m) }
func (*Effect) ProtoMessage()    {}
func (*Effect) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{9}
}
func (m *Effect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Effect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Effect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Effect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Effect.Merge(dst, src)
}
func (m *Effect) XXX_Size() int {
	return m.Size()
}
func (m *Effect) XXX_DiscardUnknown() {
	xxx_messageInfo_Effect.DiscardUnknown(m)
}

var xxx_messageInfo_Effect proto.InternalMessageInfo

func (m *Effect) GetEffectId() uint32 {
	if m != nil {
		return m.EffectId
	}
	return 0
}

func (m *Effect) GetPos() []*Point2D {
	if m != nil {
		return m.Pos
	}
	return nil
}

type ActionRaw struct {
	// Types that are valid to be assigned to Action:
	//	*ActionRaw_UnitCommand
	//	*ActionRaw_CameraMove
	//	*ActionRaw_ToggleAutocast
	Action isActionRaw_Action `protobuf_oneof:"action"`
}

func (m *ActionRaw) Reset()         { *m = ActionRaw{} }
func (m *ActionRaw) String() string { return proto.CompactTextString(m) }
func (*ActionRaw) ProtoMessage()    {}
func (*ActionRaw) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{10}
}
func (m *ActionRaw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionRaw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionRaw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionRaw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionRaw.Merge(dst, src)
}
func (m *ActionRaw) XXX_Size() int {
	return m.Size()
}
func (m *ActionRaw) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionRaw.DiscardUnknown(m)
}

var xxx_messageInfo_ActionRaw proto.InternalMessageInfo

type isActionRaw_Action interface {
	isActionRaw_Action()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActionRaw_UnitCommand struct {
	UnitCommand *ActionRawUnitCommand `protobuf:"bytes,1,opt,name=unit_command,json=unitCommand,oneof"`
}
type ActionRaw_CameraMove struct {
	CameraMove *ActionRawCameraMove `protobuf:"bytes,2,opt,name=camera_move,json=cameraMove,oneof"`
}
type ActionRaw_ToggleAutocast struct {
	ToggleAutocast *ActionRawToggleAutocast `protobuf:"bytes,3,opt,name=toggle_autocast,json=toggleAutocast,oneof"`
}

func (*ActionRaw_UnitCommand) isActionRaw_Action()    {}
func (*ActionRaw_CameraMove) isActionRaw_Action()     {}
func (*ActionRaw_ToggleAutocast) isActionRaw_Action() {}

func (m *ActionRaw) GetAction() isActionRaw_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ActionRaw) GetUnitCommand() *ActionRawUnitCommand {
	if x, ok := m.GetAction().(*ActionRaw_UnitCommand); ok {
		return x.UnitCommand
	}
	return nil
}

func (m *ActionRaw) GetCameraMove() *ActionRawCameraMove {
	if x, ok := m.GetAction().(*ActionRaw_CameraMove); ok {
		return x.CameraMove
	}
	return nil
}

func (m *ActionRaw) GetToggleAutocast() *ActionRawToggleAutocast {
	if x, ok := m.GetAction().(*ActionRaw_ToggleAutocast); ok {
		return x.ToggleAutocast
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionRaw) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionRaw_OneofMarshaler, _ActionRaw_OneofUnmarshaler, _ActionRaw_OneofSizer, []interface{}{
		(*ActionRaw_UnitCommand)(nil),
		(*ActionRaw_CameraMove)(nil),
		(*ActionRaw_ToggleAutocast)(nil),
	}
}

func _ActionRaw_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionRaw)
	// action
	switch x := m.Action.(type) {
	case *ActionRaw_UnitCommand:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnitCommand); err != nil {
			return err
		}
	case *ActionRaw_CameraMove:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CameraMove); err != nil {
			return err
		}
	case *ActionRaw_ToggleAutocast:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ToggleAutocast); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ActionRaw.Action has unexpected type %T", x)
	}
	return nil
}

func _ActionRaw_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionRaw)
	switch tag {
	case 1: // action.unit_command
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionRawUnitCommand)
		err := b.DecodeMessage(msg)
		m.Action = &ActionRaw_UnitCommand{msg}
		return true, err
	case 2: // action.camera_move
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionRawCameraMove)
		err := b.DecodeMessage(msg)
		m.Action = &ActionRaw_CameraMove{msg}
		return true, err
	case 3: // action.toggle_autocast
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionRawToggleAutocast)
		err := b.DecodeMessage(msg)
		m.Action = &ActionRaw_ToggleAutocast{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ActionRaw_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionRaw)
	// action
	switch x := m.Action.(type) {
	case *ActionRaw_UnitCommand:
		s := proto.Size(x.UnitCommand)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionRaw_CameraMove:
		s := proto.Size(x.CameraMove)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionRaw_ToggleAutocast:
		s := proto.Size(x.ToggleAutocast)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActionRawUnitCommand struct {
	AbilityId int32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId,proto3" json:"ability_id,omitempty"`
	// Types that are valid to be assigned to Target:
	//	*ActionRawUnitCommand_TargetWorldSpacePos
	//	*ActionRawUnitCommand_TargetUnitTag
	Target       isActionRawUnitCommand_Target `protobuf_oneof:"target"`
	UnitTags     []uint64                      `protobuf:"varint,4,rep,packed,name=unit_tags,json=unitTags" json:"unit_tags,omitempty"`
	QueueCommand bool                          `protobuf:"varint,5,opt,name=queue_command,json=queueCommand,proto3" json:"queue_command,omitempty"`
}

func (m *ActionRawUnitCommand) Reset()         { *m = ActionRawUnitCommand{} }
func (m *ActionRawUnitCommand) String() string { return proto.CompactTextString(m) }
func (*ActionRawUnitCommand) ProtoMessage()    {}
func (*ActionRawUnitCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{11}
}
func (m *ActionRawUnitCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionRawUnitCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionRawUnitCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionRawUnitCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionRawUnitCommand.Merge(dst, src)
}
func (m *ActionRawUnitCommand) XXX_Size() int {
	return m.Size()
}
func (m *ActionRawUnitCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionRawUnitCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ActionRawUnitCommand proto.InternalMessageInfo

type isActionRawUnitCommand_Target interface {
	isActionRawUnitCommand_Target()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActionRawUnitCommand_TargetWorldSpacePos struct {
	TargetWorldSpacePos *Point2D `protobuf:"bytes,2,opt,name=target_world_space_pos,json=targetWorldSpacePos,oneof"`
}
type ActionRawUnitCommand_TargetUnitTag struct {
	TargetUnitTag uint64 `protobuf:"varint,3,opt,name=target_unit_tag,json=targetUnitTag,proto3,oneof"`
}

func (*ActionRawUnitCommand_TargetWorldSpacePos) isActionRawUnitCommand_Target() {}
func (*ActionRawUnitCommand_TargetUnitTag) isActionRawUnitCommand_Target()       {}

func (m *ActionRawUnitCommand) GetTarget() isActionRawUnitCommand_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ActionRawUnitCommand) GetAbilityId() int32 {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func (m *ActionRawUnitCommand) GetTargetWorldSpacePos() *Point2D {
	if x, ok := m.GetTarget().(*ActionRawUnitCommand_TargetWorldSpacePos); ok {
		return x.TargetWorldSpacePos
	}
	return nil
}

func (m *ActionRawUnitCommand) GetTargetUnitTag() uint64 {
	if x, ok := m.GetTarget().(*ActionRawUnitCommand_TargetUnitTag); ok {
		return x.TargetUnitTag
	}
	return 0
}

func (m *ActionRawUnitCommand) GetUnitTags() []uint64 {
	if m != nil {
		return m.UnitTags
	}
	return nil
}

func (m *ActionRawUnitCommand) GetQueueCommand() bool {
	if m != nil {
		return m.QueueCommand
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionRawUnitCommand) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionRawUnitCommand_OneofMarshaler, _ActionRawUnitCommand_OneofUnmarshaler, _ActionRawUnitCommand_OneofSizer, []interface{}{
		(*ActionRawUnitCommand_TargetWorldSpacePos)(nil),
		(*ActionRawUnitCommand_TargetUnitTag)(nil),
	}
}

func _ActionRawUnitCommand_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionRawUnitCommand)
	// target
	switch x := m.Target.(type) {
	case *ActionRawUnitCommand_TargetWorldSpacePos:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TargetWorldSpacePos); err != nil {
			return err
		}
	case *ActionRawUnitCommand_TargetUnitTag:
		_ = b.EncodeVarint(3<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.TargetUnitTag))
	case nil:
	default:
		return fmt.Errorf("ActionRawUnitCommand.Target has unexpected type %T", x)
	}
	return nil
}

func _ActionRawUnitCommand_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionRawUnitCommand)
	switch tag {
	case 2: // target.target_world_space_pos
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Point2D)
		err := b.DecodeMessage(msg)
		m.Target = &ActionRawUnitCommand_TargetWorldSpacePos{msg}
		return true, err
	case 3: // target.target_unit_tag
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Target = &ActionRawUnitCommand_TargetUnitTag{x}
		return true, err
	default:
		return false, nil
	}
}

func _ActionRawUnitCommand_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionRawUnitCommand)
	// target
	switch x := m.Target.(type) {
	case *ActionRawUnitCommand_TargetWorldSpacePos:
		s := proto.Size(x.TargetWorldSpacePos)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionRawUnitCommand_TargetUnitTag:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.TargetUnitTag))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActionRawCameraMove struct {
	CenterWorldSpace *Point `protobuf:"bytes,1,opt,name=center_world_space,json=centerWorldSpace" json:"center_world_space,omitempty"`
}

func (m *ActionRawCameraMove) Reset()         { *m = ActionRawCameraMove{} }
func (m *ActionRawCameraMove) String() string { return proto.CompactTextString(m) }
func (*ActionRawCameraMove) ProtoMessage()    {}
func (*ActionRawCameraMove) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{12}
}
func (m *ActionRawCameraMove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionRawCameraMove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionRawCameraMove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionRawCameraMove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionRawCameraMove.Merge(dst, src)
}
func (m *ActionRawCameraMove) XXX_Size() int {
	return m.Size()
}
func (m *ActionRawCameraMove) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionRawCameraMove.DiscardUnknown(m)
}

var xxx_messageInfo_ActionRawCameraMove proto.InternalMessageInfo

func (m *ActionRawCameraMove) GetCenterWorldSpace() *Point {
	if m != nil {
		return m.CenterWorldSpace
	}
	return nil
}

type ActionRawToggleAutocast struct {
	AbilityId int32    `protobuf:"varint,1,opt,name=ability_id,json=abilityId,proto3" json:"ability_id,omitempty"`
	UnitTags  []uint64 `protobuf:"varint,2,rep,packed,name=unit_tags,json=unitTags" json:"unit_tags,omitempty"`
}

func (m *ActionRawToggleAutocast) Reset()         { *m = ActionRawToggleAutocast{} }
func (m *ActionRawToggleAutocast) String() string { return proto.CompactTextString(m) }
func (*ActionRawToggleAutocast) ProtoMessage()    {}
func (*ActionRawToggleAutocast) Descriptor() ([]byte, []int) {
	return fileDescriptor_raw_fcecc777afcf54ce, []int{13}
}
func (m *ActionRawToggleAutocast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionRawToggleAutocast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionRawToggleAutocast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionRawToggleAutocast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionRawToggleAutocast.Merge(dst, src)
}
func (m *ActionRawToggleAutocast) XXX_Size() int {
	return m.Size()
}
func (m *ActionRawToggleAutocast) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionRawToggleAutocast.DiscardUnknown(m)
}

var xxx_messageInfo_ActionRawToggleAutocast proto.InternalMessageInfo

func (m *ActionRawToggleAutocast) GetAbilityId() int32 {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func (m *ActionRawToggleAutocast) GetUnitTags() []uint64 {
	if m != nil {
		return m.UnitTags
	}
	return nil
}

func init() {
	proto.RegisterType((*StartRaw)(nil), "SC2APIProtocol.StartRaw")
	proto.RegisterType((*ObservationRaw)(nil), "SC2APIProtocol.ObservationRaw")
	proto.RegisterType((*PowerSource)(nil), "SC2APIProtocol.PowerSource")
	proto.RegisterType((*PlayerRaw)(nil), "SC2APIProtocol.PlayerRaw")
	proto.RegisterType((*UnitOrder)(nil), "SC2APIProtocol.UnitOrder")
	proto.RegisterType((*PassengerUnit)(nil), "SC2APIProtocol.PassengerUnit")
	proto.RegisterType((*Unit)(nil), "SC2APIProtocol.Unit")
	proto.RegisterType((*MapState)(nil), "SC2APIProtocol.MapState")
	proto.RegisterType((*Event)(nil), "SC2APIProtocol.Event")
	proto.RegisterType((*Effect)(nil), "SC2APIProtocol.Effect")
	proto.RegisterType((*ActionRaw)(nil), "SC2APIProtocol.ActionRaw")
	proto.RegisterType((*ActionRawUnitCommand)(nil), "SC2APIProtocol.ActionRawUnitCommand")
	proto.RegisterType((*ActionRawCameraMove)(nil), "SC2APIProtocol.ActionRawCameraMove")
	proto.RegisterType((*ActionRawToggleAutocast)(nil), "SC2APIProtocol.ActionRawToggleAutocast")
	proto.RegisterEnum("SC2APIProtocol.DisplayType", DisplayType_name, DisplayType_value)
	proto.RegisterEnum("SC2APIProtocol.Alliance", Alliance_name, Alliance_value)
	proto.RegisterEnum("SC2APIProtocol.CloakState", CloakState_name, CloakState_value)
}
func (m *StartRaw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartRaw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MapSize != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.MapSize.Size()))
		n1, err := m.MapSize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.PathingGrid != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.PathingGrid.Size()))
		n2, err := m.PathingGrid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.TerrainHeight != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.TerrainHeight.Size()))
		n3, err := m.TerrainHeight.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.PlacementGrid != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.PlacementGrid.Size()))
		n4, err := m.PlacementGrid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.PlayableArea != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.PlayableArea.Size()))
		n5, err := m.PlayableArea.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.StartLocations) > 0 {
		for _, msg := range m.StartLocations {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRaw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ObservationRaw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObservationRaw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Player != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Player.Size()))
		n6, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Units) > 0 {
		for _, msg := range m.Units {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRaw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MapState != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.MapState.Size()))
		n7, err := m.MapState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Event != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Event.Size()))
		n8, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Effects) > 0 {
		for _, msg := range m.Effects {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintRaw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PowerSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PowerSource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pos != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Pos.Size()))
		n9, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Radius != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Radius))))
		i += 4
	}
	if m.Tag != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Tag))
	}
	return i, nil
}

func (m *PlayerRaw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerRaw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PowerSources) > 0 {
		for _, msg := range m.PowerSources {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRaw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Camera != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Camera.Size()))
		n10, err := m.Camera.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.UpgradeIds) > 0 {
		dAtA12 := make([]byte, len(m.UpgradeIds)*10)
		var j11 int
		for _, num := range m.UpgradeIds {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaw(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	return i, nil
}

func (m *UnitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AbilityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.AbilityId))
	}
	if m.Target != nil {
		nn13, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn13
	}
	if m.Progress != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Progress))))
		i += 4
	}
	return i, nil
}

func (m *UnitOrder_TargetWorldSpacePos) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TargetWorldSpacePos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.TargetWorldSpacePos.Size()))
		n14, err := m.TargetWorldSpacePos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *UnitOrder_TargetUnitTag) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintRaw(dAtA, i, uint64(m.TargetUnitTag))
	return i, nil
}
func (m *PassengerUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PassengerUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Tag))
	}
	if m.Health != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Health))))
		i += 4
	}
	if m.HealthMax != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HealthMax))))
		i += 4
	}
	if m.Shield != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Shield))))
		i += 4
	}
	if m.Energy != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Energy))))
		i += 4
	}
	if m.UnitType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.UnitType))
	}
	if m.ShieldMax != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ShieldMax))))
		i += 4
	}
	if m.EnergyMax != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EnergyMax))))
		i += 4
	}
	return i, nil
}

func (m *Unit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Unit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DisplayType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.DisplayType))
	}
	if m.Alliance != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Alliance))
	}
	if m.Tag != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Tag))
	}
	if m.UnitType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.UnitType))
	}
	if m.Owner != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Owner))
	}
	if m.Pos != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Pos.Size()))
		n15, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Facing != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Facing))))
		i += 4
	}
	if m.Radius != 0 {
		dAtA[i] = 0x45
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Radius))))
		i += 4
	}
	if m.BuildProgress != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BuildProgress))))
		i += 4
	}
	if m.Cloak != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Cloak))
	}
	if m.IsSelected {
		dAtA[i] = 0x58
		i++
		if m.IsSelected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsOnScreen {
		dAtA[i] = 0x60
		i++
		if m.IsOnScreen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBlip {
		dAtA[i] = 0x68
		i++
		if m.IsBlip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Health != 0 {
		dAtA[i] = 0x75
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Health))))
		i += 4
	}
	if m.HealthMax != 0 {
		dAtA[i] = 0x7d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.HealthMax))))
		i += 4
	}
	if m.Shield != 0 {
		dAtA[i] = 0x85
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Shield))))
		i += 4
	}
	if m.Energy != 0 {
		dAtA[i] = 0x8d
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Energy))))
		i += 4
	}
	if m.MineralContents != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.MineralContents))
	}
	if m.VespeneContents != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.VespeneContents))
	}
	if m.IsFlying {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.IsFlying {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBurrowed {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.IsBurrowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Orders) > 0 {
		for _, msg := range m.Orders {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintRaw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AddOnTag != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.AddOnTag))
	}
	if len(m.Passengers) > 0 {
		for _, msg := range m.Passengers {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintRaw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CargoSpaceTaken != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.CargoSpaceTaken))
	}
	if m.CargoSpaceMax != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.CargoSpaceMax))
	}
	if len(m.BuffIds) > 0 {
		dAtA17 := make([]byte, len(m.BuffIds)*10)
		var j16 int
		for _, num := range m.BuffIds {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaw(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	if m.AssignedHarvesters != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.AssignedHarvesters))
	}
	if m.IdealHarvesters != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.IdealHarvesters))
	}
	if m.WeaponCooldown != 0 {
		dAtA[i] = 0xf5
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.WeaponCooldown))))
		i += 4
	}
	if m.DetectRange != 0 {
		dAtA[i] = 0xfd
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DetectRange))))
		i += 4
	}
	if m.RadarRange != 0 {
		dAtA[i] = 0x85
		i++
		dAtA[i] = 0x2
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RadarRange))))
		i += 4
	}
	if m.EngagedTargetTag != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.EngagedTargetTag))
	}
	if m.IsPowered {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		if m.IsPowered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ShieldMax != 0 {
		dAtA[i] = 0xa5
		i++
		dAtA[i] = 0x2
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ShieldMax))))
		i += 4
	}
	if m.EnergyMax != 0 {
		dAtA[i] = 0xad
		i++
		dAtA[i] = 0x2
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EnergyMax))))
		i += 4
	}
	return i, nil
}

func (m *MapState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Visibility != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Visibility.Size()))
		n18, err := m.Visibility.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Creep != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.Creep.Size()))
		n19, err := m.Creep.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DeadUnits) > 0 {
		dAtA21 := make([]byte, len(m.DeadUnits)*10)
		var j20 int
		for _, num := range m.DeadUnits {
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaw(dAtA, i, uint64(j20))
		i += copy(dAtA[i:], dAtA21[:j20])
	}
	return i, nil
}

func (m *Effect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Effect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EffectId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.EffectId))
	}
	if len(m.Pos) > 0 {
		for _, msg := range m.Pos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRaw(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ActionRaw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionRaw) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		nn22, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn22
	}
	return i, nil
}

func (m *ActionRaw_UnitCommand) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UnitCommand != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.UnitCommand.Size()))
		n23, err := m.UnitCommand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *ActionRaw_CameraMove) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CameraMove != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.CameraMove.Size()))
		n24, err := m.CameraMove.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *ActionRaw_ToggleAutocast) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ToggleAutocast != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.ToggleAutocast.Size()))
		n25, err := m.ToggleAutocast.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *ActionRawUnitCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionRawUnitCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AbilityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.AbilityId))
	}
	if m.Target != nil {
		nn26, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn26
	}
	if len(m.UnitTags) > 0 {
		dAtA28 := make([]byte, len(m.UnitTags)*10)
		var j27 int
		for _, num := range m.UnitTags {
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaw(dAtA, i, uint64(j27))
		i += copy(dAtA[i:], dAtA28[:j27])
	}
	if m.QueueCommand {
		dAtA[i] = 0x28
		i++
		if m.QueueCommand {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ActionRawUnitCommand_TargetWorldSpacePos) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TargetWorldSpacePos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.TargetWorldSpacePos.Size()))
		n29, err := m.TargetWorldSpacePos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *ActionRawUnitCommand_TargetUnitTag) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x18
	i++
	i = encodeVarintRaw(dAtA, i, uint64(m.TargetUnitTag))
	return i, nil
}
func (m *ActionRawCameraMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionRawCameraMove) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CenterWorldSpace != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.CenterWorldSpace.Size()))
		n30, err := m.CenterWorldSpace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *ActionRawToggleAutocast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionRawToggleAutocast) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AbilityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaw(dAtA, i, uint64(m.AbilityId))
	}
	if len(m.UnitTags) > 0 {
		dAtA32 := make([]byte, len(m.UnitTags)*10)
		var j31 int
		for _, num := range m.UnitTags {
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaw(dAtA, i, uint64(j31))
		i += copy(dAtA[i:], dAtA32[:j31])
	}
	return i, nil
}

func encodeVarintRaw(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StartRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MapSize != nil {
		l = m.MapSize.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	if m.PathingGrid != nil {
		l = m.PathingGrid.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	if m.TerrainHeight != nil {
		l = m.TerrainHeight.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	if m.PlacementGrid != nil {
		l = m.PlacementGrid.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	if m.PlayableArea != nil {
		l = m.PlayableArea.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	if len(m.StartLocations) > 0 {
		for _, e := range m.StartLocations {
			l = e.Size()
			n += 1 + l + sovRaw(uint64(l))
		}
	}
	return n
}

func (m *ObservationRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovRaw(uint64(l))
		}
	}
	if m.MapState != nil {
		l = m.MapState.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	if len(m.Effects) > 0 {
		for _, e := range m.Effects {
			l = e.Size()
			n += 1 + l + sovRaw(uint64(l))
		}
	}
	return n
}

func (m *PowerSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	if m.Radius != 0 {
		n += 5
	}
	if m.Tag != 0 {
		n += 1 + sovRaw(uint64(m.Tag))
	}
	return n
}

func (m *PlayerRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PowerSources) > 0 {
		for _, e := range m.PowerSources {
			l = e.Size()
			n += 1 + l + sovRaw(uint64(l))
		}
	}
	if m.Camera != nil {
		l = m.Camera.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	if len(m.UpgradeIds) > 0 {
		l = 0
		for _, e := range m.UpgradeIds {
			l += sovRaw(uint64(e))
		}
		n += 1 + sovRaw(uint64(l)) + l
	}
	return n
}

func (m *UnitOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbilityId != 0 {
		n += 1 + sovRaw(uint64(m.AbilityId))
	}
	if m.Target != nil {
		n += m.Target.Size()
	}
	if m.Progress != 0 {
		n += 5
	}
	return n
}

func (m *UnitOrder_TargetWorldSpacePos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetWorldSpacePos != nil {
		l = m.TargetWorldSpacePos.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	return n
}
func (m *UnitOrder_TargetUnitTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRaw(uint64(m.TargetUnitTag))
	return n
}
func (m *PassengerUnit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tag != 0 {
		n += 1 + sovRaw(uint64(m.Tag))
	}
	if m.Health != 0 {
		n += 5
	}
	if m.HealthMax != 0 {
		n += 5
	}
	if m.Shield != 0 {
		n += 5
	}
	if m.Energy != 0 {
		n += 5
	}
	if m.UnitType != 0 {
		n += 1 + sovRaw(uint64(m.UnitType))
	}
	if m.ShieldMax != 0 {
		n += 5
	}
	if m.EnergyMax != 0 {
		n += 5
	}
	return n
}

func (m *Unit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DisplayType != 0 {
		n += 1 + sovRaw(uint64(m.DisplayType))
	}
	if m.Alliance != 0 {
		n += 1 + sovRaw(uint64(m.Alliance))
	}
	if m.Tag != 0 {
		n += 1 + sovRaw(uint64(m.Tag))
	}
	if m.UnitType != 0 {
		n += 1 + sovRaw(uint64(m.UnitType))
	}
	if m.Owner != 0 {
		n += 1 + sovRaw(uint64(m.Owner))
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	if m.Facing != 0 {
		n += 5
	}
	if m.Radius != 0 {
		n += 5
	}
	if m.BuildProgress != 0 {
		n += 5
	}
	if m.Cloak != 0 {
		n += 1 + sovRaw(uint64(m.Cloak))
	}
	if m.IsSelected {
		n += 2
	}
	if m.IsOnScreen {
		n += 2
	}
	if m.IsBlip {
		n += 2
	}
	if m.Health != 0 {
		n += 5
	}
	if m.HealthMax != 0 {
		n += 5
	}
	if m.Shield != 0 {
		n += 6
	}
	if m.Energy != 0 {
		n += 6
	}
	if m.MineralContents != 0 {
		n += 2 + sovRaw(uint64(m.MineralContents))
	}
	if m.VespeneContents != 0 {
		n += 2 + sovRaw(uint64(m.VespeneContents))
	}
	if m.IsFlying {
		n += 3
	}
	if m.IsBurrowed {
		n += 3
	}
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 2 + l + sovRaw(uint64(l))
		}
	}
	if m.AddOnTag != 0 {
		n += 2 + sovRaw(uint64(m.AddOnTag))
	}
	if len(m.Passengers) > 0 {
		for _, e := range m.Passengers {
			l = e.Size()
			n += 2 + l + sovRaw(uint64(l))
		}
	}
	if m.CargoSpaceTaken != 0 {
		n += 2 + sovRaw(uint64(m.CargoSpaceTaken))
	}
	if m.CargoSpaceMax != 0 {
		n += 2 + sovRaw(uint64(m.CargoSpaceMax))
	}
	if len(m.BuffIds) > 0 {
		l = 0
		for _, e := range m.BuffIds {
			l += sovRaw(uint64(e))
		}
		n += 2 + sovRaw(uint64(l)) + l
	}
	if m.AssignedHarvesters != 0 {
		n += 2 + sovRaw(uint64(m.AssignedHarvesters))
	}
	if m.IdealHarvesters != 0 {
		n += 2 + sovRaw(uint64(m.IdealHarvesters))
	}
	if m.WeaponCooldown != 0 {
		n += 6
	}
	if m.DetectRange != 0 {
		n += 6
	}
	if m.RadarRange != 0 {
		n += 6
	}
	if m.EngagedTargetTag != 0 {
		n += 2 + sovRaw(uint64(m.EngagedTargetTag))
	}
	if m.IsPowered {
		n += 3
	}
	if m.ShieldMax != 0 {
		n += 6
	}
	if m.EnergyMax != 0 {
		n += 6
	}
	return n
}

func (m *MapState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Visibility != nil {
		l = m.Visibility.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	if m.Creep != nil {
		l = m.Creep.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeadUnits) > 0 {
		l = 0
		for _, e := range m.DeadUnits {
			l += sovRaw(uint64(e))
		}
		n += 1 + sovRaw(uint64(l)) + l
	}
	return n
}

func (m *Effect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectId != 0 {
		n += 1 + sovRaw(uint64(m.EffectId))
	}
	if len(m.Pos) > 0 {
		for _, e := range m.Pos {
			l = e.Size()
			n += 1 + l + sovRaw(uint64(l))
		}
	}
	return n
}

func (m *ActionRaw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		n += m.Action.Size()
	}
	return n
}

func (m *ActionRaw_UnitCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnitCommand != nil {
		l = m.UnitCommand.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	return n
}
func (m *ActionRaw_CameraMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CameraMove != nil {
		l = m.CameraMove.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	return n
}
func (m *ActionRaw_ToggleAutocast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ToggleAutocast != nil {
		l = m.ToggleAutocast.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	return n
}
func (m *ActionRawUnitCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbilityId != 0 {
		n += 1 + sovRaw(uint64(m.AbilityId))
	}
	if m.Target != nil {
		n += m.Target.Size()
	}
	if len(m.UnitTags) > 0 {
		l = 0
		for _, e := range m.UnitTags {
			l += sovRaw(uint64(e))
		}
		n += 1 + sovRaw(uint64(l)) + l
	}
	if m.QueueCommand {
		n += 2
	}
	return n
}

func (m *ActionRawUnitCommand_TargetWorldSpacePos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetWorldSpacePos != nil {
		l = m.TargetWorldSpacePos.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	return n
}
func (m *ActionRawUnitCommand_TargetUnitTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRaw(uint64(m.TargetUnitTag))
	return n
}
func (m *ActionRawCameraMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CenterWorldSpace != nil {
		l = m.CenterWorldSpace.Size()
		n += 1 + l + sovRaw(uint64(l))
	}
	return n
}

func (m *ActionRawToggleAutocast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbilityId != 0 {
		n += 1 + sovRaw(uint64(m.AbilityId))
	}
	if len(m.UnitTags) > 0 {
		l = 0
		for _, e := range m.UnitTags {
			l += sovRaw(uint64(e))
		}
		n += 1 + sovRaw(uint64(l)) + l
	}
	return n
}

func sovRaw(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaw(x uint64) (n int) {
	return sovRaw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StartRaw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartRaw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartRaw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapSize == nil {
				m.MapSize = &Size2DI{}
			}
			if err := m.MapSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathingGrid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PathingGrid == nil {
				m.PathingGrid = &ImageData{}
			}
			if err := m.PathingGrid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerrainHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TerrainHeight == nil {
				m.TerrainHeight = &ImageData{}
			}
			if err := m.TerrainHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacementGrid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlacementGrid == nil {
				m.PlacementGrid = &ImageData{}
			}
			if err := m.PlacementGrid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayableArea", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayableArea == nil {
				m.PlayableArea = &RectangleI{}
			}
			if err := m.PlayableArea.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartLocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartLocations = append(m.StartLocations, &Point2D{})
			if err := m.StartLocations[len(m.StartLocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObservationRaw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObservationRaw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObservationRaw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &PlayerRaw{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, &Unit{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapState == nil {
				m.MapState = &MapState{}
			}
			if err := m.MapState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Effects = append(m.Effects, &Effect{})
			if err := m.Effects[len(m.Effects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PowerSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PowerSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PowerSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Point{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Radius = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerRaw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerRaw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerRaw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerSources = append(m.PowerSources, &PowerSource{})
			if err := m.PowerSources[len(m.PowerSources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Camera", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Camera == nil {
				m.Camera = &Point{}
			}
			if err := m.Camera.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UpgradeIds = append(m.UpgradeIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRaw
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UpgradeIds) == 0 {
					m.UpgradeIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UpgradeIds = append(m.UpgradeIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityId", wireType)
			}
			m.AbilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetWorldSpacePos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Point{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &UnitOrder_TargetWorldSpacePos{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUnitTag", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Target = &UnitOrder_TargetUnitTag{v}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Progress = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PassengerUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PassengerUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PassengerUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Health = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthMax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HealthMax = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shield", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Shield = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Energy = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitType", wireType)
			}
			m.UnitType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldMax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ShieldMax = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyMax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EnergyMax = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayType", wireType)
			}
			m.DisplayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayType |= (DisplayType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alliance", wireType)
			}
			m.Alliance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Alliance |= (Alliance(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitType", wireType)
			}
			m.UnitType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Owner |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &Point{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Facing", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Facing = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Radius = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildProgress", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BuildProgress = float32(math.Float32frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloak", wireType)
			}
			m.Cloak = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cloak |= (CloakState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSelected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSelected = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnScreen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnScreen = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlip = bool(v != 0)
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Health = float32(math.Float32frombits(v))
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthMax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.HealthMax = float32(math.Float32frombits(v))
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shield", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Shield = float32(math.Float32frombits(v))
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Energy = float32(math.Float32frombits(v))
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MineralContents", wireType)
			}
			m.MineralContents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MineralContents |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VespeneContents", wireType)
			}
			m.VespeneContents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VespeneContents |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFlying", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFlying = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBurrowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBurrowed = bool(v != 0)
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &UnitOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOnTag", wireType)
			}
			m.AddOnTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOnTag |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passengers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passengers = append(m.Passengers, &PassengerUnit{})
			if err := m.Passengers[len(m.Passengers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CargoSpaceTaken", wireType)
			}
			m.CargoSpaceTaken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CargoSpaceTaken |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CargoSpaceMax", wireType)
			}
			m.CargoSpaceMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CargoSpaceMax |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BuffIds = append(m.BuffIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRaw
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BuffIds) == 0 {
					m.BuffIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BuffIds = append(m.BuffIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffIds", wireType)
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedHarvesters", wireType)
			}
			m.AssignedHarvesters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssignedHarvesters |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdealHarvesters", wireType)
			}
			m.IdealHarvesters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdealHarvesters |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeaponCooldown", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.WeaponCooldown = float32(math.Float32frombits(v))
		case 31:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DetectRange", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DetectRange = float32(math.Float32frombits(v))
		case 32:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RadarRange", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RadarRange = float32(math.Float32frombits(v))
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EngagedTargetTag", wireType)
			}
			m.EngagedTargetTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EngagedTargetTag |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPowered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPowered = bool(v != 0)
		case 36:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldMax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ShieldMax = float32(math.Float32frombits(v))
		case 37:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnergyMax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EnergyMax = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Visibility == nil {
				m.Visibility = &ImageData{}
			}
			if err := m.Visibility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creep", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creep == nil {
				m.Creep = &ImageData{}
			}
			if err := m.Creep.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DeadUnits = append(m.DeadUnits, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRaw
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DeadUnits) == 0 {
					m.DeadUnits = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DeadUnits = append(m.DeadUnits, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadUnits", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Effect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Effect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Effect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectId", wireType)
			}
			m.EffectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pos = append(m.Pos, &Point2D{})
			if err := m.Pos[len(m.Pos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionRaw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionRaw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionRaw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionRawUnitCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionRaw_UnitCommand{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CameraMove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionRawCameraMove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionRaw_CameraMove{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToggleAutocast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionRawToggleAutocast{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionRaw_ToggleAutocast{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionRawUnitCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionRawUnitCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionRawUnitCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityId", wireType)
			}
			m.AbilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetWorldSpacePos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Point2D{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &ActionRawUnitCommand_TargetWorldSpacePos{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUnitTag", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Target = &ActionRawUnitCommand_TargetUnitTag{v}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnitTags = append(m.UnitTags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRaw
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnitTags) == 0 {
					m.UnitTags = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnitTags = append(m.UnitTags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTags", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueCommand", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueueCommand = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionRawCameraMove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionRawCameraMove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionRawCameraMove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CenterWorldSpace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaw
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CenterWorldSpace == nil {
				m.CenterWorldSpace = &Point{}
			}
			if err := m.CenterWorldSpace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionRawToggleAutocast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionRawToggleAutocast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionRawToggleAutocast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityId", wireType)
			}
			m.AbilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnitTags = append(m.UnitTags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRaw
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnitTags) == 0 {
					m.UnitTags = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnitTags = append(m.UnitTags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTags", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaw
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaw
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaw(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaw = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaw   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raw.proto", fileDescriptor_raw_fcecc777afcf54ce) }

var fileDescriptor_raw_fcecc777afcf54ce = []byte{
	// 1679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x5b, 0x6f, 0x1b, 0xc7,
	0x15, 0x16, 0x49, 0x91, 0x22, 0x0f, 0x2f, 0x62, 0x46, 0xb6, 0xbc, 0x92, 0x2d, 0x45, 0xa5, 0x93,
	0xd8, 0x51, 0x5b, 0x27, 0x55, 0xdb, 0x87, 0x02, 0xbd, 0x58, 0x96, 0x92, 0x4a, 0x40, 0x6c, 0x13,
	0x43, 0xa5, 0x05, 0x82, 0x02, 0xdb, 0xd1, 0xce, 0xd1, 0x6a, 0x90, 0xe5, 0xec, 0x76, 0x66, 0x28,
	0x59, 0x79, 0x2d, 0xfa, 0xde, 0x3f, 0x90, 0xff, 0x93, 0x47, 0x3f, 0xf6, 0xb1, 0xb0, 0x7f, 0x46,
	0xfb, 0x50, 0xcc, 0x85, 0x17, 0x89, 0xba, 0x14, 0xc8, 0xdb, 0x9e, 0xef, 0x7c, 0x67, 0x66, 0xce,
	0x65, 0xce, 0x9c, 0x85, 0x86, 0x62, 0xe7, 0xcf, 0x0a, 0x95, 0x9b, 0x9c, 0x74, 0x06, 0x7b, 0x3b,
	0xbb, 0xfd, 0xc3, 0xbe, 0x15, 0x92, 0x3c, 0x5b, 0x6f, 0x25, 0xf9, 0x70, 0x98, 0x4b, 0xaf, 0xed,
	0xfd, 0xbd, 0x02, 0xf5, 0x81, 0x61, 0xca, 0x50, 0x76, 0x4e, 0x76, 0xa0, 0x3e, 0x64, 0x45, 0xac,
	0xc5, 0x77, 0x18, 0x95, 0xb6, 0x4a, 0x4f, 0x9b, 0x3b, 0x0f, 0x9e, 0x5d, 0xb6, 0x7e, 0x36, 0x10,
	0xdf, 0xe1, 0xce, 0xfe, 0x21, 0x5d, 0x1a, 0xb2, 0xc2, 0x7e, 0x93, 0xdf, 0x42, 0xab, 0x60, 0xe6,
	0x54, 0xc8, 0x34, 0x4e, 0x95, 0xe0, 0x51, 0xd9, 0xd9, 0xad, 0x5d, 0xb5, 0x3b, 0x1c, 0xb2, 0x14,
	0xf7, 0x99, 0x61, 0xb4, 0x19, 0xe8, 0x7f, 0x54, 0x82, 0x93, 0xe7, 0xd0, 0x31, 0xa8, 0x14, 0x13,
	0x32, 0x3e, 0x45, 0x91, 0x9e, 0x9a, 0xa8, 0x72, 0x97, 0x7d, 0x3b, 0x18, 0x1c, 0x38, 0xbe, 0x5d,
	0xa1, 0xc8, 0x58, 0x82, 0x43, 0x94, 0xc6, 0x9f, 0x60, 0xf1, 0xce, 0x15, 0x26, 0x06, 0xee, 0x0c,
	0x7f, 0x00, 0x0b, 0x5c, 0xb0, 0xe3, 0x0c, 0x63, 0xa6, 0x90, 0x45, 0x55, 0xb7, 0xc0, 0xfa, 0xd5,
	0x05, 0x28, 0x26, 0x86, 0xc9, 0x34, 0xc3, 0x43, 0xda, 0x1a, 0x1b, 0xec, 0x2a, 0x64, 0xe4, 0x39,
	0x2c, 0x6b, 0x1b, 0xc2, 0x38, 0xcb, 0x13, 0x66, 0x44, 0x2e, 0x75, 0x54, 0xdb, 0xaa, 0x5c, 0x17,
	0xbd, 0x7e, 0x2e, 0xa4, 0xd9, 0xd9, 0xa7, 0x1d, 0xc7, 0xff, 0x6a, 0x4c, 0xef, 0xfd, 0xa3, 0x0c,
	0x9d, 0xd7, 0xc7, 0x1a, 0xd5, 0x99, 0x03, 0x6c, 0x2e, 0x7e, 0x01, 0x35, 0xbb, 0x09, 0xaa, 0x90,
	0x89, 0x39, 0x7f, 0xfa, 0x4e, 0x4b, 0xd9, 0x39, 0x0d, 0x44, 0xb2, 0x0d, 0xd5, 0x91, 0x14, 0x46,
	0x47, 0x65, 0xb7, 0xfb, 0xbd, 0xab, 0x16, 0x5f, 0x4b, 0x61, 0xa8, 0xa7, 0x90, 0x5f, 0x43, 0xc3,
	0xa5, 0xda, 0x30, 0x83, 0x21, 0xe6, 0xd1, 0x55, 0xfe, 0x4b, 0x56, 0x0c, 0xac, 0x9e, 0xda, 0xaa,
	0x70, 0x5f, 0xe4, 0xa7, 0x50, 0xc5, 0x33, 0x94, 0x26, 0x04, 0xf9, 0xfe, 0x55, 0x93, 0x2f, 0xac,
	0x92, 0x7a, 0x0e, 0xf9, 0x1c, 0x96, 0xf0, 0xe4, 0x04, 0x13, 0xa3, 0xa3, 0xaa, 0x3b, 0xd1, 0xea,
	0x1c, 0xdd, 0xa9, 0xe9, 0x98, 0xd6, 0xfb, 0x2b, 0x34, 0xfb, 0xf9, 0x39, 0xaa, 0x41, 0x3e, 0x52,
	0x09, 0x92, 0x27, 0x50, 0x29, 0x72, 0x1d, 0x02, 0x70, 0xff, 0xda, 0x60, 0x52, 0xcb, 0x20, 0xab,
	0x50, 0x53, 0x8c, 0x8b, 0x91, 0x76, 0xe5, 0x57, 0xa6, 0x41, 0x22, 0x5d, 0xa8, 0x18, 0x96, 0x3a,
	0xff, 0x16, 0xa9, 0xfd, 0xec, 0x7d, 0x5f, 0x82, 0xc6, 0x24, 0x72, 0xe4, 0x39, 0xb4, 0x0b, 0xbb,
	0x5f, 0xac, 0xdd, 0x86, 0x76, 0x2b, 0x7b, 0xce, 0x87, 0xf3, 0x5b, 0x4d, 0x0e, 0x45, 0x5b, 0xc5,
	0x54, 0xd0, 0xe4, 0xe7, 0x50, 0x4b, 0xd8, 0x10, 0x15, 0x0b, 0x85, 0x7f, 0xc3, 0x29, 0x03, 0x89,
	0x7c, 0x08, 0xcd, 0x51, 0x91, 0x2a, 0xc6, 0x31, 0x16, 0x5c, 0x47, 0x95, 0xad, 0xca, 0xd3, 0x36,
	0x85, 0x00, 0x1d, 0x72, 0xdd, 0xfb, 0xa1, 0x04, 0x0d, 0x9b, 0xa7, 0xd7, 0x8a, 0xa3, 0x22, 0x1b,
	0x00, 0xec, 0x58, 0x64, 0xc2, 0x5c, 0xc4, 0x82, 0xbb, 0x38, 0xb4, 0x69, 0x23, 0x20, 0x87, 0x9c,
	0x7c, 0x05, 0xab, 0x86, 0xa9, 0x14, 0x4d, 0x7c, 0x9e, 0xab, 0x8c, 0xc7, 0xba, 0x60, 0x09, 0xc6,
	0x36, 0x64, 0xb7, 0x1d, 0xe6, 0x60, 0x81, 0xae, 0x78, 0xb3, 0x3f, 0x5b, 0xab, 0x81, 0x35, 0xea,
	0xe7, 0x9a, 0x3c, 0x85, 0xe5, 0xb0, 0x9a, 0x2d, 0x91, 0x78, 0x12, 0xb8, 0x83, 0x05, 0xda, 0xf6,
	0x0a, 0x7b, 0xb0, 0x23, 0x96, 0x92, 0x75, 0xa8, 0x17, 0x2a, 0x4f, 0x15, 0x6a, 0xed, 0x0a, 0xa1,
	0x4c, 0x27, 0xf2, 0x8b, 0x3a, 0xd4, 0x3c, 0xb9, 0xf7, 0xbe, 0x04, 0xed, 0x3e, 0xd3, 0x1a, 0x65,
	0x8a, 0xca, 0x9a, 0x8e, 0xd3, 0x51, 0x9a, 0xa4, 0xc3, 0x26, 0xee, 0x14, 0x59, 0x66, 0x4e, 0xc7,
	0x89, 0xf3, 0x92, 0x75, 0xdc, 0x7f, 0xc5, 0x43, 0xf6, 0xc6, 0x1d, 0xa3, 0x4c, 0x1b, 0x1e, 0x79,
	0xc9, 0xde, 0x58, 0x33, 0x7d, 0x2a, 0x30, 0xe3, 0x61, 0xfb, 0x20, 0x59, 0x1c, 0x25, 0xaa, 0xf4,
	0xc2, 0xdd, 0xe1, 0x32, 0x0d, 0x12, 0x79, 0x08, 0x0d, 0xef, 0xd3, 0x45, 0x81, 0x51, 0xcd, 0x85,
	0xb1, 0x6e, 0x81, 0xa3, 0x8b, 0x02, 0xed, 0x5e, 0xde, 0xdc, 0xed, 0xb5, 0xe4, 0xf7, 0xf2, 0x88,
	0xdd, 0x6b, 0x03, 0xc0, 0xaf, 0xe2, 0xd4, 0x75, 0xaf, 0xf6, 0xc8, 0x4b, 0xf6, 0xa6, 0xf7, 0x3d,
	0xc0, 0xa2, 0x73, 0xee, 0xf7, 0xd0, 0xe2, 0x42, 0xdb, 0xab, 0xe8, 0xb7, 0xb1, 0x5e, 0x76, 0xe6,
	0x4b, 0x69, 0xdf, 0x73, 0xec, 0xce, 0xb4, 0xc9, 0xa7, 0x02, 0xf9, 0x15, 0xd4, 0x59, 0x96, 0x09,
	0x26, 0x13, 0x74, 0xc1, 0xe8, 0xcc, 0x5f, 0xc8, 0xdd, 0xa0, 0xa7, 0x13, 0xe6, 0x7c, 0x85, 0x5f,
	0xf6, 0x75, 0xf1, 0x8a, 0xaf, 0xf7, 0xa0, 0x9a, 0x9f, 0x4b, 0x54, 0x2e, 0x3e, 0x55, 0xea, 0x85,
	0xf1, 0x3d, 0xab, 0xfd, 0x3f, 0xf7, 0xec, 0x84, 0x25, 0x42, 0xa6, 0x21, 0x4c, 0x41, 0x9a, 0xb9,
	0x7f, 0xf5, 0x4b, 0xf7, 0xef, 0x63, 0xe8, 0x1c, 0x8f, 0x44, 0xc6, 0xe3, 0x49, 0xb9, 0x34, 0x9c,
	0xbe, 0xed, 0xd0, 0x7e, 0x00, 0xc9, 0xe7, 0x50, 0x4d, 0xb2, 0x9c, 0x7d, 0x1b, 0x81, 0xf3, 0x7b,
	0xae, 0xf3, 0xee, 0x59, 0xa5, 0x6f, 0x45, 0x9e, 0x68, 0xef, 0x91, 0xd0, 0xb1, 0xc6, 0x0c, 0x13,
	0x83, 0x3c, 0x6a, 0x6e, 0x95, 0x9e, 0xd6, 0x29, 0x08, 0x3d, 0x08, 0x08, 0xd9, 0x82, 0x96, 0xd0,
	0x71, 0x2e, 0x63, 0x9d, 0x28, 0x44, 0x19, 0xb5, 0xc6, 0x8c, 0xd7, 0x72, 0xe0, 0x10, 0xf2, 0x00,
	0x96, 0x84, 0x8e, 0x8f, 0x33, 0x51, 0x44, 0x6d, 0xa7, 0xac, 0x09, 0xfd, 0x22, 0x13, 0xc5, 0x4c,
	0x4d, 0x76, 0x6e, 0xa9, 0xc9, 0xe5, 0x9b, 0x6b, 0xb2, 0x7b, 0x43, 0x4d, 0x7e, 0x70, 0xa9, 0x26,
	0x3f, 0x85, 0xee, 0x50, 0x48, 0x54, 0x2c, 0x8b, 0x93, 0x5c, 0x1a, 0x94, 0x46, 0x47, 0xc4, 0x65,
	0x65, 0x39, 0xe0, 0x7b, 0x01, 0xb6, 0xd4, 0x33, 0xd4, 0x05, 0x4a, 0x9c, 0x52, 0x57, 0x3c, 0x35,
	0xe0, 0x13, 0xea, 0x43, 0x68, 0x08, 0x1d, 0x9f, 0x64, 0x17, 0x36, 0x49, 0xf7, 0x9c, 0x5f, 0x75,
	0xa1, 0xbf, 0x74, 0x72, 0x88, 0xda, 0xf1, 0x48, 0xa9, 0xfc, 0x1c, 0x79, 0x74, 0x7f, 0x1c, 0x93,
	0x17, 0x01, 0xb1, 0x8f, 0x4e, 0x6e, 0x1b, 0x8f, 0x8e, 0x56, 0x5d, 0x23, 0x5c, 0xbb, 0xee, 0x09,
	0x71, 0xad, 0x89, 0x06, 0x22, 0x79, 0x04, 0xc0, 0x38, 0xb7, 0x91, 0xb6, 0x75, 0xf8, 0xc0, 0xd5,
	0x61, 0x9d, 0x71, 0xfe, 0x5a, 0xda, 0x4e, 0xf1, 0x3b, 0x80, 0x62, 0xdc, 0x02, 0x74, 0x14, 0xb9,
	0x45, 0x37, 0xe6, 0x0a, 0x6c, 0xb6, 0x49, 0xd0, 0x19, 0x03, 0xb2, 0x0d, 0x1f, 0x24, 0x4c, 0xa5,
	0x79, 0xe8, 0x6c, 0x86, 0x7d, 0x8b, 0x32, 0x5a, 0xf3, 0x9e, 0x3b, 0x85, 0x6b, 0x5e, 0x47, 0x16,
	0x26, 0x9f, 0xc0, 0xf2, 0x2c, 0xd7, 0xe6, 0x68, 0xdd, 0x31, 0xdb, 0x53, 0xa6, 0xcd, 0xd3, 0x1a,
	0xd4, 0x8f, 0x47, 0x27, 0x27, 0xae, 0xff, 0x3e, 0x74, 0xfd, 0x77, 0xc9, 0xca, 0x87, 0x5c, 0x93,
	0xcf, 0x60, 0x85, 0x69, 0x2d, 0x52, 0x89, 0x3c, 0x3e, 0x65, 0xea, 0x0c, 0xb5, 0xb1, 0xc7, 0x7e,
	0xe4, 0x96, 0x21, 0x63, 0xd5, 0xc1, 0x44, 0x63, 0x13, 0x23, 0x38, 0xb2, 0x6c, 0x96, 0xbd, 0xe1,
	0x8f, 0xe7, 0xf0, 0x19, 0xea, 0x13, 0x58, 0x3e, 0x47, 0x56, 0xe4, 0x32, 0x4e, 0xf2, 0x3c, 0xe3,
	0xf9, 0xb9, 0x8c, 0x36, 0x5d, 0x3d, 0x74, 0x3c, 0xbc, 0x17, 0x50, 0xf2, 0x13, 0x68, 0x71, 0x34,
	0x98, 0x98, 0x58, 0x31, 0x99, 0x62, 0xf4, 0xa1, 0x63, 0x35, 0x3d, 0x46, 0x2d, 0x64, 0xf3, 0xa8,
	0x18, 0x67, 0x2a, 0x30, 0xb6, 0x1c, 0x03, 0x1c, 0xe4, 0x09, 0x3f, 0x03, 0x82, 0x32, 0x65, 0x29,
	0xf2, 0x38, 0xb4, 0x74, 0x9b, 0x9c, 0x9e, 0x4b, 0x4e, 0x37, 0x68, 0x8e, 0x9c, 0xc2, 0x26, 0x69,
	0x03, 0x40, 0xe8, 0xd8, 0x3d, 0x6b, 0xc8, 0xa3, 0xc7, 0xae, 0x2a, 0x1a, 0x42, 0xf7, 0x3d, 0x70,
	0xa5, 0x3f, 0x7e, 0x74, 0x7b, 0x7f, 0xfc, 0xf8, 0x6a, 0x7f, 0x3c, 0x83, 0xfa, 0x78, 0x8e, 0x20,
	0xbf, 0x01, 0x38, 0x13, 0x5a, 0xf8, 0xf7, 0xeb, 0xa6, 0xb9, 0x66, 0x3a, 0xa7, 0xcd, 0x90, 0xc9,
	0x67, 0x50, 0xb5, 0xd7, 0xb6, 0xb8, 0x7b, 0xbe, 0xf4, 0xbc, 0xde, 0x27, 0x50, 0x75, 0xc3, 0x88,
	0x3d, 0x1f, 0x47, 0xc6, 0x63, 0x3f, 0x1a, 0xd9, 0x07, 0x7e, 0x91, 0x36, 0x2c, 0x62, 0xab, 0x4d,
	0xf7, 0xfa, 0x50, 0xf3, 0x53, 0x88, 0xbd, 0x3a, 0x7e, 0x0e, 0x99, 0xbe, 0xb5, 0x75, 0x0f, 0x1c,
	0x72, 0xf2, 0xa9, 0x6f, 0x91, 0xe5, 0xdb, 0xe7, 0x3a, 0xcb, 0xe9, 0xfd, 0xb7, 0x04, 0x8d, 0xdd,
	0x64, 0x3c, 0xc7, 0x1d, 0x42, 0xcb, 0xb5, 0x63, 0x3b, 0x75, 0x33, 0xc9, 0x83, 0xd7, 0x1f, 0xcd,
	0xb5, 0xf6, 0xb1, 0x81, 0x3d, 0xd5, 0x9e, 0xe7, 0x1e, 0x2c, 0xd0, 0xe6, 0x68, 0x2a, 0x92, 0x2f,
	0xa1, 0xe9, 0xc7, 0x88, 0x78, 0x98, 0x9f, 0x61, 0x88, 0xc4, 0xe3, 0x1b, 0x57, 0xda, 0x73, 0xdc,
	0x97, 0xf9, 0x19, 0x1e, 0x2c, 0x50, 0x48, 0x26, 0x12, 0xa1, 0xb0, 0x6c, 0xf2, 0x34, 0xb5, 0xe3,
	0xee, 0xc8, 0xe4, 0x09, 0xd3, 0xe3, 0xa9, 0xfb, 0xc9, 0x8d, 0x6b, 0x1d, 0x39, 0xfe, 0x6e, 0xa0,
	0x1f, 0x2c, 0xd0, 0x8e, 0xb9, 0x84, 0xd8, 0x67, 0x9f, 0x39, 0x72, 0xef, 0x3f, 0x25, 0xb8, 0x77,
	0x9d, 0x37, 0xd7, 0x0c, 0x33, 0xd5, 0xd9, 0x61, 0xe6, 0xd5, 0x1d, 0xc3, 0xcc, 0x4d, 0x41, 0xff,
	0xf1, 0xe3, 0xcc, 0xe4, 0xc5, 0x64, 0xa9, 0x9d, 0x67, 0x6c, 0x81, 0xf8, 0x17, 0x93, 0xa5, 0x9a,
	0x3c, 0x86, 0xf6, 0xdf, 0x46, 0x38, 0xc2, 0x49, 0x02, 0xab, 0xee, 0x7e, 0xb4, 0x1c, 0x18, 0x5c,
	0x9b, 0x19, 0x7a, 0xbe, 0x81, 0x95, 0x6b, 0x12, 0x40, 0xf6, 0x80, 0x24, 0x28, 0x0d, 0xaa, 0x59,
	0xe7, 0x6e, 0x1f, 0x6c, 0xbb, 0xde, 0x60, 0xea, 0x54, 0xef, 0x6b, 0x78, 0x70, 0x43, 0x42, 0xee,
	0x8a, 0xed, 0x25, 0x0f, 0xcb, 0x97, 0x3d, 0xdc, 0x1e, 0x40, 0x73, 0x66, 0x28, 0x21, 0x1b, 0xb0,
	0x36, 0x23, 0xc6, 0x32, 0x37, 0xb1, 0x2e, 0x30, 0x11, 0x27, 0x02, 0x79, 0x77, 0x81, 0x34, 0x61,
	0xe9, 0x4f, 0xf6, 0x5a, 0x66, 0xd8, 0x2d, 0x91, 0x16, 0xd4, 0x07, 0x92, 0x15, 0xfa, 0x34, 0x37,
	0xdd, 0x32, 0x01, 0xa8, 0x1d, 0x08, 0xce, 0x51, 0x76, 0x2b, 0xdb, 0x14, 0xea, 0xe3, 0x69, 0x85,
	0xac, 0xc3, 0xea, 0xf8, 0x7b, 0x6e, 0xb9, 0x3a, 0x2c, 0x0e, 0x30, 0x3b, 0xe9, 0x96, 0xec, 0xd7,
	0x6e, 0x96, 0x5d, 0x74, 0xcb, 0x76, 0x8b, 0x57, 0x38, 0x32, 0x8a, 0x65, 0xdd, 0x0a, 0x69, 0x40,
	0xf5, 0x0b, 0x89, 0xc3, 0x8b, 0xee, 0xe2, 0xf6, 0x5f, 0x00, 0xa6, 0x93, 0x00, 0x79, 0x04, 0xd1,
	0x54, 0xba, 0xee, 0x98, 0x4e, 0x8b, 0xbc, 0x5b, 0x22, 0x2b, 0xb0, 0x1c, 0x84, 0x7d, 0xd7, 0x45,
	0x91, 0x77, 0xcb, 0xa4, 0x03, 0xf0, 0x2a, 0x37, 0x63, 0x52, 0xe5, 0xc5, 0xc6, 0x0f, 0xef, 0x36,
	0x4b, 0x6f, 0xdf, 0x6d, 0x96, 0xfe, 0xfd, 0x6e, 0xb3, 0xf4, 0xcf, 0xf7, 0x9b, 0x0b, 0x6f, 0xdf,
	0x6f, 0x2e, 0xfc, 0xeb, 0xfd, 0xe6, 0xc2, 0x37, 0x15, 0x56, 0x88, 0xe3, 0x9a, 0xfb, 0x5f, 0xfe,
	0xe5, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x66, 0x79, 0xa2, 0xc5, 0x5a, 0x0f, 0x00, 0x00,
}
