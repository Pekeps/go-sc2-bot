// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ui.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ActionControlGroup_ControlGroupAction int32

const (
	ActionControlGroup_nil            ActionControlGroup_ControlGroupAction = 0
	ActionControlGroup_Recall         ActionControlGroup_ControlGroupAction = 1
	ActionControlGroup_Set            ActionControlGroup_ControlGroupAction = 2
	ActionControlGroup_Append         ActionControlGroup_ControlGroupAction = 3
	ActionControlGroup_SetAndSteal    ActionControlGroup_ControlGroupAction = 4
	ActionControlGroup_AppendAndSteal ActionControlGroup_ControlGroupAction = 5
)

var ActionControlGroup_ControlGroupAction_name = map[int32]string{
	0: "ControlGroupAction_nil",
	1: "Recall",
	2: "Set",
	3: "Append",
	4: "SetAndSteal",
	5: "AppendAndSteal",
}
var ActionControlGroup_ControlGroupAction_value = map[string]int32{
	"ControlGroupAction_nil": 0,
	"Recall":                 1,
	"Set":                    2,
	"Append":                 3,
	"SetAndSteal":            4,
	"AppendAndSteal":         5,
}

func (x ActionControlGroup_ControlGroupAction) String() string {
	return proto.EnumName(ActionControlGroup_ControlGroupAction_name, int32(x))
}
func (ActionControlGroup_ControlGroupAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{9, 0}
}

type ActionSelectIdleWorker_Type int32

const (
	ActionSelectIdleWorker_nil    ActionSelectIdleWorker_Type = 0
	ActionSelectIdleWorker_Set    ActionSelectIdleWorker_Type = 1
	ActionSelectIdleWorker_Add    ActionSelectIdleWorker_Type = 2
	ActionSelectIdleWorker_All    ActionSelectIdleWorker_Type = 3
	ActionSelectIdleWorker_AddAll ActionSelectIdleWorker_Type = 4
)

var ActionSelectIdleWorker_Type_name = map[int32]string{
	0: "Type_nil",
	1: "Set",
	2: "Add",
	3: "All",
	4: "AddAll",
}
var ActionSelectIdleWorker_Type_value = map[string]int32{
	"Type_nil": 0,
	"Set":      1,
	"Add":      2,
	"All":      3,
	"AddAll":   4,
}

func (x ActionSelectIdleWorker_Type) String() string {
	return proto.EnumName(ActionSelectIdleWorker_Type_name, int32(x))
}
func (ActionSelectIdleWorker_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{13, 0}
}

type ActionMultiPanel_Type int32

const (
	ActionMultiPanel_nil               ActionMultiPanel_Type = 0
	ActionMultiPanel_SingleSelect      ActionMultiPanel_Type = 1
	ActionMultiPanel_DeselectUnit      ActionMultiPanel_Type = 2
	ActionMultiPanel_SelectAllOfType   ActionMultiPanel_Type = 3
	ActionMultiPanel_DeselectAllOfType ActionMultiPanel_Type = 4
)

var ActionMultiPanel_Type_name = map[int32]string{
	0: "Type_nil",
	1: "SingleSelect",
	2: "DeselectUnit",
	3: "SelectAllOfType",
	4: "DeselectAllOfType",
}
var ActionMultiPanel_Type_value = map[string]int32{
	"Type_nil":          0,
	"SingleSelect":      1,
	"DeselectUnit":      2,
	"SelectAllOfType":   3,
	"DeselectAllOfType": 4,
}

func (x ActionMultiPanel_Type) String() string {
	return proto.EnumName(ActionMultiPanel_Type_name, int32(x))
}
func (ActionMultiPanel_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{14, 0}
}

type ObservationUI struct {
	Groups []*ControlGroup `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
	// Types that are valid to be assigned to Panel:
	//	*ObservationUI_Single
	//	*ObservationUI_Multi
	//	*ObservationUI_Cargo
	//	*ObservationUI_Production
	Panel isObservationUI_Panel `protobuf_oneof:"panel"`
}

func (m *ObservationUI) Reset()         { *m = ObservationUI{} }
func (m *ObservationUI) String() string { return proto.CompactTextString(m) }
func (*ObservationUI) ProtoMessage()    {}
func (*ObservationUI) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{0}
}
func (m *ObservationUI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObservationUI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObservationUI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ObservationUI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservationUI.Merge(dst, src)
}
func (m *ObservationUI) XXX_Size() int {
	return m.Size()
}
func (m *ObservationUI) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservationUI.DiscardUnknown(m)
}

var xxx_messageInfo_ObservationUI proto.InternalMessageInfo

type isObservationUI_Panel interface {
	isObservationUI_Panel()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ObservationUI_Single struct {
	Single *SinglePanel `protobuf:"bytes,2,opt,name=single,oneof"`
}
type ObservationUI_Multi struct {
	Multi *MultiPanel `protobuf:"bytes,3,opt,name=multi,oneof"`
}
type ObservationUI_Cargo struct {
	Cargo *CargoPanel `protobuf:"bytes,4,opt,name=cargo,oneof"`
}
type ObservationUI_Production struct {
	Production *ProductionPanel `protobuf:"bytes,5,opt,name=production,oneof"`
}

func (*ObservationUI_Single) isObservationUI_Panel()     {}
func (*ObservationUI_Multi) isObservationUI_Panel()      {}
func (*ObservationUI_Cargo) isObservationUI_Panel()      {}
func (*ObservationUI_Production) isObservationUI_Panel() {}

func (m *ObservationUI) GetPanel() isObservationUI_Panel {
	if m != nil {
		return m.Panel
	}
	return nil
}

func (m *ObservationUI) GetGroups() []*ControlGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ObservationUI) GetSingle() *SinglePanel {
	if x, ok := m.GetPanel().(*ObservationUI_Single); ok {
		return x.Single
	}
	return nil
}

func (m *ObservationUI) GetMulti() *MultiPanel {
	if x, ok := m.GetPanel().(*ObservationUI_Multi); ok {
		return x.Multi
	}
	return nil
}

func (m *ObservationUI) GetCargo() *CargoPanel {
	if x, ok := m.GetPanel().(*ObservationUI_Cargo); ok {
		return x.Cargo
	}
	return nil
}

func (m *ObservationUI) GetProduction() *ProductionPanel {
	if x, ok := m.GetPanel().(*ObservationUI_Production); ok {
		return x.Production
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ObservationUI) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ObservationUI_OneofMarshaler, _ObservationUI_OneofUnmarshaler, _ObservationUI_OneofSizer, []interface{}{
		(*ObservationUI_Single)(nil),
		(*ObservationUI_Multi)(nil),
		(*ObservationUI_Cargo)(nil),
		(*ObservationUI_Production)(nil),
	}
}

func _ObservationUI_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ObservationUI)
	// panel
	switch x := m.Panel.(type) {
	case *ObservationUI_Single:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Single); err != nil {
			return err
		}
	case *ObservationUI_Multi:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Multi); err != nil {
			return err
		}
	case *ObservationUI_Cargo:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cargo); err != nil {
			return err
		}
	case *ObservationUI_Production:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Production); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ObservationUI.Panel has unexpected type %T", x)
	}
	return nil
}

func _ObservationUI_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ObservationUI)
	switch tag {
	case 2: // panel.single
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SinglePanel)
		err := b.DecodeMessage(msg)
		m.Panel = &ObservationUI_Single{msg}
		return true, err
	case 3: // panel.multi
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MultiPanel)
		err := b.DecodeMessage(msg)
		m.Panel = &ObservationUI_Multi{msg}
		return true, err
	case 4: // panel.cargo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CargoPanel)
		err := b.DecodeMessage(msg)
		m.Panel = &ObservationUI_Cargo{msg}
		return true, err
	case 5: // panel.production
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProductionPanel)
		err := b.DecodeMessage(msg)
		m.Panel = &ObservationUI_Production{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ObservationUI_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ObservationUI)
	// panel
	switch x := m.Panel.(type) {
	case *ObservationUI_Single:
		s := proto.Size(x.Single)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ObservationUI_Multi:
		s := proto.Size(x.Multi)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ObservationUI_Cargo:
		s := proto.Size(x.Cargo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ObservationUI_Production:
		s := proto.Size(x.Production)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ControlGroup struct {
	ControlGroupIndex uint32     `protobuf:"varint,1,opt,name=control_group_index,json=controlGroupIndex,proto3" json:"control_group_index,omitempty"`
	LeaderUnitType    UnitTypeID `protobuf:"varint,2,opt,name=leader_unit_type,json=leaderUnitType,proto3,casttype=UnitTypeID" json:"leader_unit_type,omitempty"`
	Count             uint32     `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *ControlGroup) Reset()         { *m = ControlGroup{} }
func (m *ControlGroup) String() string { return proto.CompactTextString(m) }
func (*ControlGroup) ProtoMessage()    {}
func (*ControlGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{1}
}
func (m *ControlGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ControlGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlGroup.Merge(dst, src)
}
func (m *ControlGroup) XXX_Size() int {
	return m.Size()
}
func (m *ControlGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ControlGroup proto.InternalMessageInfo

func (m *ControlGroup) GetControlGroupIndex() uint32 {
	if m != nil {
		return m.ControlGroupIndex
	}
	return 0
}

func (m *ControlGroup) GetLeaderUnitType() UnitTypeID {
	if m != nil {
		return m.LeaderUnitType
	}
	return 0
}

func (m *ControlGroup) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type UnitInfo struct {
	UnitType            UnitTypeID `protobuf:"varint,1,opt,name=unit_type,json=unitType,proto3,casttype=UnitTypeID" json:"unit_type,omitempty"`
	PlayerRelative      PlayerID   `protobuf:"varint,2,opt,name=player_relative,json=playerRelative,proto3,casttype=PlayerID" json:"player_relative,omitempty"`
	Health              int32      `protobuf:"varint,3,opt,name=health,proto3" json:"health,omitempty"`
	Shields             int32      `protobuf:"varint,4,opt,name=shields,proto3" json:"shields,omitempty"`
	Energy              int32      `protobuf:"varint,5,opt,name=energy,proto3" json:"energy,omitempty"`
	TransportSlotsTaken int32      `protobuf:"varint,6,opt,name=transport_slots_taken,json=transportSlotsTaken,proto3" json:"transport_slots_taken,omitempty"`
	BuildProgress       float32    `protobuf:"fixed32,7,opt,name=build_progress,json=buildProgress,proto3" json:"build_progress,omitempty"`
	AddOn               *UnitInfo  `protobuf:"bytes,8,opt,name=add_on,json=addOn" json:"add_on,omitempty"`
	MaxHealth           int32      `protobuf:"varint,9,opt,name=max_health,json=maxHealth,proto3" json:"max_health,omitempty"`
	MaxShields          int32      `protobuf:"varint,10,opt,name=max_shields,json=maxShields,proto3" json:"max_shields,omitempty"`
	MaxEnergy           int32      `protobuf:"varint,11,opt,name=max_energy,json=maxEnergy,proto3" json:"max_energy,omitempty"`
}

func (m *UnitInfo) Reset()         { *m = UnitInfo{} }
func (m *UnitInfo) String() string { return proto.CompactTextString(m) }
func (*UnitInfo) ProtoMessage()    {}
func (*UnitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{2}
}
func (m *UnitInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnitInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitInfo.Merge(dst, src)
}
func (m *UnitInfo) XXX_Size() int {
	return m.Size()
}
func (m *UnitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UnitInfo proto.InternalMessageInfo

func (m *UnitInfo) GetUnitType() UnitTypeID {
	if m != nil {
		return m.UnitType
	}
	return 0
}

func (m *UnitInfo) GetPlayerRelative() PlayerID {
	if m != nil {
		return m.PlayerRelative
	}
	return 0
}

func (m *UnitInfo) GetHealth() int32 {
	if m != nil {
		return m.Health
	}
	return 0
}

func (m *UnitInfo) GetShields() int32 {
	if m != nil {
		return m.Shields
	}
	return 0
}

func (m *UnitInfo) GetEnergy() int32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *UnitInfo) GetTransportSlotsTaken() int32 {
	if m != nil {
		return m.TransportSlotsTaken
	}
	return 0
}

func (m *UnitInfo) GetBuildProgress() float32 {
	if m != nil {
		return m.BuildProgress
	}
	return 0
}

func (m *UnitInfo) GetAddOn() *UnitInfo {
	if m != nil {
		return m.AddOn
	}
	return nil
}

func (m *UnitInfo) GetMaxHealth() int32 {
	if m != nil {
		return m.MaxHealth
	}
	return 0
}

func (m *UnitInfo) GetMaxShields() int32 {
	if m != nil {
		return m.MaxShields
	}
	return 0
}

func (m *UnitInfo) GetMaxEnergy() int32 {
	if m != nil {
		return m.MaxEnergy
	}
	return 0
}

type SinglePanel struct {
	Unit               *UnitInfo `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
	AttackUpgradeLevel int32     `protobuf:"varint,2,opt,name=attack_upgrade_level,json=attackUpgradeLevel,proto3" json:"attack_upgrade_level,omitempty"`
	ArmorUpgradeLevel  int32     `protobuf:"varint,3,opt,name=armor_upgrade_level,json=armorUpgradeLevel,proto3" json:"armor_upgrade_level,omitempty"`
	ShieldUpgradeLevel int32     `protobuf:"varint,4,opt,name=shield_upgrade_level,json=shieldUpgradeLevel,proto3" json:"shield_upgrade_level,omitempty"`
	Buffs              []int32   `protobuf:"varint,5,rep,packed,name=buffs" json:"buffs,omitempty"`
}

func (m *SinglePanel) Reset()         { *m = SinglePanel{} }
func (m *SinglePanel) String() string { return proto.CompactTextString(m) }
func (*SinglePanel) ProtoMessage()    {}
func (*SinglePanel) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{3}
}
func (m *SinglePanel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SinglePanel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SinglePanel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SinglePanel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SinglePanel.Merge(dst, src)
}
func (m *SinglePanel) XXX_Size() int {
	return m.Size()
}
func (m *SinglePanel) XXX_DiscardUnknown() {
	xxx_messageInfo_SinglePanel.DiscardUnknown(m)
}

var xxx_messageInfo_SinglePanel proto.InternalMessageInfo

func (m *SinglePanel) GetUnit() *UnitInfo {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *SinglePanel) GetAttackUpgradeLevel() int32 {
	if m != nil {
		return m.AttackUpgradeLevel
	}
	return 0
}

func (m *SinglePanel) GetArmorUpgradeLevel() int32 {
	if m != nil {
		return m.ArmorUpgradeLevel
	}
	return 0
}

func (m *SinglePanel) GetShieldUpgradeLevel() int32 {
	if m != nil {
		return m.ShieldUpgradeLevel
	}
	return 0
}

func (m *SinglePanel) GetBuffs() []int32 {
	if m != nil {
		return m.Buffs
	}
	return nil
}

type MultiPanel struct {
	Units []*UnitInfo `protobuf:"bytes,1,rep,name=units" json:"units,omitempty"`
}

func (m *MultiPanel) Reset()         { *m = MultiPanel{} }
func (m *MultiPanel) String() string { return proto.CompactTextString(m) }
func (*MultiPanel) ProtoMessage()    {}
func (*MultiPanel) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{4}
}
func (m *MultiPanel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiPanel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiPanel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MultiPanel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiPanel.Merge(dst, src)
}
func (m *MultiPanel) XXX_Size() int {
	return m.Size()
}
func (m *MultiPanel) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiPanel.DiscardUnknown(m)
}

var xxx_messageInfo_MultiPanel proto.InternalMessageInfo

func (m *MultiPanel) GetUnits() []*UnitInfo {
	if m != nil {
		return m.Units
	}
	return nil
}

type CargoPanel struct {
	Unit           *UnitInfo   `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
	Passengers     []*UnitInfo `protobuf:"bytes,2,rep,name=passengers" json:"passengers,omitempty"`
	SlotsAvailable int32       `protobuf:"varint,3,opt,name=slots_available,json=slotsAvailable,proto3" json:"slots_available,omitempty"`
}

func (m *CargoPanel) Reset()         { *m = CargoPanel{} }
func (m *CargoPanel) String() string { return proto.CompactTextString(m) }
func (*CargoPanel) ProtoMessage()    {}
func (*CargoPanel) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{5}
}
func (m *CargoPanel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CargoPanel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CargoPanel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CargoPanel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CargoPanel.Merge(dst, src)
}
func (m *CargoPanel) XXX_Size() int {
	return m.Size()
}
func (m *CargoPanel) XXX_DiscardUnknown() {
	xxx_messageInfo_CargoPanel.DiscardUnknown(m)
}

var xxx_messageInfo_CargoPanel proto.InternalMessageInfo

func (m *CargoPanel) GetUnit() *UnitInfo {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *CargoPanel) GetPassengers() []*UnitInfo {
	if m != nil {
		return m.Passengers
	}
	return nil
}

func (m *CargoPanel) GetSlotsAvailable() int32 {
	if m != nil {
		return m.SlotsAvailable
	}
	return 0
}

type BuildItem struct {
	AbilityId     AbilityID `protobuf:"varint,1,opt,name=ability_id,json=abilityId,proto3,casttype=AbilityID" json:"ability_id,omitempty"`
	BuildProgress float32   `protobuf:"fixed32,2,opt,name=build_progress,json=buildProgress,proto3" json:"build_progress,omitempty"`
}

func (m *BuildItem) Reset()         { *m = BuildItem{} }
func (m *BuildItem) String() string { return proto.CompactTextString(m) }
func (*BuildItem) ProtoMessage()    {}
func (*BuildItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{6}
}
func (m *BuildItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BuildItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildItem.Merge(dst, src)
}
func (m *BuildItem) XXX_Size() int {
	return m.Size()
}
func (m *BuildItem) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildItem.DiscardUnknown(m)
}

var xxx_messageInfo_BuildItem proto.InternalMessageInfo

func (m *BuildItem) GetAbilityId() AbilityID {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func (m *BuildItem) GetBuildProgress() float32 {
	if m != nil {
		return m.BuildProgress
	}
	return 0
}

type ProductionPanel struct {
	Unit            *UnitInfo    `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
	BuildQueue      []*UnitInfo  `protobuf:"bytes,2,rep,name=build_queue,json=buildQueue" json:"build_queue,omitempty"`
	ProductionQueue []*BuildItem `protobuf:"bytes,3,rep,name=production_queue,json=productionQueue" json:"production_queue,omitempty"`
}

func (m *ProductionPanel) Reset()         { *m = ProductionPanel{} }
func (m *ProductionPanel) String() string { return proto.CompactTextString(m) }
func (*ProductionPanel) ProtoMessage()    {}
func (*ProductionPanel) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{7}
}
func (m *ProductionPanel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProductionPanel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProductionPanel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ProductionPanel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductionPanel.Merge(dst, src)
}
func (m *ProductionPanel) XXX_Size() int {
	return m.Size()
}
func (m *ProductionPanel) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductionPanel.DiscardUnknown(m)
}

var xxx_messageInfo_ProductionPanel proto.InternalMessageInfo

func (m *ProductionPanel) GetUnit() *UnitInfo {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *ProductionPanel) GetBuildQueue() []*UnitInfo {
	if m != nil {
		return m.BuildQueue
	}
	return nil
}

func (m *ProductionPanel) GetProductionQueue() []*BuildItem {
	if m != nil {
		return m.ProductionQueue
	}
	return nil
}

type ActionUI struct {
	// Types that are valid to be assigned to Action:
	//	*ActionUI_ControlGroup
	//	*ActionUI_SelectArmy
	//	*ActionUI_SelectWarpGates
	//	*ActionUI_SelectLarva
	//	*ActionUI_SelectIdleWorker
	//	*ActionUI_MultiPanel
	//	*ActionUI_CargoPanel
	//	*ActionUI_ProductionPanel
	//	*ActionUI_ToggleAutocast
	Action isActionUI_Action `protobuf_oneof:"action"`
}

func (m *ActionUI) Reset()         { *m = ActionUI{} }
func (m *ActionUI) String() string { return proto.CompactTextString(m) }
func (*ActionUI) ProtoMessage()    {}
func (*ActionUI) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{8}
}
func (m *ActionUI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionUI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionUI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionUI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionUI.Merge(dst, src)
}
func (m *ActionUI) XXX_Size() int {
	return m.Size()
}
func (m *ActionUI) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionUI.DiscardUnknown(m)
}

var xxx_messageInfo_ActionUI proto.InternalMessageInfo

type isActionUI_Action interface {
	isActionUI_Action()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActionUI_ControlGroup struct {
	ControlGroup *ActionControlGroup `protobuf:"bytes,1,opt,name=control_group,json=controlGroup,oneof"`
}
type ActionUI_SelectArmy struct {
	SelectArmy *ActionSelectArmy `protobuf:"bytes,2,opt,name=select_army,json=selectArmy,oneof"`
}
type ActionUI_SelectWarpGates struct {
	SelectWarpGates *ActionSelectWarpGates `protobuf:"bytes,3,opt,name=select_warp_gates,json=selectWarpGates,oneof"`
}
type ActionUI_SelectLarva struct {
	SelectLarva *ActionSelectLarva `protobuf:"bytes,4,opt,name=select_larva,json=selectLarva,oneof"`
}
type ActionUI_SelectIdleWorker struct {
	SelectIdleWorker *ActionSelectIdleWorker `protobuf:"bytes,5,opt,name=select_idle_worker,json=selectIdleWorker,oneof"`
}
type ActionUI_MultiPanel struct {
	MultiPanel *ActionMultiPanel `protobuf:"bytes,6,opt,name=multi_panel,json=multiPanel,oneof"`
}
type ActionUI_CargoPanel struct {
	CargoPanel *ActionCargoPanelUnload `protobuf:"bytes,7,opt,name=cargo_panel,json=cargoPanel,oneof"`
}
type ActionUI_ProductionPanel struct {
	ProductionPanel *ActionProductionPanelRemoveFromQueue `protobuf:"bytes,8,opt,name=production_panel,json=productionPanel,oneof"`
}
type ActionUI_ToggleAutocast struct {
	ToggleAutocast *ActionToggleAutocast `protobuf:"bytes,9,opt,name=toggle_autocast,json=toggleAutocast,oneof"`
}

func (*ActionUI_ControlGroup) isActionUI_Action()     {}
func (*ActionUI_SelectArmy) isActionUI_Action()       {}
func (*ActionUI_SelectWarpGates) isActionUI_Action()  {}
func (*ActionUI_SelectLarva) isActionUI_Action()      {}
func (*ActionUI_SelectIdleWorker) isActionUI_Action() {}
func (*ActionUI_MultiPanel) isActionUI_Action()       {}
func (*ActionUI_CargoPanel) isActionUI_Action()       {}
func (*ActionUI_ProductionPanel) isActionUI_Action()  {}
func (*ActionUI_ToggleAutocast) isActionUI_Action()   {}

func (m *ActionUI) GetAction() isActionUI_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ActionUI) GetControlGroup() *ActionControlGroup {
	if x, ok := m.GetAction().(*ActionUI_ControlGroup); ok {
		return x.ControlGroup
	}
	return nil
}

func (m *ActionUI) GetSelectArmy() *ActionSelectArmy {
	if x, ok := m.GetAction().(*ActionUI_SelectArmy); ok {
		return x.SelectArmy
	}
	return nil
}

func (m *ActionUI) GetSelectWarpGates() *ActionSelectWarpGates {
	if x, ok := m.GetAction().(*ActionUI_SelectWarpGates); ok {
		return x.SelectWarpGates
	}
	return nil
}

func (m *ActionUI) GetSelectLarva() *ActionSelectLarva {
	if x, ok := m.GetAction().(*ActionUI_SelectLarva); ok {
		return x.SelectLarva
	}
	return nil
}

func (m *ActionUI) GetSelectIdleWorker() *ActionSelectIdleWorker {
	if x, ok := m.GetAction().(*ActionUI_SelectIdleWorker); ok {
		return x.SelectIdleWorker
	}
	return nil
}

func (m *ActionUI) GetMultiPanel() *ActionMultiPanel {
	if x, ok := m.GetAction().(*ActionUI_MultiPanel); ok {
		return x.MultiPanel
	}
	return nil
}

func (m *ActionUI) GetCargoPanel() *ActionCargoPanelUnload {
	if x, ok := m.GetAction().(*ActionUI_CargoPanel); ok {
		return x.CargoPanel
	}
	return nil
}

func (m *ActionUI) GetProductionPanel() *ActionProductionPanelRemoveFromQueue {
	if x, ok := m.GetAction().(*ActionUI_ProductionPanel); ok {
		return x.ProductionPanel
	}
	return nil
}

func (m *ActionUI) GetToggleAutocast() *ActionToggleAutocast {
	if x, ok := m.GetAction().(*ActionUI_ToggleAutocast); ok {
		return x.ToggleAutocast
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionUI) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionUI_OneofMarshaler, _ActionUI_OneofUnmarshaler, _ActionUI_OneofSizer, []interface{}{
		(*ActionUI_ControlGroup)(nil),
		(*ActionUI_SelectArmy)(nil),
		(*ActionUI_SelectWarpGates)(nil),
		(*ActionUI_SelectLarva)(nil),
		(*ActionUI_SelectIdleWorker)(nil),
		(*ActionUI_MultiPanel)(nil),
		(*ActionUI_CargoPanel)(nil),
		(*ActionUI_ProductionPanel)(nil),
		(*ActionUI_ToggleAutocast)(nil),
	}
}

func _ActionUI_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionUI)
	// action
	switch x := m.Action.(type) {
	case *ActionUI_ControlGroup:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ControlGroup); err != nil {
			return err
		}
	case *ActionUI_SelectArmy:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectArmy); err != nil {
			return err
		}
	case *ActionUI_SelectWarpGates:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectWarpGates); err != nil {
			return err
		}
	case *ActionUI_SelectLarva:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectLarva); err != nil {
			return err
		}
	case *ActionUI_SelectIdleWorker:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectIdleWorker); err != nil {
			return err
		}
	case *ActionUI_MultiPanel:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultiPanel); err != nil {
			return err
		}
	case *ActionUI_CargoPanel:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CargoPanel); err != nil {
			return err
		}
	case *ActionUI_ProductionPanel:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProductionPanel); err != nil {
			return err
		}
	case *ActionUI_ToggleAutocast:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ToggleAutocast); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ActionUI.Action has unexpected type %T", x)
	}
	return nil
}

func _ActionUI_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionUI)
	switch tag {
	case 1: // action.control_group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionControlGroup)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_ControlGroup{msg}
		return true, err
	case 2: // action.select_army
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSelectArmy)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_SelectArmy{msg}
		return true, err
	case 3: // action.select_warp_gates
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSelectWarpGates)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_SelectWarpGates{msg}
		return true, err
	case 4: // action.select_larva
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSelectLarva)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_SelectLarva{msg}
		return true, err
	case 5: // action.select_idle_worker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSelectIdleWorker)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_SelectIdleWorker{msg}
		return true, err
	case 6: // action.multi_panel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionMultiPanel)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_MultiPanel{msg}
		return true, err
	case 7: // action.cargo_panel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionCargoPanelUnload)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_CargoPanel{msg}
		return true, err
	case 8: // action.production_panel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionProductionPanelRemoveFromQueue)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_ProductionPanel{msg}
		return true, err
	case 9: // action.toggle_autocast
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionToggleAutocast)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_ToggleAutocast{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ActionUI_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionUI)
	// action
	switch x := m.Action.(type) {
	case *ActionUI_ControlGroup:
		s := proto.Size(x.ControlGroup)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_SelectArmy:
		s := proto.Size(x.SelectArmy)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_SelectWarpGates:
		s := proto.Size(x.SelectWarpGates)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_SelectLarva:
		s := proto.Size(x.SelectLarva)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_SelectIdleWorker:
		s := proto.Size(x.SelectIdleWorker)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_MultiPanel:
		s := proto.Size(x.MultiPanel)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_CargoPanel:
		s := proto.Size(x.CargoPanel)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_ProductionPanel:
		s := proto.Size(x.ProductionPanel)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_ToggleAutocast:
		s := proto.Size(x.ToggleAutocast)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActionControlGroup struct {
	Action            ActionControlGroup_ControlGroupAction `protobuf:"varint,1,opt,name=action,proto3,enum=SC2APIProtocol.ActionControlGroup_ControlGroupAction" json:"action,omitempty"`
	ControlGroupIndex uint32                                `protobuf:"varint,2,opt,name=control_group_index,json=controlGroupIndex,proto3" json:"control_group_index,omitempty"`
}

func (m *ActionControlGroup) Reset()         { *m = ActionControlGroup{} }
func (m *ActionControlGroup) String() string { return proto.CompactTextString(m) }
func (*ActionControlGroup) ProtoMessage()    {}
func (*ActionControlGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{9}
}
func (m *ActionControlGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionControlGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionControlGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionControlGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionControlGroup.Merge(dst, src)
}
func (m *ActionControlGroup) XXX_Size() int {
	return m.Size()
}
func (m *ActionControlGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionControlGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ActionControlGroup proto.InternalMessageInfo

func (m *ActionControlGroup) GetAction() ActionControlGroup_ControlGroupAction {
	if m != nil {
		return m.Action
	}
	return ActionControlGroup_nil
}

func (m *ActionControlGroup) GetControlGroupIndex() uint32 {
	if m != nil {
		return m.ControlGroupIndex
	}
	return 0
}

type ActionSelectArmy struct {
	SelectionAdd bool `protobuf:"varint,1,opt,name=selection_add,json=selectionAdd,proto3" json:"selection_add,omitempty"`
}

func (m *ActionSelectArmy) Reset()         { *m = ActionSelectArmy{} }
func (m *ActionSelectArmy) String() string { return proto.CompactTextString(m) }
func (*ActionSelectArmy) ProtoMessage()    {}
func (*ActionSelectArmy) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{10}
}
func (m *ActionSelectArmy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionSelectArmy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionSelectArmy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionSelectArmy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionSelectArmy.Merge(dst, src)
}
func (m *ActionSelectArmy) XXX_Size() int {
	return m.Size()
}
func (m *ActionSelectArmy) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionSelectArmy.DiscardUnknown(m)
}

var xxx_messageInfo_ActionSelectArmy proto.InternalMessageInfo

func (m *ActionSelectArmy) GetSelectionAdd() bool {
	if m != nil {
		return m.SelectionAdd
	}
	return false
}

type ActionSelectWarpGates struct {
	SelectionAdd bool `protobuf:"varint,1,opt,name=selection_add,json=selectionAdd,proto3" json:"selection_add,omitempty"`
}

func (m *ActionSelectWarpGates) Reset()         { *m = ActionSelectWarpGates{} }
func (m *ActionSelectWarpGates) String() string { return proto.CompactTextString(m) }
func (*ActionSelectWarpGates) ProtoMessage()    {}
func (*ActionSelectWarpGates) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{11}
}
func (m *ActionSelectWarpGates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionSelectWarpGates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionSelectWarpGates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionSelectWarpGates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionSelectWarpGates.Merge(dst, src)
}
func (m *ActionSelectWarpGates) XXX_Size() int {
	return m.Size()
}
func (m *ActionSelectWarpGates) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionSelectWarpGates.DiscardUnknown(m)
}

var xxx_messageInfo_ActionSelectWarpGates proto.InternalMessageInfo

func (m *ActionSelectWarpGates) GetSelectionAdd() bool {
	if m != nil {
		return m.SelectionAdd
	}
	return false
}

type ActionSelectLarva struct {
}

func (m *ActionSelectLarva) Reset()         { *m = ActionSelectLarva{} }
func (m *ActionSelectLarva) String() string { return proto.CompactTextString(m) }
func (*ActionSelectLarva) ProtoMessage()    {}
func (*ActionSelectLarva) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{12}
}
func (m *ActionSelectLarva) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionSelectLarva) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionSelectLarva.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionSelectLarva) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionSelectLarva.Merge(dst, src)
}
func (m *ActionSelectLarva) XXX_Size() int {
	return m.Size()
}
func (m *ActionSelectLarva) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionSelectLarva.DiscardUnknown(m)
}

var xxx_messageInfo_ActionSelectLarva proto.InternalMessageInfo

type ActionSelectIdleWorker struct {
	Type ActionSelectIdleWorker_Type `protobuf:"varint,1,opt,name=type,proto3,enum=SC2APIProtocol.ActionSelectIdleWorker_Type" json:"type,omitempty"`
}

func (m *ActionSelectIdleWorker) Reset()         { *m = ActionSelectIdleWorker{} }
func (m *ActionSelectIdleWorker) String() string { return proto.CompactTextString(m) }
func (*ActionSelectIdleWorker) ProtoMessage()    {}
func (*ActionSelectIdleWorker) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{13}
}
func (m *ActionSelectIdleWorker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionSelectIdleWorker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionSelectIdleWorker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionSelectIdleWorker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionSelectIdleWorker.Merge(dst, src)
}
func (m *ActionSelectIdleWorker) XXX_Size() int {
	return m.Size()
}
func (m *ActionSelectIdleWorker) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionSelectIdleWorker.DiscardUnknown(m)
}

var xxx_messageInfo_ActionSelectIdleWorker proto.InternalMessageInfo

func (m *ActionSelectIdleWorker) GetType() ActionSelectIdleWorker_Type {
	if m != nil {
		return m.Type
	}
	return ActionSelectIdleWorker_nil
}

type ActionMultiPanel struct {
	Type      ActionMultiPanel_Type `protobuf:"varint,1,opt,name=type,proto3,enum=SC2APIProtocol.ActionMultiPanel_Type" json:"type,omitempty"`
	UnitIndex int32                 `protobuf:"varint,2,opt,name=unit_index,json=unitIndex,proto3" json:"unit_index,omitempty"`
}

func (m *ActionMultiPanel) Reset()         { *m = ActionMultiPanel{} }
func (m *ActionMultiPanel) String() string { return proto.CompactTextString(m) }
func (*ActionMultiPanel) ProtoMessage()    {}
func (*ActionMultiPanel) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{14}
}
func (m *ActionMultiPanel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionMultiPanel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionMultiPanel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionMultiPanel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionMultiPanel.Merge(dst, src)
}
func (m *ActionMultiPanel) XXX_Size() int {
	return m.Size()
}
func (m *ActionMultiPanel) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionMultiPanel.DiscardUnknown(m)
}

var xxx_messageInfo_ActionMultiPanel proto.InternalMessageInfo

func (m *ActionMultiPanel) GetType() ActionMultiPanel_Type {
	if m != nil {
		return m.Type
	}
	return ActionMultiPanel_nil
}

func (m *ActionMultiPanel) GetUnitIndex() int32 {
	if m != nil {
		return m.UnitIndex
	}
	return 0
}

type ActionCargoPanelUnload struct {
	UnitIndex int32 `protobuf:"varint,1,opt,name=unit_index,json=unitIndex,proto3" json:"unit_index,omitempty"`
}

func (m *ActionCargoPanelUnload) Reset()         { *m = ActionCargoPanelUnload{} }
func (m *ActionCargoPanelUnload) String() string { return proto.CompactTextString(m) }
func (*ActionCargoPanelUnload) ProtoMessage()    {}
func (*ActionCargoPanelUnload) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{15}
}
func (m *ActionCargoPanelUnload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionCargoPanelUnload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionCargoPanelUnload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionCargoPanelUnload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionCargoPanelUnload.Merge(dst, src)
}
func (m *ActionCargoPanelUnload) XXX_Size() int {
	return m.Size()
}
func (m *ActionCargoPanelUnload) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionCargoPanelUnload.DiscardUnknown(m)
}

var xxx_messageInfo_ActionCargoPanelUnload proto.InternalMessageInfo

func (m *ActionCargoPanelUnload) GetUnitIndex() int32 {
	if m != nil {
		return m.UnitIndex
	}
	return 0
}

type ActionProductionPanelRemoveFromQueue struct {
	UnitIndex int32 `protobuf:"varint,1,opt,name=unit_index,json=unitIndex,proto3" json:"unit_index,omitempty"`
}

func (m *ActionProductionPanelRemoveFromQueue) Reset()         { *m = ActionProductionPanelRemoveFromQueue{} }
func (m *ActionProductionPanelRemoveFromQueue) String() string { return proto.CompactTextString(m) }
func (*ActionProductionPanelRemoveFromQueue) ProtoMessage()    {}
func (*ActionProductionPanelRemoveFromQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{16}
}
func (m *ActionProductionPanelRemoveFromQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionProductionPanelRemoveFromQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionProductionPanelRemoveFromQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionProductionPanelRemoveFromQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionProductionPanelRemoveFromQueue.Merge(dst, src)
}
func (m *ActionProductionPanelRemoveFromQueue) XXX_Size() int {
	return m.Size()
}
func (m *ActionProductionPanelRemoveFromQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionProductionPanelRemoveFromQueue.DiscardUnknown(m)
}

var xxx_messageInfo_ActionProductionPanelRemoveFromQueue proto.InternalMessageInfo

func (m *ActionProductionPanelRemoveFromQueue) GetUnitIndex() int32 {
	if m != nil {
		return m.UnitIndex
	}
	return 0
}

type ActionToggleAutocast struct {
	AbilityId AbilityID `protobuf:"varint,1,opt,name=ability_id,json=abilityId,proto3,casttype=AbilityID" json:"ability_id,omitempty"`
}

func (m *ActionToggleAutocast) Reset()         { *m = ActionToggleAutocast{} }
func (m *ActionToggleAutocast) String() string { return proto.CompactTextString(m) }
func (*ActionToggleAutocast) ProtoMessage()    {}
func (*ActionToggleAutocast) Descriptor() ([]byte, []int) {
	return fileDescriptor_ui_0a4a812a4b9539d9, []int{17}
}
func (m *ActionToggleAutocast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionToggleAutocast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionToggleAutocast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionToggleAutocast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionToggleAutocast.Merge(dst, src)
}
func (m *ActionToggleAutocast) XXX_Size() int {
	return m.Size()
}
func (m *ActionToggleAutocast) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionToggleAutocast.DiscardUnknown(m)
}

var xxx_messageInfo_ActionToggleAutocast proto.InternalMessageInfo

func (m *ActionToggleAutocast) GetAbilityId() AbilityID {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func init() {
	proto.RegisterType((*ObservationUI)(nil), "SC2APIProtocol.ObservationUI")
	proto.RegisterType((*ControlGroup)(nil), "SC2APIProtocol.ControlGroup")
	proto.RegisterType((*UnitInfo)(nil), "SC2APIProtocol.UnitInfo")
	proto.RegisterType((*SinglePanel)(nil), "SC2APIProtocol.SinglePanel")
	proto.RegisterType((*MultiPanel)(nil), "SC2APIProtocol.MultiPanel")
	proto.RegisterType((*CargoPanel)(nil), "SC2APIProtocol.CargoPanel")
	proto.RegisterType((*BuildItem)(nil), "SC2APIProtocol.BuildItem")
	proto.RegisterType((*ProductionPanel)(nil), "SC2APIProtocol.ProductionPanel")
	proto.RegisterType((*ActionUI)(nil), "SC2APIProtocol.ActionUI")
	proto.RegisterType((*ActionControlGroup)(nil), "SC2APIProtocol.ActionControlGroup")
	proto.RegisterType((*ActionSelectArmy)(nil), "SC2APIProtocol.ActionSelectArmy")
	proto.RegisterType((*ActionSelectWarpGates)(nil), "SC2APIProtocol.ActionSelectWarpGates")
	proto.RegisterType((*ActionSelectLarva)(nil), "SC2APIProtocol.ActionSelectLarva")
	proto.RegisterType((*ActionSelectIdleWorker)(nil), "SC2APIProtocol.ActionSelectIdleWorker")
	proto.RegisterType((*ActionMultiPanel)(nil), "SC2APIProtocol.ActionMultiPanel")
	proto.RegisterType((*ActionCargoPanelUnload)(nil), "SC2APIProtocol.ActionCargoPanelUnload")
	proto.RegisterType((*ActionProductionPanelRemoveFromQueue)(nil), "SC2APIProtocol.ActionProductionPanelRemoveFromQueue")
	proto.RegisterType((*ActionToggleAutocast)(nil), "SC2APIProtocol.ActionToggleAutocast")
	proto.RegisterEnum("SC2APIProtocol.ActionControlGroup_ControlGroupAction", ActionControlGroup_ControlGroupAction_name, ActionControlGroup_ControlGroupAction_value)
	proto.RegisterEnum("SC2APIProtocol.ActionSelectIdleWorker_Type", ActionSelectIdleWorker_Type_name, ActionSelectIdleWorker_Type_value)
	proto.RegisterEnum("SC2APIProtocol.ActionMultiPanel_Type", ActionMultiPanel_Type_name, ActionMultiPanel_Type_value)
}
func (m *ObservationUI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObservationUI) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Panel != nil {
		nn1, err := m.Panel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *ObservationUI_Single) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Single != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Single.Size()))
		n2, err := m.Single.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *ObservationUI_Multi) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Multi != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Multi.Size()))
		n3, err := m.Multi.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ObservationUI_Cargo) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Cargo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Cargo.Size()))
		n4, err := m.Cargo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ObservationUI_Production) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Production != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Production.Size()))
		n5, err := m.Production.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *ControlGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ControlGroupIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.ControlGroupIndex))
	}
	if m.LeaderUnitType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.LeaderUnitType))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *UnitInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnitType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.UnitType))
	}
	if m.PlayerRelative != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.PlayerRelative))
	}
	if m.Health != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Health))
	}
	if m.Shields != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Shields))
	}
	if m.Energy != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Energy))
	}
	if m.TransportSlotsTaken != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.TransportSlotsTaken))
	}
	if m.BuildProgress != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BuildProgress))))
		i += 4
	}
	if m.AddOn != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.AddOn.Size()))
		n6, err := m.AddOn.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.MaxHealth != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.MaxHealth))
	}
	if m.MaxShields != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.MaxShields))
	}
	if m.MaxEnergy != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.MaxEnergy))
	}
	return i, nil
}

func (m *SinglePanel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SinglePanel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Unit != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Unit.Size()))
		n7, err := m.Unit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.AttackUpgradeLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.AttackUpgradeLevel))
	}
	if m.ArmorUpgradeLevel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.ArmorUpgradeLevel))
	}
	if m.ShieldUpgradeLevel != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.ShieldUpgradeLevel))
	}
	if len(m.Buffs) > 0 {
		dAtA9 := make([]byte, len(m.Buffs)*10)
		var j8 int
		for _, num1 := range m.Buffs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUi(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	return i, nil
}

func (m *MultiPanel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiPanel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, msg := range m.Units {
			dAtA[i] = 0xa
			i++
			i = encodeVarintUi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CargoPanel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CargoPanel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Unit != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Unit.Size()))
		n10, err := m.Unit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Passengers) > 0 {
		for _, msg := range m.Passengers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SlotsAvailable != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.SlotsAvailable))
	}
	return i, nil
}

func (m *BuildItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AbilityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.AbilityId))
	}
	if m.BuildProgress != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BuildProgress))))
		i += 4
	}
	return i, nil
}

func (m *ProductionPanel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProductionPanel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Unit != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Unit.Size()))
		n11, err := m.Unit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.BuildQueue) > 0 {
		for _, msg := range m.BuildQueue {
			dAtA[i] = 0x12
			i++
			i = encodeVarintUi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ProductionQueue) > 0 {
		for _, msg := range m.ProductionQueue {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintUi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ActionUI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionUI) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		nn12, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn12
	}
	return i, nil
}

func (m *ActionUI_ControlGroup) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ControlGroup != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.ControlGroup.Size()))
		n13, err := m.ControlGroup.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *ActionUI_SelectArmy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SelectArmy != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.SelectArmy.Size()))
		n14, err := m.SelectArmy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *ActionUI_SelectWarpGates) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SelectWarpGates != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.SelectWarpGates.Size()))
		n15, err := m.SelectWarpGates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *ActionUI_SelectLarva) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SelectLarva != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.SelectLarva.Size()))
		n16, err := m.SelectLarva.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *ActionUI_SelectIdleWorker) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SelectIdleWorker != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.SelectIdleWorker.Size()))
		n17, err := m.SelectIdleWorker.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *ActionUI_MultiPanel) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MultiPanel != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.MultiPanel.Size()))
		n18, err := m.MultiPanel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *ActionUI_CargoPanel) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CargoPanel != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.CargoPanel.Size()))
		n19, err := m.CargoPanel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *ActionUI_ProductionPanel) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ProductionPanel != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.ProductionPanel.Size()))
		n20, err := m.ProductionPanel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *ActionUI_ToggleAutocast) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ToggleAutocast != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.ToggleAutocast.Size()))
		n21, err := m.ToggleAutocast.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *ActionControlGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionControlGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Action))
	}
	if m.ControlGroupIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.ControlGroupIndex))
	}
	return i, nil
}

func (m *ActionSelectArmy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionSelectArmy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelectionAdd {
		dAtA[i] = 0x8
		i++
		if m.SelectionAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ActionSelectWarpGates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionSelectWarpGates) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelectionAdd {
		dAtA[i] = 0x8
		i++
		if m.SelectionAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ActionSelectLarva) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionSelectLarva) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ActionSelectIdleWorker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionSelectIdleWorker) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *ActionMultiPanel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionMultiPanel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.Type))
	}
	if m.UnitIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.UnitIndex))
	}
	return i, nil
}

func (m *ActionCargoPanelUnload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionCargoPanelUnload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnitIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.UnitIndex))
	}
	return i, nil
}

func (m *ActionProductionPanelRemoveFromQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionProductionPanelRemoveFromQueue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnitIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.UnitIndex))
	}
	return i, nil
}

func (m *ActionToggleAutocast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionToggleAutocast) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AbilityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUi(dAtA, i, uint64(m.AbilityId))
	}
	return i, nil
}

func encodeVarintUi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ObservationUI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovUi(uint64(l))
		}
	}
	if m.Panel != nil {
		n += m.Panel.Size()
	}
	return n
}

func (m *ObservationUI_Single) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Single != nil {
		l = m.Single.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ObservationUI_Multi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Multi != nil {
		l = m.Multi.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ObservationUI_Cargo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cargo != nil {
		l = m.Cargo.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ObservationUI_Production) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Production != nil {
		l = m.Production.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ControlGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ControlGroupIndex != 0 {
		n += 1 + sovUi(uint64(m.ControlGroupIndex))
	}
	if m.LeaderUnitType != 0 {
		n += 1 + sovUi(uint64(m.LeaderUnitType))
	}
	if m.Count != 0 {
		n += 1 + sovUi(uint64(m.Count))
	}
	return n
}

func (m *UnitInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnitType != 0 {
		n += 1 + sovUi(uint64(m.UnitType))
	}
	if m.PlayerRelative != 0 {
		n += 1 + sovUi(uint64(m.PlayerRelative))
	}
	if m.Health != 0 {
		n += 1 + sovUi(uint64(m.Health))
	}
	if m.Shields != 0 {
		n += 1 + sovUi(uint64(m.Shields))
	}
	if m.Energy != 0 {
		n += 1 + sovUi(uint64(m.Energy))
	}
	if m.TransportSlotsTaken != 0 {
		n += 1 + sovUi(uint64(m.TransportSlotsTaken))
	}
	if m.BuildProgress != 0 {
		n += 5
	}
	if m.AddOn != nil {
		l = m.AddOn.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	if m.MaxHealth != 0 {
		n += 1 + sovUi(uint64(m.MaxHealth))
	}
	if m.MaxShields != 0 {
		n += 1 + sovUi(uint64(m.MaxShields))
	}
	if m.MaxEnergy != 0 {
		n += 1 + sovUi(uint64(m.MaxEnergy))
	}
	return n
}

func (m *SinglePanel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unit != nil {
		l = m.Unit.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	if m.AttackUpgradeLevel != 0 {
		n += 1 + sovUi(uint64(m.AttackUpgradeLevel))
	}
	if m.ArmorUpgradeLevel != 0 {
		n += 1 + sovUi(uint64(m.ArmorUpgradeLevel))
	}
	if m.ShieldUpgradeLevel != 0 {
		n += 1 + sovUi(uint64(m.ShieldUpgradeLevel))
	}
	if len(m.Buffs) > 0 {
		l = 0
		for _, e := range m.Buffs {
			l += sovUi(uint64(e))
		}
		n += 1 + sovUi(uint64(l)) + l
	}
	return n
}

func (m *MultiPanel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Units) > 0 {
		for _, e := range m.Units {
			l = e.Size()
			n += 1 + l + sovUi(uint64(l))
		}
	}
	return n
}

func (m *CargoPanel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unit != nil {
		l = m.Unit.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	if len(m.Passengers) > 0 {
		for _, e := range m.Passengers {
			l = e.Size()
			n += 1 + l + sovUi(uint64(l))
		}
	}
	if m.SlotsAvailable != 0 {
		n += 1 + sovUi(uint64(m.SlotsAvailable))
	}
	return n
}

func (m *BuildItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbilityId != 0 {
		n += 1 + sovUi(uint64(m.AbilityId))
	}
	if m.BuildProgress != 0 {
		n += 5
	}
	return n
}

func (m *ProductionPanel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unit != nil {
		l = m.Unit.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	if len(m.BuildQueue) > 0 {
		for _, e := range m.BuildQueue {
			l = e.Size()
			n += 1 + l + sovUi(uint64(l))
		}
	}
	if len(m.ProductionQueue) > 0 {
		for _, e := range m.ProductionQueue {
			l = e.Size()
			n += 1 + l + sovUi(uint64(l))
		}
	}
	return n
}

func (m *ActionUI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		n += m.Action.Size()
	}
	return n
}

func (m *ActionUI_ControlGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ControlGroup != nil {
		l = m.ControlGroup.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ActionUI_SelectArmy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelectArmy != nil {
		l = m.SelectArmy.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ActionUI_SelectWarpGates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelectWarpGates != nil {
		l = m.SelectWarpGates.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ActionUI_SelectLarva) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelectLarva != nil {
		l = m.SelectLarva.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ActionUI_SelectIdleWorker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelectIdleWorker != nil {
		l = m.SelectIdleWorker.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ActionUI_MultiPanel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MultiPanel != nil {
		l = m.MultiPanel.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ActionUI_CargoPanel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CargoPanel != nil {
		l = m.CargoPanel.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ActionUI_ProductionPanel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProductionPanel != nil {
		l = m.ProductionPanel.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ActionUI_ToggleAutocast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ToggleAutocast != nil {
		l = m.ToggleAutocast.Size()
		n += 1 + l + sovUi(uint64(l))
	}
	return n
}
func (m *ActionControlGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovUi(uint64(m.Action))
	}
	if m.ControlGroupIndex != 0 {
		n += 1 + sovUi(uint64(m.ControlGroupIndex))
	}
	return n
}

func (m *ActionSelectArmy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelectionAdd {
		n += 2
	}
	return n
}

func (m *ActionSelectWarpGates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelectionAdd {
		n += 2
	}
	return n
}

func (m *ActionSelectLarva) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ActionSelectIdleWorker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovUi(uint64(m.Type))
	}
	return n
}

func (m *ActionMultiPanel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovUi(uint64(m.Type))
	}
	if m.UnitIndex != 0 {
		n += 1 + sovUi(uint64(m.UnitIndex))
	}
	return n
}

func (m *ActionCargoPanelUnload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnitIndex != 0 {
		n += 1 + sovUi(uint64(m.UnitIndex))
	}
	return n
}

func (m *ActionProductionPanelRemoveFromQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnitIndex != 0 {
		n += 1 + sovUi(uint64(m.UnitIndex))
	}
	return n
}

func (m *ActionToggleAutocast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbilityId != 0 {
		n += 1 + sovUi(uint64(m.AbilityId))
	}
	return n
}

func sovUi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUi(x uint64) (n int) {
	return sovUi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObservationUI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObservationUI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObservationUI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &ControlGroup{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Single", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SinglePanel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Panel = &ObservationUI_Single{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MultiPanel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Panel = &ObservationUI_Multi{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cargo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CargoPanel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Panel = &ObservationUI_Cargo{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Production", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProductionPanel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Panel = &ObservationUI_Production{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlGroupIndex", wireType)
			}
			m.ControlGroupIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ControlGroupIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderUnitType", wireType)
			}
			m.LeaderUnitType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderUnitType |= (UnitTypeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitType", wireType)
			}
			m.UnitType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitType |= (UnitTypeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRelative", wireType)
			}
			m.PlayerRelative = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerRelative |= (PlayerID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			m.Health = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Health |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shields", wireType)
			}
			m.Shields = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Shields |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			m.Energy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Energy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportSlotsTaken", wireType)
			}
			m.TransportSlotsTaken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportSlotsTaken |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildProgress", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BuildProgress = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddOn == nil {
				m.AddOn = &UnitInfo{}
			}
			if err := m.AddOn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHealth", wireType)
			}
			m.MaxHealth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxHealth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxShields", wireType)
			}
			m.MaxShields = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxShields |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEnergy", wireType)
			}
			m.MaxEnergy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEnergy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SinglePanel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SinglePanel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SinglePanel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unit == nil {
				m.Unit = &UnitInfo{}
			}
			if err := m.Unit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackUpgradeLevel", wireType)
			}
			m.AttackUpgradeLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackUpgradeLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmorUpgradeLevel", wireType)
			}
			m.ArmorUpgradeLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArmorUpgradeLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldUpgradeLevel", wireType)
			}
			m.ShieldUpgradeLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShieldUpgradeLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Buffs = append(m.Buffs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Buffs) == 0 {
					m.Buffs = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Buffs = append(m.Buffs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiPanel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiPanel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiPanel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = append(m.Units, &UnitInfo{})
			if err := m.Units[len(m.Units)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CargoPanel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CargoPanel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CargoPanel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unit == nil {
				m.Unit = &UnitInfo{}
			}
			if err := m.Unit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passengers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passengers = append(m.Passengers, &UnitInfo{})
			if err := m.Passengers[len(m.Passengers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotsAvailable", wireType)
			}
			m.SlotsAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotsAvailable |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityId", wireType)
			}
			m.AbilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityId |= (AbilityID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildProgress", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BuildProgress = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProductionPanel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProductionPanel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProductionPanel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unit == nil {
				m.Unit = &UnitInfo{}
			}
			if err := m.Unit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildQueue = append(m.BuildQueue, &UnitInfo{})
			if err := m.BuildQueue[len(m.BuildQueue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductionQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductionQueue = append(m.ProductionQueue, &BuildItem{})
			if err := m.ProductionQueue[len(m.ProductionQueue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionUI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionUI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionUI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionControlGroup{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionUI_ControlGroup{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectArmy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionSelectArmy{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionUI_SelectArmy{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectWarpGates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionSelectWarpGates{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionUI_SelectWarpGates{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectLarva", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionSelectLarva{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionUI_SelectLarva{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectIdleWorker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionSelectIdleWorker{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionUI_SelectIdleWorker{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiPanel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionMultiPanel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionUI_MultiPanel{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CargoPanel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionCargoPanelUnload{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionUI_CargoPanel{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductionPanel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionProductionPanelRemoveFromQueue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionUI_ProductionPanel{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToggleAutocast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionToggleAutocast{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionUI_ToggleAutocast{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionControlGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionControlGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionControlGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (ActionControlGroup_ControlGroupAction(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlGroupIndex", wireType)
			}
			m.ControlGroupIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ControlGroupIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionSelectArmy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionSelectArmy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionSelectArmy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelectionAdd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionSelectWarpGates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionSelectWarpGates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionSelectWarpGates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelectionAdd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionSelectLarva) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionSelectLarva: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionSelectLarva: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionSelectIdleWorker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionSelectIdleWorker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionSelectIdleWorker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ActionSelectIdleWorker_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionMultiPanel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionMultiPanel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionMultiPanel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ActionMultiPanel_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitIndex", wireType)
			}
			m.UnitIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionCargoPanelUnload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionCargoPanelUnload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionCargoPanelUnload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitIndex", wireType)
			}
			m.UnitIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionProductionPanelRemoveFromQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionProductionPanelRemoveFromQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionProductionPanelRemoveFromQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitIndex", wireType)
			}
			m.UnitIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionToggleAutocast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionToggleAutocast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionToggleAutocast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityId", wireType)
			}
			m.AbilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityId |= (AbilityID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ui.proto", fileDescriptor_ui_0a4a812a4b9539d9) }

var fileDescriptor_ui_0a4a812a4b9539d9 = []byte{
	// 1354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x4f, 0x6f, 0x13, 0x47,
	0x14, 0xf7, 0xda, 0x5e, 0xc7, 0x79, 0x8e, 0xed, 0xcd, 0x24, 0x41, 0x2e, 0x2d, 0x89, 0xbb, 0x40,
	0x1b, 0x09, 0x94, 0x22, 0x17, 0x04, 0x48, 0x48, 0x95, 0x93, 0x00, 0xb6, 0x04, 0x4a, 0xba, 0x26,
	0x45, 0xea, 0x65, 0x3b, 0xf1, 0x4e, 0xcc, 0x8a, 0xf1, 0xee, 0x76, 0x76, 0x1c, 0xf0, 0xa9, 0xf7,
	0x1e, 0xaa, 0x1e, 0x7a, 0x45, 0x3d, 0xf4, 0x0b, 0xf4, 0x23, 0xf4, 0xd8, 0x23, 0xc7, 0x4a, 0x55,
	0x51, 0x05, 0xea, 0x97, 0xe0, 0x54, 0xcd, 0x9f, 0xf5, 0x9f, 0x8d, 0xe3, 0x84, 0x53, 0x3c, 0xef,
	0xfd, 0x7e, 0x6f, 0xdf, 0xbc, 0xbf, 0x13, 0x28, 0x0e, 0xfc, 0xad, 0x88, 0x85, 0x3c, 0x44, 0x95,
	0xce, 0x4e, 0xa3, 0xb9, 0xdf, 0xde, 0x17, 0x87, 0x6e, 0x48, 0x2f, 0x42, 0x2f, 0xec, 0x85, 0x4a,
	0x67, 0xff, 0x9e, 0x85, 0xf2, 0xde, 0x61, 0x4c, 0xd8, 0x31, 0xe6, 0x7e, 0x18, 0x1c, 0xb4, 0xd1,
	0x4d, 0x28, 0xf4, 0x58, 0x38, 0x88, 0xe2, 0x9a, 0x51, 0xcf, 0x6d, 0x96, 0x1a, 0x9f, 0x6c, 0x4d,
	0xd3, 0xb7, 0x76, 0xc2, 0x80, 0xb3, 0x90, 0x3e, 0x14, 0x20, 0x47, 0x63, 0xd1, 0x2d, 0x28, 0xc4,
	0x7e, 0xd0, 0xa3, 0xa4, 0x96, 0xad, 0x1b, 0x9b, 0xa5, 0xc6, 0xc7, 0x69, 0x56, 0x47, 0x6a, 0xf7,
	0x71, 0x40, 0x68, 0x2b, 0xe3, 0x68, 0x30, 0x6a, 0x80, 0xd9, 0x1f, 0x50, 0xee, 0xd7, 0x72, 0x92,
	0x75, 0x31, 0xcd, 0x7a, 0x2c, 0x94, 0x09, 0x49, 0x41, 0x05, 0xa7, 0x8b, 0x59, 0x2f, 0xac, 0xe5,
	0x67, 0x73, 0x76, 0x84, 0x72, 0xc4, 0x91, 0x50, 0xd4, 0x04, 0x88, 0x58, 0xe8, 0x0d, 0xba, 0xe2,
	0x92, 0x35, 0x53, 0x12, 0x37, 0xd2, 0xc4, 0xfd, 0x11, 0x22, 0x61, 0x4f, 0x90, 0xb6, 0x17, 0xc0,
	0x8c, 0x84, 0xd8, 0xfe, 0xc9, 0x80, 0xa5, 0xc9, 0x18, 0xa0, 0x2d, 0x58, 0xe9, 0xaa, 0xb3, 0x2b,
	0xa3, 0xe1, 0xfa, 0x81, 0x47, 0x5e, 0xd6, 0x8c, 0xba, 0xb1, 0x59, 0x76, 0x96, 0xbb, 0x13, 0xd0,
	0xb6, 0x50, 0xa0, 0x3b, 0x60, 0x51, 0x82, 0x3d, 0xc2, 0xdc, 0x41, 0xe0, 0x73, 0x97, 0x0f, 0x23,
	0x15, 0xb5, 0xf2, 0x76, 0xe5, 0xfd, 0x9b, 0x0d, 0x38, 0x08, 0x7c, 0xfe, 0x64, 0x18, 0x91, 0xf6,
	0xae, 0x53, 0x51, 0xb8, 0x44, 0x82, 0x56, 0xc1, 0xec, 0x86, 0x83, 0x80, 0xcb, 0x70, 0x95, 0x1d,
	0x75, 0xb0, 0x7f, 0xcb, 0x41, 0x51, 0x40, 0xda, 0xc1, 0x51, 0x88, 0xae, 0xc1, 0xe2, 0xd8, 0xaa,
	0x31, 0xd3, 0x6a, 0x71, 0x90, 0xd8, 0xbb, 0x05, 0xd5, 0x88, 0xe2, 0x21, 0x61, 0x2e, 0x23, 0x14,
	0x73, 0xff, 0x38, 0x71, 0x64, 0xe9, 0xfd, 0x9b, 0x8d, 0xe2, 0xbe, 0x54, 0x09, 0x37, 0x14, 0xc8,
	0xd1, 0x18, 0x74, 0x01, 0x0a, 0xcf, 0x08, 0xa6, 0xfc, 0x99, 0xf4, 0xc3, 0x74, 0xf4, 0x09, 0xd5,
	0x60, 0x21, 0x7e, 0xe6, 0x13, 0xea, 0xc5, 0x32, 0x37, 0xa6, 0x93, 0x1c, 0x05, 0x83, 0x04, 0x84,
	0xf5, 0x86, 0x32, 0xf6, 0xa6, 0xa3, 0x4f, 0xa8, 0x01, 0x6b, 0x9c, 0xe1, 0x20, 0x8e, 0x42, 0xc6,
	0xdd, 0x98, 0x86, 0x3c, 0x76, 0x39, 0x7e, 0x4e, 0x82, 0x5a, 0x41, 0xc2, 0x56, 0x46, 0xca, 0x8e,
	0xd0, 0x3d, 0x11, 0x2a, 0x74, 0x15, 0x2a, 0x87, 0x03, 0x9f, 0x7a, 0x6e, 0xc4, 0xc2, 0x1e, 0x23,
	0x71, 0x5c, 0x5b, 0xa8, 0x1b, 0x9b, 0x59, 0xa7, 0x2c, 0xa5, 0xfb, 0x5a, 0x88, 0xbe, 0x80, 0x02,
	0xf6, 0x3c, 0x37, 0x0c, 0x6a, 0x45, 0x99, 0xee, 0x5a, 0x3a, 0xdd, 0x49, 0xc8, 0x1c, 0x13, 0x7b,
	0xde, 0x5e, 0x80, 0x2e, 0x01, 0xf4, 0xf1, 0x4b, 0x57, 0xdf, 0x6c, 0x51, 0x3a, 0xb0, 0xd8, 0xc7,
	0x2f, 0x5b, 0xea, 0x72, 0x1b, 0x50, 0x12, 0xea, 0xe4, 0x82, 0x20, 0xf5, 0x82, 0xd1, 0xd1, 0x77,
	0xd4, 0x7c, 0x7d, 0xcf, 0xd2, 0x88, 0x7f, 0x5f, 0x0a, 0xec, 0xff, 0x0c, 0x28, 0x4d, 0x34, 0x01,
	0xba, 0x0e, 0x79, 0x91, 0x07, 0x99, 0xa3, 0x79, 0xde, 0x49, 0x14, 0xba, 0x01, 0xab, 0x98, 0x73,
	0xdc, 0x7d, 0xee, 0x0e, 0xa2, 0x1e, 0xc3, 0x1e, 0x71, 0x29, 0x39, 0x26, 0x54, 0xa6, 0xcb, 0x74,
	0x90, 0xd2, 0x1d, 0x28, 0xd5, 0x23, 0xa1, 0x11, 0x55, 0x89, 0x59, 0x3f, 0x64, 0x29, 0x82, 0xca,
	0xd8, 0xb2, 0x54, 0x4d, 0xe1, 0x6f, 0xc0, 0xaa, 0xba, 0x5b, 0x8a, 0xa0, 0x32, 0x89, 0x94, 0x6e,
	0x8a, 0xb1, 0x0a, 0xe6, 0xe1, 0xe0, 0xe8, 0x28, 0xae, 0x99, 0xf5, 0xdc, 0xa6, 0xe9, 0xa8, 0x83,
	0x7d, 0x0f, 0x60, 0xdc, 0xb5, 0x68, 0x0b, 0x4c, 0xe1, 0x7f, 0x32, 0x4c, 0xe6, 0x24, 0x41, 0xc2,
	0xec, 0x57, 0x06, 0xc0, 0xb8, 0x81, 0x3f, 0x30, 0x48, 0x77, 0x00, 0x22, 0x1c, 0xc7, 0x24, 0xe8,
	0x11, 0x16, 0xd7, 0xb2, 0x67, 0x7c, 0x71, 0x02, 0x8b, 0x3e, 0x87, 0xaa, 0xaa, 0x3e, 0x7c, 0x8c,
	0x7d, 0x8a, 0x0f, 0x29, 0xd1, 0x81, 0xaa, 0x48, 0x71, 0x33, 0x91, 0xda, 0xdf, 0xc1, 0xe2, 0xb6,
	0x28, 0xb3, 0x36, 0x27, 0x7d, 0x74, 0x1d, 0x00, 0x1f, 0xfa, 0xd4, 0xe7, 0x43, 0xd7, 0xf7, 0x74,
	0xb3, 0x95, 0xdf, 0xbf, 0xd9, 0x58, 0x6c, 0x2a, 0x69, 0x7b, 0xd7, 0x59, 0xd4, 0x80, 0xb6, 0x37,
	0xa3, 0x6e, 0xb3, 0x33, 0xea, 0xd6, 0xfe, 0xc3, 0x80, 0x6a, 0x6a, 0x12, 0x7d, 0x60, 0x18, 0xee,
	0x42, 0x49, 0x7d, 0xe8, 0xfb, 0x01, 0x19, 0x90, 0xb3, 0xe3, 0x20, 0xc1, 0x5f, 0x0b, 0x2c, 0xda,
	0x05, 0x6b, 0x3c, 0xf2, 0x34, 0x3f, 0x27, 0xf9, 0x1f, 0xa5, 0xf9, 0xa3, 0x30, 0x38, 0xd5, 0x31,
	0x45, 0x5a, 0xb1, 0xff, 0x31, 0xa1, 0xd8, 0xec, 0xea, 0x7d, 0xd2, 0x86, 0xf2, 0xd4, 0x74, 0xd4,
	0x97, 0xb0, 0xd3, 0xf6, 0x14, 0x61, 0x72, 0xb0, 0xb6, 0x32, 0xce, 0xd2, 0xe4, 0xf4, 0x44, 0x3b,
	0x50, 0x8a, 0x09, 0x25, 0x5d, 0xee, 0x62, 0xd6, 0x1f, 0xea, 0x4d, 0x53, 0x9f, 0x6d, 0xa8, 0x23,
	0x81, 0x4d, 0xd6, 0x1f, 0x8a, 0x39, 0x1e, 0x8f, 0x4e, 0xa8, 0x03, 0xcb, 0xda, 0xc8, 0x0b, 0xcc,
	0x22, 0xb7, 0x87, 0x39, 0x89, 0xf5, 0xfa, 0xb9, 0x3a, 0xcf, 0xd4, 0x53, 0xcc, 0xa2, 0x87, 0x02,
	0xdc, 0xca, 0x38, 0xd5, 0x78, 0x5a, 0x84, 0x1e, 0xc0, 0x92, 0x36, 0x4a, 0x31, 0x3b, 0xc6, 0x7a,
	0x35, 0x7d, 0x3a, 0xcf, 0xde, 0x23, 0x01, 0x6c, 0x65, 0x1c, 0x7d, 0x25, 0x79, 0x44, 0xdf, 0x00,
	0xd2, 0x76, 0x7c, 0x8f, 0x12, 0xf7, 0x45, 0xc8, 0x9e, 0x13, 0xa6, 0xf7, 0xd5, 0x67, 0xf3, 0xac,
	0xb5, 0x3d, 0x4a, 0x9e, 0x4a, 0x74, 0x2b, 0xe3, 0x58, 0x71, 0x4a, 0x26, 0x22, 0x27, 0x97, 0xa7,
	0x2b, 0x57, 0x98, 0x9c, 0xae, 0xa7, 0x46, 0x6e, 0x6a, 0xe7, 0x42, 0x7f, 0xdc, 0xcb, 0x6d, 0x28,
	0xc9, 0x6d, 0xaa, 0x8d, 0x2c, 0xcc, 0xf3, 0x6a, 0xdc, 0xc3, 0x07, 0x01, 0x0d, 0xb1, 0x27, 0x4c,
	0x75, 0xc7, 0x7d, 0x8d, 0xa7, 0xea, 0x4c, 0xd9, 0x53, 0x63, 0xfa, 0xe6, 0x6c, 0x7b, 0xa9, 0x8e,
	0x70, 0x48, 0x3f, 0x3c, 0x26, 0x0f, 0x58, 0xd8, 0x97, 0x15, 0x27, 0x52, 0x12, 0xa5, 0x7a, 0x66,
	0x0f, 0xaa, 0x3c, 0xec, 0xf5, 0x28, 0x71, 0xf1, 0x80, 0x87, 0x5d, 0x1c, 0x73, 0x39, 0xd3, 0x4b,
	0x8d, 0x2b, 0xb3, 0xbf, 0xf0, 0x44, 0x82, 0x9b, 0x1a, 0xdb, 0xca, 0x38, 0x15, 0x3e, 0x25, 0xd9,
	0x2e, 0x42, 0x01, 0x4b, 0xa4, 0xfd, 0x4b, 0x16, 0xd0, 0xc9, 0x72, 0x45, 0x8f, 0x13, 0x80, 0x2c,
	0xf1, 0x4a, 0xe3, 0xd6, 0xd9, 0x25, 0x3e, 0xf5, 0x98, 0x52, 0x6a, 0x47, 0x1b, 0x39, 0xed, 0x59,
	0x91, 0x3d, 0xe5, 0x59, 0x61, 0xff, 0x00, 0xe8, 0xa4, 0x35, 0x74, 0x19, 0x2e, 0x9c, 0x94, 0xba,
	0x81, 0x4f, 0xad, 0xcc, 0xc5, 0x85, 0x1f, 0x5f, 0xd5, 0x73, 0x81, 0x4f, 0x11, 0x40, 0xc1, 0x21,
	0x5d, 0x4c, 0xa9, 0x65, 0xa0, 0x05, 0xc8, 0x75, 0x08, 0xb7, 0xb2, 0x42, 0xd8, 0x8c, 0x22, 0x12,
	0x78, 0x56, 0x0e, 0x55, 0xa1, 0xd4, 0x21, 0xbc, 0x19, 0x78, 0x1d, 0x4e, 0x30, 0xb5, 0xf2, 0x08,
	0x41, 0x45, 0x29, 0x47, 0x32, 0xd3, 0xbe, 0x0d, 0x56, 0xba, 0xf7, 0xd0, 0x65, 0x28, 0xab, 0x62,
	0x14, 0x5f, 0xc5, 0x9e, 0x9a, 0x92, 0x45, 0x67, 0x69, 0x24, 0x6c, 0x7a, 0x9e, 0x7d, 0x0f, 0xd6,
	0x66, 0x76, 0xda, 0xf9, 0xd8, 0x2b, 0xb0, 0x7c, 0xa2, 0xaf, 0xec, 0x5f, 0x0d, 0xb8, 0x30, 0xbb,
	0x3f, 0xd0, 0x57, 0x90, 0x1f, 0x3d, 0x8e, 0x2a, 0x8d, 0x6b, 0xe7, 0xeb, 0xaa, 0x2d, 0xf1, 0x5e,
	0x72, 0x24, 0xd1, 0xde, 0x85, 0xbc, 0x7c, 0x3d, 0xad, 0x41, 0x51, 0xfc, 0x4d, 0x07, 0x53, 0x07,
	0x50, 0x46, 0xb2, 0xe9, 0x79, 0x56, 0x56, 0xfe, 0xa0, 0xd4, 0xca, 0xc9, 0x90, 0x7a, 0x9e, 0xf8,
	0x9d, 0xb7, 0xff, 0x36, 0x92, 0x70, 0x4d, 0xac, 0xcb, 0xbb, 0x53, 0xbe, 0x5d, 0x3d, 0xab, 0x41,
	0x27, 0xbc, 0x12, 0xcf, 0x0f, 0xf9, 0xf0, 0x1b, 0x57, 0x89, 0xe9, 0xc8, 0xa7, 0xa0, 0xaa, 0x8e,
	0xfe, 0x7c, 0xa7, 0x2d, 0x58, 0x52, 0x8f, 0x13, 0x75, 0x71, 0xcb, 0x10, 0x92, 0x5d, 0xa2, 0x02,
	0x2d, 0x56, 0x85, 0x95, 0x45, 0x2b, 0x50, 0xd5, 0x99, 0xa5, 0x74, 0xef, 0x48, 0x58, 0xb1, 0x72,
	0x68, 0x0d, 0x96, 0x13, 0xd8, 0x58, 0x9c, 0xb7, 0x6f, 0x27, 0xe1, 0x4f, 0x0f, 0x82, 0x94, 0x9f,
	0x46, 0xda, 0xcf, 0xfb, 0x70, 0xe5, 0x3c, 0x1d, 0x7f, 0x96, 0x99, 0x5d, 0x58, 0x9d, 0xd5, 0xd6,
	0x33, 0x56, 0xb6, 0x79, 0xfa, 0xca, 0xde, 0xbe, 0xf4, 0xe7, 0xdb, 0x75, 0xe3, 0xf5, 0xdb, 0x75,
	0xe3, 0xdf, 0xb7, 0xeb, 0xc6, 0xcf, 0xef, 0xd6, 0x33, 0xaf, 0xdf, 0xad, 0x67, 0xfe, 0x7a, 0xb7,
	0x9e, 0xf9, 0x36, 0x87, 0x23, 0xff, 0xb0, 0x20, 0xff, 0x87, 0xfa, 0xf2, 0xff, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb8, 0x24, 0x68, 0x12, 0x6b, 0x0d, 0x00, 0x00,
}
