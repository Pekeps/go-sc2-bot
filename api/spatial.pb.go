// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spatial.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ActionSpatialUnitSelectionPoint_Type int32

const (
	ActionSpatialUnitSelectionPoint_nil        ActionSpatialUnitSelectionPoint_Type = 0
	ActionSpatialUnitSelectionPoint_Select     ActionSpatialUnitSelectionPoint_Type = 1
	ActionSpatialUnitSelectionPoint_Toggle     ActionSpatialUnitSelectionPoint_Type = 2
	ActionSpatialUnitSelectionPoint_AllType    ActionSpatialUnitSelectionPoint_Type = 3
	ActionSpatialUnitSelectionPoint_AddAllType ActionSpatialUnitSelectionPoint_Type = 4
)

var ActionSpatialUnitSelectionPoint_Type_name = map[int32]string{
	0: "Type_nil",
	1: "Select",
	2: "Toggle",
	3: "AllType",
	4: "AddAllType",
}
var ActionSpatialUnitSelectionPoint_Type_value = map[string]int32{
	"Type_nil":   0,
	"Select":     1,
	"Toggle":     2,
	"AllType":    3,
	"AddAllType": 4,
}

func (x ActionSpatialUnitSelectionPoint_Type) String() string {
	return proto.EnumName(ActionSpatialUnitSelectionPoint_Type_name, int32(x))
}
func (ActionSpatialUnitSelectionPoint_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_spatial_5f299c0a08463b0e, []int{7, 0}
}

type ObservationFeatureLayer struct {
	Renders        *FeatureLayers        `protobuf:"bytes,1,opt,name=renders" json:"renders,omitempty"`
	MinimapRenders *FeatureLayersMinimap `protobuf:"bytes,2,opt,name=minimap_renders,json=minimapRenders" json:"minimap_renders,omitempty"`
}

func (m *ObservationFeatureLayer) Reset()         { *m = ObservationFeatureLayer{} }
func (m *ObservationFeatureLayer) String() string { return proto.CompactTextString(m) }
func (*ObservationFeatureLayer) ProtoMessage()    {}
func (*ObservationFeatureLayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_spatial_5f299c0a08463b0e, []int{0}
}
func (m *ObservationFeatureLayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObservationFeatureLayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObservationFeatureLayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ObservationFeatureLayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservationFeatureLayer.Merge(dst, src)
}
func (m *ObservationFeatureLayer) XXX_Size() int {
	return m.Size()
}
func (m *ObservationFeatureLayer) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservationFeatureLayer.DiscardUnknown(m)
}

var xxx_messageInfo_ObservationFeatureLayer proto.InternalMessageInfo

func (m *ObservationFeatureLayer) GetRenders() *FeatureLayers {
	if m != nil {
		return m.Renders
	}
	return nil
}

func (m *ObservationFeatureLayer) GetMinimapRenders() *FeatureLayersMinimap {
	if m != nil {
		return m.MinimapRenders
	}
	return nil
}

type FeatureLayers struct {
	HeightMap          *ImageData `protobuf:"bytes,1,opt,name=height_map,json=heightMap" json:"height_map,omitempty"`
	VisibilityMap      *ImageData `protobuf:"bytes,2,opt,name=visibility_map,json=visibilityMap" json:"visibility_map,omitempty"`
	Creep              *ImageData `protobuf:"bytes,3,opt,name=creep" json:"creep,omitempty"`
	Power              *ImageData `protobuf:"bytes,4,opt,name=power" json:"power,omitempty"`
	PlayerId           *ImageData `protobuf:"bytes,5,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	UnitType           *ImageData `protobuf:"bytes,6,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"`
	Selected           *ImageData `protobuf:"bytes,7,opt,name=selected" json:"selected,omitempty"`
	UnitHitPoints      *ImageData `protobuf:"bytes,8,opt,name=unit_hit_points,json=unitHitPoints" json:"unit_hit_points,omitempty"`
	UnitHitPointsRatio *ImageData `protobuf:"bytes,17,opt,name=unit_hit_points_ratio,json=unitHitPointsRatio" json:"unit_hit_points_ratio,omitempty"`
	UnitEnergy         *ImageData `protobuf:"bytes,9,opt,name=unit_energy,json=unitEnergy" json:"unit_energy,omitempty"`
	UnitEnergyRatio    *ImageData `protobuf:"bytes,18,opt,name=unit_energy_ratio,json=unitEnergyRatio" json:"unit_energy_ratio,omitempty"`
	UnitShields        *ImageData `protobuf:"bytes,10,opt,name=unit_shields,json=unitShields" json:"unit_shields,omitempty"`
	UnitShieldsRatio   *ImageData `protobuf:"bytes,19,opt,name=unit_shields_ratio,json=unitShieldsRatio" json:"unit_shields_ratio,omitempty"`
	PlayerRelative     *ImageData `protobuf:"bytes,11,opt,name=player_relative,json=playerRelative" json:"player_relative,omitempty"`
	UnitDensityAa      *ImageData `protobuf:"bytes,14,opt,name=unit_density_aa,json=unitDensityAa" json:"unit_density_aa,omitempty"`
	UnitDensity        *ImageData `protobuf:"bytes,15,opt,name=unit_density,json=unitDensity" json:"unit_density,omitempty"`
	Effects            *ImageData `protobuf:"bytes,20,opt,name=effects" json:"effects,omitempty"`
	Hallucinations     *ImageData `protobuf:"bytes,21,opt,name=hallucinations" json:"hallucinations,omitempty"`
	Cloaked            *ImageData `protobuf:"bytes,22,opt,name=cloaked" json:"cloaked,omitempty"`
	Blip               *ImageData `protobuf:"bytes,23,opt,name=blip" json:"blip,omitempty"`
	Buffs              *ImageData `protobuf:"bytes,24,opt,name=buffs" json:"buffs,omitempty"`
	Active             *ImageData `protobuf:"bytes,25,opt,name=active" json:"active,omitempty"`
}

func (m *FeatureLayers) Reset()         { *m = FeatureLayers{} }
func (m *FeatureLayers) String() string { return proto.CompactTextString(m) }
func (*FeatureLayers) ProtoMessage()    {}
func (*FeatureLayers) Descriptor() ([]byte, []int) {
	return fileDescriptor_spatial_5f299c0a08463b0e, []int{1}
}
func (m *FeatureLayers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureLayers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeatureLayers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FeatureLayers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureLayers.Merge(dst, src)
}
func (m *FeatureLayers) XXX_Size() int {
	return m.Size()
}
func (m *FeatureLayers) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureLayers.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureLayers proto.InternalMessageInfo

func (m *FeatureLayers) GetHeightMap() *ImageData {
	if m != nil {
		return m.HeightMap
	}
	return nil
}

func (m *FeatureLayers) GetVisibilityMap() *ImageData {
	if m != nil {
		return m.VisibilityMap
	}
	return nil
}

func (m *FeatureLayers) GetCreep() *ImageData {
	if m != nil {
		return m.Creep
	}
	return nil
}

func (m *FeatureLayers) GetPower() *ImageData {
	if m != nil {
		return m.Power
	}
	return nil
}

func (m *FeatureLayers) GetPlayerId() *ImageData {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

func (m *FeatureLayers) GetUnitType() *ImageData {
	if m != nil {
		return m.UnitType
	}
	return nil
}

func (m *FeatureLayers) GetSelected() *ImageData {
	if m != nil {
		return m.Selected
	}
	return nil
}

func (m *FeatureLayers) GetUnitHitPoints() *ImageData {
	if m != nil {
		return m.UnitHitPoints
	}
	return nil
}

func (m *FeatureLayers) GetUnitHitPointsRatio() *ImageData {
	if m != nil {
		return m.UnitHitPointsRatio
	}
	return nil
}

func (m *FeatureLayers) GetUnitEnergy() *ImageData {
	if m != nil {
		return m.UnitEnergy
	}
	return nil
}

func (m *FeatureLayers) GetUnitEnergyRatio() *ImageData {
	if m != nil {
		return m.UnitEnergyRatio
	}
	return nil
}

func (m *FeatureLayers) GetUnitShields() *ImageData {
	if m != nil {
		return m.UnitShields
	}
	return nil
}

func (m *FeatureLayers) GetUnitShieldsRatio() *ImageData {
	if m != nil {
		return m.UnitShieldsRatio
	}
	return nil
}

func (m *FeatureLayers) GetPlayerRelative() *ImageData {
	if m != nil {
		return m.PlayerRelative
	}
	return nil
}

func (m *FeatureLayers) GetUnitDensityAa() *ImageData {
	if m != nil {
		return m.UnitDensityAa
	}
	return nil
}

func (m *FeatureLayers) GetUnitDensity() *ImageData {
	if m != nil {
		return m.UnitDensity
	}
	return nil
}

func (m *FeatureLayers) GetEffects() *ImageData {
	if m != nil {
		return m.Effects
	}
	return nil
}

func (m *FeatureLayers) GetHallucinations() *ImageData {
	if m != nil {
		return m.Hallucinations
	}
	return nil
}

func (m *FeatureLayers) GetCloaked() *ImageData {
	if m != nil {
		return m.Cloaked
	}
	return nil
}

func (m *FeatureLayers) GetBlip() *ImageData {
	if m != nil {
		return m.Blip
	}
	return nil
}

func (m *FeatureLayers) GetBuffs() *ImageData {
	if m != nil {
		return m.Buffs
	}
	return nil
}

func (m *FeatureLayers) GetActive() *ImageData {
	if m != nil {
		return m.Active
	}
	return nil
}

type FeatureLayersMinimap struct {
	HeightMap      *ImageData `protobuf:"bytes,1,opt,name=height_map,json=heightMap" json:"height_map,omitempty"`
	VisibilityMap  *ImageData `protobuf:"bytes,2,opt,name=visibility_map,json=visibilityMap" json:"visibility_map,omitempty"`
	Creep          *ImageData `protobuf:"bytes,3,opt,name=creep" json:"creep,omitempty"`
	Camera         *ImageData `protobuf:"bytes,4,opt,name=camera" json:"camera,omitempty"`
	PlayerId       *ImageData `protobuf:"bytes,5,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	PlayerRelative *ImageData `protobuf:"bytes,6,opt,name=player_relative,json=playerRelative" json:"player_relative,omitempty"`
	Selected       *ImageData `protobuf:"bytes,7,opt,name=selected" json:"selected,omitempty"`
	Alerts         *ImageData `protobuf:"bytes,9,opt,name=alerts" json:"alerts,omitempty"`
	UnitType       *ImageData `protobuf:"bytes,8,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"`
}

func (m *FeatureLayersMinimap) Reset()         { *m = FeatureLayersMinimap{} }
func (m *FeatureLayersMinimap) String() string { return proto.CompactTextString(m) }
func (*FeatureLayersMinimap) ProtoMessage()    {}
func (*FeatureLayersMinimap) Descriptor() ([]byte, []int) {
	return fileDescriptor_spatial_5f299c0a08463b0e, []int{2}
}
func (m *FeatureLayersMinimap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureLayersMinimap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeatureLayersMinimap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FeatureLayersMinimap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureLayersMinimap.Merge(dst, src)
}
func (m *FeatureLayersMinimap) XXX_Size() int {
	return m.Size()
}
func (m *FeatureLayersMinimap) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureLayersMinimap.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureLayersMinimap proto.InternalMessageInfo

func (m *FeatureLayersMinimap) GetHeightMap() *ImageData {
	if m != nil {
		return m.HeightMap
	}
	return nil
}

func (m *FeatureLayersMinimap) GetVisibilityMap() *ImageData {
	if m != nil {
		return m.VisibilityMap
	}
	return nil
}

func (m *FeatureLayersMinimap) GetCreep() *ImageData {
	if m != nil {
		return m.Creep
	}
	return nil
}

func (m *FeatureLayersMinimap) GetCamera() *ImageData {
	if m != nil {
		return m.Camera
	}
	return nil
}

func (m *FeatureLayersMinimap) GetPlayerId() *ImageData {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

func (m *FeatureLayersMinimap) GetPlayerRelative() *ImageData {
	if m != nil {
		return m.PlayerRelative
	}
	return nil
}

func (m *FeatureLayersMinimap) GetSelected() *ImageData {
	if m != nil {
		return m.Selected
	}
	return nil
}

func (m *FeatureLayersMinimap) GetAlerts() *ImageData {
	if m != nil {
		return m.Alerts
	}
	return nil
}

func (m *FeatureLayersMinimap) GetUnitType() *ImageData {
	if m != nil {
		return m.UnitType
	}
	return nil
}

type ObservationRender struct {
	Map     *ImageData `protobuf:"bytes,1,opt,name=map" json:"map,omitempty"`
	Minimap *ImageData `protobuf:"bytes,2,opt,name=minimap" json:"minimap,omitempty"`
}

func (m *ObservationRender) Reset()         { *m = ObservationRender{} }
func (m *ObservationRender) String() string { return proto.CompactTextString(m) }
func (*ObservationRender) ProtoMessage()    {}
func (*ObservationRender) Descriptor() ([]byte, []int) {
	return fileDescriptor_spatial_5f299c0a08463b0e, []int{3}
}
func (m *ObservationRender) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObservationRender) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObservationRender.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ObservationRender) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservationRender.Merge(dst, src)
}
func (m *ObservationRender) XXX_Size() int {
	return m.Size()
}
func (m *ObservationRender) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservationRender.DiscardUnknown(m)
}

var xxx_messageInfo_ObservationRender proto.InternalMessageInfo

func (m *ObservationRender) GetMap() *ImageData {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *ObservationRender) GetMinimap() *ImageData {
	if m != nil {
		return m.Minimap
	}
	return nil
}

type ActionSpatial struct {
	// Types that are valid to be assigned to Action:
	//	*ActionSpatial_UnitCommand
	//	*ActionSpatial_CameraMove
	//	*ActionSpatial_UnitSelectionPoint
	//	*ActionSpatial_UnitSelectionRect
	Action isActionSpatial_Action `protobuf_oneof:"action"`
}

func (m *ActionSpatial) Reset()         { *m = ActionSpatial{} }
func (m *ActionSpatial) String() string { return proto.CompactTextString(m) }
func (*ActionSpatial) ProtoMessage()    {}
func (*ActionSpatial) Descriptor() ([]byte, []int) {
	return fileDescriptor_spatial_5f299c0a08463b0e, []int{4}
}
func (m *ActionSpatial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionSpatial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionSpatial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionSpatial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionSpatial.Merge(dst, src)
}
func (m *ActionSpatial) XXX_Size() int {
	return m.Size()
}
func (m *ActionSpatial) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionSpatial.DiscardUnknown(m)
}

var xxx_messageInfo_ActionSpatial proto.InternalMessageInfo

type isActionSpatial_Action interface {
	isActionSpatial_Action()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActionSpatial_UnitCommand struct {
	UnitCommand *ActionSpatialUnitCommand `protobuf:"bytes,1,opt,name=unit_command,json=unitCommand,oneof"`
}
type ActionSpatial_CameraMove struct {
	CameraMove *ActionSpatialCameraMove `protobuf:"bytes,2,opt,name=camera_move,json=cameraMove,oneof"`
}
type ActionSpatial_UnitSelectionPoint struct {
	UnitSelectionPoint *ActionSpatialUnitSelectionPoint `protobuf:"bytes,3,opt,name=unit_selection_point,json=unitSelectionPoint,oneof"`
}
type ActionSpatial_UnitSelectionRect struct {
	UnitSelectionRect *ActionSpatialUnitSelectionRect `protobuf:"bytes,4,opt,name=unit_selection_rect,json=unitSelectionRect,oneof"`
}

func (*ActionSpatial_UnitCommand) isActionSpatial_Action()        {}
func (*ActionSpatial_CameraMove) isActionSpatial_Action()         {}
func (*ActionSpatial_UnitSelectionPoint) isActionSpatial_Action() {}
func (*ActionSpatial_UnitSelectionRect) isActionSpatial_Action()  {}

func (m *ActionSpatial) GetAction() isActionSpatial_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ActionSpatial) GetUnitCommand() *ActionSpatialUnitCommand {
	if x, ok := m.GetAction().(*ActionSpatial_UnitCommand); ok {
		return x.UnitCommand
	}
	return nil
}

func (m *ActionSpatial) GetCameraMove() *ActionSpatialCameraMove {
	if x, ok := m.GetAction().(*ActionSpatial_CameraMove); ok {
		return x.CameraMove
	}
	return nil
}

func (m *ActionSpatial) GetUnitSelectionPoint() *ActionSpatialUnitSelectionPoint {
	if x, ok := m.GetAction().(*ActionSpatial_UnitSelectionPoint); ok {
		return x.UnitSelectionPoint
	}
	return nil
}

func (m *ActionSpatial) GetUnitSelectionRect() *ActionSpatialUnitSelectionRect {
	if x, ok := m.GetAction().(*ActionSpatial_UnitSelectionRect); ok {
		return x.UnitSelectionRect
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionSpatial) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionSpatial_OneofMarshaler, _ActionSpatial_OneofUnmarshaler, _ActionSpatial_OneofSizer, []interface{}{
		(*ActionSpatial_UnitCommand)(nil),
		(*ActionSpatial_CameraMove)(nil),
		(*ActionSpatial_UnitSelectionPoint)(nil),
		(*ActionSpatial_UnitSelectionRect)(nil),
	}
}

func _ActionSpatial_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionSpatial)
	// action
	switch x := m.Action.(type) {
	case *ActionSpatial_UnitCommand:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnitCommand); err != nil {
			return err
		}
	case *ActionSpatial_CameraMove:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CameraMove); err != nil {
			return err
		}
	case *ActionSpatial_UnitSelectionPoint:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnitSelectionPoint); err != nil {
			return err
		}
	case *ActionSpatial_UnitSelectionRect:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnitSelectionRect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ActionSpatial.Action has unexpected type %T", x)
	}
	return nil
}

func _ActionSpatial_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionSpatial)
	switch tag {
	case 1: // action.unit_command
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSpatialUnitCommand)
		err := b.DecodeMessage(msg)
		m.Action = &ActionSpatial_UnitCommand{msg}
		return true, err
	case 2: // action.camera_move
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSpatialCameraMove)
		err := b.DecodeMessage(msg)
		m.Action = &ActionSpatial_CameraMove{msg}
		return true, err
	case 3: // action.unit_selection_point
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSpatialUnitSelectionPoint)
		err := b.DecodeMessage(msg)
		m.Action = &ActionSpatial_UnitSelectionPoint{msg}
		return true, err
	case 4: // action.unit_selection_rect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSpatialUnitSelectionRect)
		err := b.DecodeMessage(msg)
		m.Action = &ActionSpatial_UnitSelectionRect{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ActionSpatial_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionSpatial)
	// action
	switch x := m.Action.(type) {
	case *ActionSpatial_UnitCommand:
		s := proto.Size(x.UnitCommand)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionSpatial_CameraMove:
		s := proto.Size(x.CameraMove)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionSpatial_UnitSelectionPoint:
		s := proto.Size(x.UnitSelectionPoint)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionSpatial_UnitSelectionRect:
		s := proto.Size(x.UnitSelectionRect)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActionSpatialUnitCommand struct {
	AbilityId int32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId,proto3" json:"ability_id,omitempty"`
	// Types that are valid to be assigned to Target:
	//	*ActionSpatialUnitCommand_TargetScreenCoord
	//	*ActionSpatialUnitCommand_TargetMinimapCoord
	Target       isActionSpatialUnitCommand_Target `protobuf_oneof:"target"`
	QueueCommand bool                              `protobuf:"varint,4,opt,name=queue_command,json=queueCommand,proto3" json:"queue_command,omitempty"`
}

func (m *ActionSpatialUnitCommand) Reset()         { *m = ActionSpatialUnitCommand{} }
func (m *ActionSpatialUnitCommand) String() string { return proto.CompactTextString(m) }
func (*ActionSpatialUnitCommand) ProtoMessage()    {}
func (*ActionSpatialUnitCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_spatial_5f299c0a08463b0e, []int{5}
}
func (m *ActionSpatialUnitCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionSpatialUnitCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionSpatialUnitCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionSpatialUnitCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionSpatialUnitCommand.Merge(dst, src)
}
func (m *ActionSpatialUnitCommand) XXX_Size() int {
	return m.Size()
}
func (m *ActionSpatialUnitCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionSpatialUnitCommand.DiscardUnknown(m)
}

var xxx_messageInfo_ActionSpatialUnitCommand proto.InternalMessageInfo

type isActionSpatialUnitCommand_Target interface {
	isActionSpatialUnitCommand_Target()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ActionSpatialUnitCommand_TargetScreenCoord struct {
	TargetScreenCoord *PointI `protobuf:"bytes,2,opt,name=target_screen_coord,json=targetScreenCoord,oneof"`
}
type ActionSpatialUnitCommand_TargetMinimapCoord struct {
	TargetMinimapCoord *PointI `protobuf:"bytes,3,opt,name=target_minimap_coord,json=targetMinimapCoord,oneof"`
}

func (*ActionSpatialUnitCommand_TargetScreenCoord) isActionSpatialUnitCommand_Target()  {}
func (*ActionSpatialUnitCommand_TargetMinimapCoord) isActionSpatialUnitCommand_Target() {}

func (m *ActionSpatialUnitCommand) GetTarget() isActionSpatialUnitCommand_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ActionSpatialUnitCommand) GetAbilityId() int32 {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func (m *ActionSpatialUnitCommand) GetTargetScreenCoord() *PointI {
	if x, ok := m.GetTarget().(*ActionSpatialUnitCommand_TargetScreenCoord); ok {
		return x.TargetScreenCoord
	}
	return nil
}

func (m *ActionSpatialUnitCommand) GetTargetMinimapCoord() *PointI {
	if x, ok := m.GetTarget().(*ActionSpatialUnitCommand_TargetMinimapCoord); ok {
		return x.TargetMinimapCoord
	}
	return nil
}

func (m *ActionSpatialUnitCommand) GetQueueCommand() bool {
	if m != nil {
		return m.QueueCommand
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionSpatialUnitCommand) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionSpatialUnitCommand_OneofMarshaler, _ActionSpatialUnitCommand_OneofUnmarshaler, _ActionSpatialUnitCommand_OneofSizer, []interface{}{
		(*ActionSpatialUnitCommand_TargetScreenCoord)(nil),
		(*ActionSpatialUnitCommand_TargetMinimapCoord)(nil),
	}
}

func _ActionSpatialUnitCommand_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionSpatialUnitCommand)
	// target
	switch x := m.Target.(type) {
	case *ActionSpatialUnitCommand_TargetScreenCoord:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TargetScreenCoord); err != nil {
			return err
		}
	case *ActionSpatialUnitCommand_TargetMinimapCoord:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TargetMinimapCoord); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ActionSpatialUnitCommand.Target has unexpected type %T", x)
	}
	return nil
}

func _ActionSpatialUnitCommand_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionSpatialUnitCommand)
	switch tag {
	case 2: // target.target_screen_coord
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PointI)
		err := b.DecodeMessage(msg)
		m.Target = &ActionSpatialUnitCommand_TargetScreenCoord{msg}
		return true, err
	case 3: // target.target_minimap_coord
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PointI)
		err := b.DecodeMessage(msg)
		m.Target = &ActionSpatialUnitCommand_TargetMinimapCoord{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ActionSpatialUnitCommand_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionSpatialUnitCommand)
	// target
	switch x := m.Target.(type) {
	case *ActionSpatialUnitCommand_TargetScreenCoord:
		s := proto.Size(x.TargetScreenCoord)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionSpatialUnitCommand_TargetMinimapCoord:
		s := proto.Size(x.TargetMinimapCoord)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActionSpatialCameraMove struct {
	CenterMinimap *PointI `protobuf:"bytes,1,opt,name=center_minimap,json=centerMinimap" json:"center_minimap,omitempty"`
}

func (m *ActionSpatialCameraMove) Reset()         { *m = ActionSpatialCameraMove{} }
func (m *ActionSpatialCameraMove) String() string { return proto.CompactTextString(m) }
func (*ActionSpatialCameraMove) ProtoMessage()    {}
func (*ActionSpatialCameraMove) Descriptor() ([]byte, []int) {
	return fileDescriptor_spatial_5f299c0a08463b0e, []int{6}
}
func (m *ActionSpatialCameraMove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionSpatialCameraMove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionSpatialCameraMove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionSpatialCameraMove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionSpatialCameraMove.Merge(dst, src)
}
func (m *ActionSpatialCameraMove) XXX_Size() int {
	return m.Size()
}
func (m *ActionSpatialCameraMove) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionSpatialCameraMove.DiscardUnknown(m)
}

var xxx_messageInfo_ActionSpatialCameraMove proto.InternalMessageInfo

func (m *ActionSpatialCameraMove) GetCenterMinimap() *PointI {
	if m != nil {
		return m.CenterMinimap
	}
	return nil
}

type ActionSpatialUnitSelectionPoint struct {
	SelectionScreenCoord *PointI                              `protobuf:"bytes,1,opt,name=selection_screen_coord,json=selectionScreenCoord" json:"selection_screen_coord,omitempty"`
	Type                 ActionSpatialUnitSelectionPoint_Type `protobuf:"varint,2,opt,name=type,proto3,enum=SC2APIProtocol.ActionSpatialUnitSelectionPoint_Type" json:"type,omitempty"`
}

func (m *ActionSpatialUnitSelectionPoint) Reset()         { *m = ActionSpatialUnitSelectionPoint{} }
func (m *ActionSpatialUnitSelectionPoint) String() string { return proto.CompactTextString(m) }
func (*ActionSpatialUnitSelectionPoint) ProtoMessage()    {}
func (*ActionSpatialUnitSelectionPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_spatial_5f299c0a08463b0e, []int{7}
}
func (m *ActionSpatialUnitSelectionPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionSpatialUnitSelectionPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionSpatialUnitSelectionPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionSpatialUnitSelectionPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionSpatialUnitSelectionPoint.Merge(dst, src)
}
func (m *ActionSpatialUnitSelectionPoint) XXX_Size() int {
	return m.Size()
}
func (m *ActionSpatialUnitSelectionPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionSpatialUnitSelectionPoint.DiscardUnknown(m)
}

var xxx_messageInfo_ActionSpatialUnitSelectionPoint proto.InternalMessageInfo

func (m *ActionSpatialUnitSelectionPoint) GetSelectionScreenCoord() *PointI {
	if m != nil {
		return m.SelectionScreenCoord
	}
	return nil
}

func (m *ActionSpatialUnitSelectionPoint) GetType() ActionSpatialUnitSelectionPoint_Type {
	if m != nil {
		return m.Type
	}
	return ActionSpatialUnitSelectionPoint_nil
}

type ActionSpatialUnitSelectionRect struct {
	SelectionScreenCoord []*RectangleI `protobuf:"bytes,1,rep,name=selection_screen_coord,json=selectionScreenCoord" json:"selection_screen_coord,omitempty"`
	SelectionAdd         bool          `protobuf:"varint,2,opt,name=selection_add,json=selectionAdd,proto3" json:"selection_add,omitempty"`
}

func (m *ActionSpatialUnitSelectionRect) Reset()         { *m = ActionSpatialUnitSelectionRect{} }
func (m *ActionSpatialUnitSelectionRect) String() string { return proto.CompactTextString(m) }
func (*ActionSpatialUnitSelectionRect) ProtoMessage()    {}
func (*ActionSpatialUnitSelectionRect) Descriptor() ([]byte, []int) {
	return fileDescriptor_spatial_5f299c0a08463b0e, []int{8}
}
func (m *ActionSpatialUnitSelectionRect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionSpatialUnitSelectionRect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionSpatialUnitSelectionRect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActionSpatialUnitSelectionRect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionSpatialUnitSelectionRect.Merge(dst, src)
}
func (m *ActionSpatialUnitSelectionRect) XXX_Size() int {
	return m.Size()
}
func (m *ActionSpatialUnitSelectionRect) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionSpatialUnitSelectionRect.DiscardUnknown(m)
}

var xxx_messageInfo_ActionSpatialUnitSelectionRect proto.InternalMessageInfo

func (m *ActionSpatialUnitSelectionRect) GetSelectionScreenCoord() []*RectangleI {
	if m != nil {
		return m.SelectionScreenCoord
	}
	return nil
}

func (m *ActionSpatialUnitSelectionRect) GetSelectionAdd() bool {
	if m != nil {
		return m.SelectionAdd
	}
	return false
}

func init() {
	proto.RegisterType((*ObservationFeatureLayer)(nil), "SC2APIProtocol.ObservationFeatureLayer")
	proto.RegisterType((*FeatureLayers)(nil), "SC2APIProtocol.FeatureLayers")
	proto.RegisterType((*FeatureLayersMinimap)(nil), "SC2APIProtocol.FeatureLayersMinimap")
	proto.RegisterType((*ObservationRender)(nil), "SC2APIProtocol.ObservationRender")
	proto.RegisterType((*ActionSpatial)(nil), "SC2APIProtocol.ActionSpatial")
	proto.RegisterType((*ActionSpatialUnitCommand)(nil), "SC2APIProtocol.ActionSpatialUnitCommand")
	proto.RegisterType((*ActionSpatialCameraMove)(nil), "SC2APIProtocol.ActionSpatialCameraMove")
	proto.RegisterType((*ActionSpatialUnitSelectionPoint)(nil), "SC2APIProtocol.ActionSpatialUnitSelectionPoint")
	proto.RegisterType((*ActionSpatialUnitSelectionRect)(nil), "SC2APIProtocol.ActionSpatialUnitSelectionRect")
	proto.RegisterEnum("SC2APIProtocol.ActionSpatialUnitSelectionPoint_Type", ActionSpatialUnitSelectionPoint_Type_name, ActionSpatialUnitSelectionPoint_Type_value)
}
func (m *ObservationFeatureLayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObservationFeatureLayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Renders != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Renders.Size()))
		n1, err := m.Renders.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.MinimapRenders != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.MinimapRenders.Size()))
		n2, err := m.MinimapRenders.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *FeatureLayers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureLayers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeightMap != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.HeightMap.Size()))
		n3, err := m.HeightMap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.VisibilityMap != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.VisibilityMap.Size()))
		n4, err := m.VisibilityMap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Creep != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Creep.Size()))
		n5, err := m.Creep.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Power != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Power.Size()))
		n6, err := m.Power.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.PlayerId.Size()))
		n7, err := m.PlayerId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.UnitType != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitType.Size()))
		n8, err := m.UnitType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Selected != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Selected.Size()))
		n9, err := m.Selected.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.UnitHitPoints != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitHitPoints.Size()))
		n10, err := m.UnitHitPoints.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.UnitEnergy != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitEnergy.Size()))
		n11, err := m.UnitEnergy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.UnitShields != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitShields.Size()))
		n12, err := m.UnitShields.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.PlayerRelative != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.PlayerRelative.Size()))
		n13, err := m.PlayerRelative.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.UnitDensityAa != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitDensityAa.Size()))
		n14, err := m.UnitDensityAa.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.UnitDensity != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitDensity.Size()))
		n15, err := m.UnitDensity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.UnitHitPointsRatio != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitHitPointsRatio.Size()))
		n16, err := m.UnitHitPointsRatio.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.UnitEnergyRatio != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitEnergyRatio.Size()))
		n17, err := m.UnitEnergyRatio.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.UnitShieldsRatio != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitShieldsRatio.Size()))
		n18, err := m.UnitShieldsRatio.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Effects != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Effects.Size()))
		n19, err := m.Effects.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Hallucinations != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Hallucinations.Size()))
		n20, err := m.Hallucinations.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Cloaked != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Cloaked.Size()))
		n21, err := m.Cloaked.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Blip != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Blip.Size()))
		n22, err := m.Blip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Buffs != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Buffs.Size()))
		n23, err := m.Buffs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.Active != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Active.Size()))
		n24, err := m.Active.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *FeatureLayersMinimap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureLayersMinimap) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeightMap != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.HeightMap.Size()))
		n25, err := m.HeightMap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.VisibilityMap != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.VisibilityMap.Size()))
		n26, err := m.VisibilityMap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.Creep != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Creep.Size()))
		n27, err := m.Creep.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Camera != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Camera.Size()))
		n28, err := m.Camera.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.PlayerId != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.PlayerId.Size()))
		n29, err := m.PlayerId.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.PlayerRelative != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.PlayerRelative.Size()))
		n30, err := m.PlayerRelative.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.Selected != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Selected.Size()))
		n31, err := m.Selected.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.UnitType != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitType.Size()))
		n32, err := m.UnitType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Alerts != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Alerts.Size()))
		n33, err := m.Alerts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *ObservationRender) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObservationRender) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Map != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Map.Size()))
		n34, err := m.Map.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.Minimap != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Minimap.Size()))
		n35, err := m.Minimap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *ActionSpatial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionSpatial) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		nn36, err := m.Action.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn36
	}
	return i, nil
}

func (m *ActionSpatial_UnitCommand) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UnitCommand != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitCommand.Size()))
		n37, err := m.UnitCommand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *ActionSpatial_CameraMove) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.CameraMove != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.CameraMove.Size()))
		n38, err := m.CameraMove.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *ActionSpatial_UnitSelectionPoint) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UnitSelectionPoint != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitSelectionPoint.Size()))
		n39, err := m.UnitSelectionPoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *ActionSpatial_UnitSelectionRect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UnitSelectionRect != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.UnitSelectionRect.Size()))
		n40, err := m.UnitSelectionRect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *ActionSpatialUnitCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionSpatialUnitCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AbilityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.AbilityId))
	}
	if m.Target != nil {
		nn41, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn41
	}
	if m.QueueCommand {
		dAtA[i] = 0x20
		i++
		if m.QueueCommand {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ActionSpatialUnitCommand_TargetScreenCoord) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TargetScreenCoord != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.TargetScreenCoord.Size()))
		n42, err := m.TargetScreenCoord.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *ActionSpatialUnitCommand_TargetMinimapCoord) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.TargetMinimapCoord != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.TargetMinimapCoord.Size()))
		n43, err := m.TargetMinimapCoord.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *ActionSpatialCameraMove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionSpatialCameraMove) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CenterMinimap != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.CenterMinimap.Size()))
		n44, err := m.CenterMinimap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func (m *ActionSpatialUnitSelectionPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionSpatialUnitSelectionPoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelectionScreenCoord != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.SelectionScreenCoord.Size()))
		n45, err := m.SelectionScreenCoord.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpatial(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *ActionSpatialUnitSelectionRect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionSpatialUnitSelectionRect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SelectionScreenCoord) > 0 {
		for _, msg := range m.SelectionScreenCoord {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSpatial(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SelectionAdd {
		dAtA[i] = 0x10
		i++
		if m.SelectionAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintSpatial(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ObservationFeatureLayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Renders != nil {
		l = m.Renders.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.MinimapRenders != nil {
		l = m.MinimapRenders.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	return n
}

func (m *FeatureLayers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeightMap != nil {
		l = m.HeightMap.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.VisibilityMap != nil {
		l = m.VisibilityMap.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.Creep != nil {
		l = m.Creep.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.Power != nil {
		l = m.Power.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.PlayerId != nil {
		l = m.PlayerId.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.UnitType != nil {
		l = m.UnitType.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.Selected != nil {
		l = m.Selected.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.UnitHitPoints != nil {
		l = m.UnitHitPoints.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.UnitEnergy != nil {
		l = m.UnitEnergy.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.UnitShields != nil {
		l = m.UnitShields.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.PlayerRelative != nil {
		l = m.PlayerRelative.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.UnitDensityAa != nil {
		l = m.UnitDensityAa.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.UnitDensity != nil {
		l = m.UnitDensity.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.UnitHitPointsRatio != nil {
		l = m.UnitHitPointsRatio.Size()
		n += 2 + l + sovSpatial(uint64(l))
	}
	if m.UnitEnergyRatio != nil {
		l = m.UnitEnergyRatio.Size()
		n += 2 + l + sovSpatial(uint64(l))
	}
	if m.UnitShieldsRatio != nil {
		l = m.UnitShieldsRatio.Size()
		n += 2 + l + sovSpatial(uint64(l))
	}
	if m.Effects != nil {
		l = m.Effects.Size()
		n += 2 + l + sovSpatial(uint64(l))
	}
	if m.Hallucinations != nil {
		l = m.Hallucinations.Size()
		n += 2 + l + sovSpatial(uint64(l))
	}
	if m.Cloaked != nil {
		l = m.Cloaked.Size()
		n += 2 + l + sovSpatial(uint64(l))
	}
	if m.Blip != nil {
		l = m.Blip.Size()
		n += 2 + l + sovSpatial(uint64(l))
	}
	if m.Buffs != nil {
		l = m.Buffs.Size()
		n += 2 + l + sovSpatial(uint64(l))
	}
	if m.Active != nil {
		l = m.Active.Size()
		n += 2 + l + sovSpatial(uint64(l))
	}
	return n
}

func (m *FeatureLayersMinimap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeightMap != nil {
		l = m.HeightMap.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.VisibilityMap != nil {
		l = m.VisibilityMap.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.Creep != nil {
		l = m.Creep.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.Camera != nil {
		l = m.Camera.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.PlayerId != nil {
		l = m.PlayerId.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.PlayerRelative != nil {
		l = m.PlayerRelative.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.Selected != nil {
		l = m.Selected.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.UnitType != nil {
		l = m.UnitType.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.Alerts != nil {
		l = m.Alerts.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	return n
}

func (m *ObservationRender) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Map != nil {
		l = m.Map.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.Minimap != nil {
		l = m.Minimap.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	return n
}

func (m *ActionSpatial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != nil {
		n += m.Action.Size()
	}
	return n
}

func (m *ActionSpatial_UnitCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnitCommand != nil {
		l = m.UnitCommand.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	return n
}
func (m *ActionSpatial_CameraMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CameraMove != nil {
		l = m.CameraMove.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	return n
}
func (m *ActionSpatial_UnitSelectionPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnitSelectionPoint != nil {
		l = m.UnitSelectionPoint.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	return n
}
func (m *ActionSpatial_UnitSelectionRect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnitSelectionRect != nil {
		l = m.UnitSelectionRect.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	return n
}
func (m *ActionSpatialUnitCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbilityId != 0 {
		n += 1 + sovSpatial(uint64(m.AbilityId))
	}
	if m.Target != nil {
		n += m.Target.Size()
	}
	if m.QueueCommand {
		n += 2
	}
	return n
}

func (m *ActionSpatialUnitCommand_TargetScreenCoord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetScreenCoord != nil {
		l = m.TargetScreenCoord.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	return n
}
func (m *ActionSpatialUnitCommand_TargetMinimapCoord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TargetMinimapCoord != nil {
		l = m.TargetMinimapCoord.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	return n
}
func (m *ActionSpatialCameraMove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CenterMinimap != nil {
		l = m.CenterMinimap.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	return n
}

func (m *ActionSpatialUnitSelectionPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SelectionScreenCoord != nil {
		l = m.SelectionScreenCoord.Size()
		n += 1 + l + sovSpatial(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSpatial(uint64(m.Type))
	}
	return n
}

func (m *ActionSpatialUnitSelectionRect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SelectionScreenCoord) > 0 {
		for _, e := range m.SelectionScreenCoord {
			l = e.Size()
			n += 1 + l + sovSpatial(uint64(l))
		}
	}
	if m.SelectionAdd {
		n += 2
	}
	return n
}

func sovSpatial(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpatial(x uint64) (n int) {
	return sovSpatial(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObservationFeatureLayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpatial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObservationFeatureLayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObservationFeatureLayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Renders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Renders == nil {
				m.Renders = &FeatureLayers{}
			}
			if err := m.Renders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimapRenders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinimapRenders == nil {
				m.MinimapRenders = &FeatureLayersMinimap{}
			}
			if err := m.MinimapRenders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpatial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpatial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureLayers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpatial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureLayers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureLayers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeightMap == nil {
				m.HeightMap = &ImageData{}
			}
			if err := m.HeightMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisibilityMap == nil {
				m.VisibilityMap = &ImageData{}
			}
			if err := m.VisibilityMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creep", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creep == nil {
				m.Creep = &ImageData{}
			}
			if err := m.Creep.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Power == nil {
				m.Power = &ImageData{}
			}
			if err := m.Power.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerId == nil {
				m.PlayerId = &ImageData{}
			}
			if err := m.PlayerId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnitType == nil {
				m.UnitType = &ImageData{}
			}
			if err := m.UnitType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selected == nil {
				m.Selected = &ImageData{}
			}
			if err := m.Selected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitHitPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnitHitPoints == nil {
				m.UnitHitPoints = &ImageData{}
			}
			if err := m.UnitHitPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitEnergy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnitEnergy == nil {
				m.UnitEnergy = &ImageData{}
			}
			if err := m.UnitEnergy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitShields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnitShields == nil {
				m.UnitShields = &ImageData{}
			}
			if err := m.UnitShields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRelative", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerRelative == nil {
				m.PlayerRelative = &ImageData{}
			}
			if err := m.PlayerRelative.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitDensityAa", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnitDensityAa == nil {
				m.UnitDensityAa = &ImageData{}
			}
			if err := m.UnitDensityAa.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitDensity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnitDensity == nil {
				m.UnitDensity = &ImageData{}
			}
			if err := m.UnitDensity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitHitPointsRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnitHitPointsRatio == nil {
				m.UnitHitPointsRatio = &ImageData{}
			}
			if err := m.UnitHitPointsRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitEnergyRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnitEnergyRatio == nil {
				m.UnitEnergyRatio = &ImageData{}
			}
			if err := m.UnitEnergyRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitShieldsRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnitShieldsRatio == nil {
				m.UnitShieldsRatio = &ImageData{}
			}
			if err := m.UnitShieldsRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Effects == nil {
				m.Effects = &ImageData{}
			}
			if err := m.Effects.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hallucinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hallucinations == nil {
				m.Hallucinations = &ImageData{}
			}
			if err := m.Hallucinations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloaked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cloaked == nil {
				m.Cloaked = &ImageData{}
			}
			if err := m.Cloaked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blip == nil {
				m.Blip = &ImageData{}
			}
			if err := m.Blip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buffs == nil {
				m.Buffs = &ImageData{}
			}
			if err := m.Buffs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Active == nil {
				m.Active = &ImageData{}
			}
			if err := m.Active.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpatial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpatial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureLayersMinimap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpatial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureLayersMinimap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureLayersMinimap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeightMap == nil {
				m.HeightMap = &ImageData{}
			}
			if err := m.HeightMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisibilityMap == nil {
				m.VisibilityMap = &ImageData{}
			}
			if err := m.VisibilityMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creep", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creep == nil {
				m.Creep = &ImageData{}
			}
			if err := m.Creep.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Camera", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Camera == nil {
				m.Camera = &ImageData{}
			}
			if err := m.Camera.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerId == nil {
				m.PlayerId = &ImageData{}
			}
			if err := m.PlayerId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerRelative", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerRelative == nil {
				m.PlayerRelative = &ImageData{}
			}
			if err := m.PlayerRelative.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selected == nil {
				m.Selected = &ImageData{}
			}
			if err := m.Selected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnitType == nil {
				m.UnitType = &ImageData{}
			}
			if err := m.UnitType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alerts == nil {
				m.Alerts = &ImageData{}
			}
			if err := m.Alerts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpatial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpatial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObservationRender) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpatial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObservationRender: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObservationRender: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = &ImageData{}
			}
			if err := m.Map.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minimap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Minimap == nil {
				m.Minimap = &ImageData{}
			}
			if err := m.Minimap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpatial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpatial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionSpatial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpatial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionSpatial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionSpatial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionSpatialUnitCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionSpatial_UnitCommand{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CameraMove", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionSpatialCameraMove{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionSpatial_CameraMove{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitSelectionPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionSpatialUnitSelectionPoint{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionSpatial_UnitSelectionPoint{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitSelectionRect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ActionSpatialUnitSelectionRect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Action = &ActionSpatial_UnitSelectionRect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpatial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpatial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionSpatialUnitCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpatial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionSpatialUnitCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionSpatialUnitCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityId", wireType)
			}
			m.AbilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetScreenCoord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PointI{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &ActionSpatialUnitCommand_TargetScreenCoord{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetMinimapCoord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PointI{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Target = &ActionSpatialUnitCommand_TargetMinimapCoord{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueCommand", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QueueCommand = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSpatial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpatial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionSpatialCameraMove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpatial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionSpatialCameraMove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionSpatialCameraMove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CenterMinimap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CenterMinimap == nil {
				m.CenterMinimap = &PointI{}
			}
			if err := m.CenterMinimap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpatial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpatial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionSpatialUnitSelectionPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpatial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionSpatialUnitSelectionPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionSpatialUnitSelectionPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionScreenCoord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelectionScreenCoord == nil {
				m.SelectionScreenCoord = &PointI{}
			}
			if err := m.SelectionScreenCoord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ActionSpatialUnitSelectionPoint_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpatial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpatial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionSpatialUnitSelectionRect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpatial
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionSpatialUnitSelectionRect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionSpatialUnitSelectionRect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionScreenCoord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpatial
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectionScreenCoord = append(m.SelectionScreenCoord, &RectangleI{})
			if err := m.SelectionScreenCoord[len(m.SelectionScreenCoord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectionAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelectionAdd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSpatial(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpatial
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpatial(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpatial
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpatial
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpatial
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpatial
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpatial(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpatial = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpatial   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("spatial.proto", fileDescriptor_spatial_5f299c0a08463b0e) }

var fileDescriptor_spatial_5f299c0a08463b0e = []byte{
	// 1046 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x97, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xc7, 0xf3, 0xd6, 0x24, 0x7d, 0xd2, 0xbc, 0x74, 0x9a, 0xb6, 0xb3, 0x95, 0x1a, 0x56, 0x5e,
	0x24, 0x2a, 0x21, 0xb2, 0xda, 0x2e, 0x6f, 0x42, 0x20, 0x91, 0x76, 0x17, 0x92, 0x55, 0x23, 0x2a,
	0x67, 0x91, 0x10, 0x17, 0x33, 0xb1, 0xa7, 0xc9, 0x08, 0xc7, 0x36, 0xf6, 0x24, 0x28, 0x5f, 0x01,
	0x09, 0x89, 0x03, 0x12, 0x27, 0x0e, 0x7c, 0x07, 0x3e, 0x04, 0xc7, 0x3d, 0x72, 0x44, 0xed, 0xc7,
	0x40, 0x42, 0x68, 0x5e, 0x92, 0x26, 0xd1, 0x36, 0x93, 0xdd, 0xdb, 0x9e, 0x5a, 0xbb, 0xff, 0xdf,
	0x7f, 0x66, 0x9e, 0xe7, 0xf1, 0xdf, 0x2e, 0x94, 0x93, 0x88, 0x70, 0x46, 0xfc, 0x66, 0x14, 0x87,
	0x3c, 0x44, 0x95, 0xde, 0xf9, 0x69, 0xeb, 0xb2, 0x73, 0x29, 0x2e, 0xdc, 0xd0, 0x3f, 0x82, 0x41,
	0x38, 0x08, 0xd5, 0xdf, 0x8e, 0x76, 0xdc, 0x70, 0x34, 0x0a, 0x03, 0x75, 0x65, 0xfd, 0x91, 0x86,
	0xc3, 0xaf, 0xfa, 0x09, 0x8d, 0x27, 0x84, 0xb3, 0x30, 0xf8, 0x82, 0x12, 0x3e, 0x8e, 0xe9, 0x05,
	0x99, 0xd2, 0x18, 0x7d, 0x04, 0x85, 0x98, 0x06, 0x1e, 0x8d, 0x13, 0x9c, 0xbe, 0x9f, 0x3e, 0x29,
	0x9d, 0x1e, 0x37, 0x97, 0x7d, 0x9b, 0x8b, 0xf2, 0xc4, 0x9e, 0xa9, 0x51, 0x17, 0xaa, 0x23, 0x16,
	0xb0, 0x11, 0x89, 0x9c, 0x99, 0x41, 0x46, 0x1a, 0xbc, 0xbd, 0xd6, 0xa0, 0xab, 0x18, 0xbb, 0xa2,
	0x61, 0x5b, 0xb1, 0xd6, 0x9f, 0x00, 0xe5, 0x25, 0x21, 0xfa, 0x18, 0x60, 0x48, 0xd9, 0x60, 0xc8,
	0x9d, 0x11, 0x89, 0xf4, 0xe6, 0xee, 0xad, 0x7a, 0x77, 0x46, 0x64, 0x40, 0x9f, 0x10, 0x4e, 0xec,
	0x6d, 0x25, 0xee, 0x92, 0x08, 0x7d, 0x0e, 0x95, 0x09, 0x4b, 0x58, 0x9f, 0xf9, 0x8c, 0x4f, 0x25,
	0x9d, 0x31, 0xd1, 0xe5, 0x5b, 0x40, 0x38, 0x3c, 0x84, 0x2d, 0x37, 0xa6, 0x34, 0xc2, 0x59, 0x13,
	0xa8, 0x74, 0x02, 0x88, 0xc2, 0x1f, 0x69, 0x8c, 0x73, 0x46, 0x40, 0xea, 0xd0, 0x87, 0xb0, 0x1d,
	0xf9, 0xe2, 0xa0, 0x0e, 0xf3, 0xf0, 0x96, 0x09, 0x2a, 0x2a, 0x6d, 0xc7, 0x13, 0xdc, 0x38, 0x60,
	0xdc, 0xe1, 0xd3, 0x88, 0xe2, 0xbc, 0x91, 0x13, 0xda, 0xe7, 0xd3, 0x88, 0xa2, 0x0f, 0xa0, 0x98,
	0x50, 0x9f, 0xba, 0x9c, 0x7a, 0xb8, 0x60, 0xc4, 0x66, 0x52, 0xd4, 0x82, 0xaa, 0x5c, 0x6e, 0xc8,
	0xb8, 0x13, 0x85, 0x2c, 0xe0, 0x09, 0x2e, 0x1a, 0x6b, 0x29, 0x88, 0x36, 0xe3, 0x97, 0x52, 0x8f,
	0x3e, 0x81, 0x92, 0xb4, 0xa0, 0x01, 0x8d, 0x07, 0x53, 0xbc, 0x6d, 0xc2, 0x41, 0xa8, 0x9f, 0x4a,
	0x31, 0xfa, 0x14, 0x76, 0x24, 0x9b, 0x0c, 0x19, 0xf5, 0xbd, 0x04, 0x83, 0x09, 0x96, 0x4b, 0xf5,
	0x94, 0x1a, 0x9d, 0x41, 0x55, 0xd7, 0x38, 0xa6, 0x3e, 0xe1, 0x6c, 0x42, 0x71, 0xc9, 0x64, 0x50,
	0x51, 0x84, 0xad, 0x81, 0x79, 0x01, 0x3c, 0x1a, 0x24, 0x62, 0x9a, 0x08, 0xc1, 0x95, 0x8d, 0x0a,
	0xf0, 0x44, 0x01, 0x2d, 0x32, 0x3f, 0x84, 0xb6, 0xc0, 0xd5, 0x8d, 0x0e, 0xa1, 0x79, 0x74, 0x01,
	0xfb, 0x2b, 0x1d, 0x70, 0x62, 0xf1, 0x18, 0xe3, 0x5d, 0x93, 0x0d, 0x5a, 0xea, 0x83, 0x2d, 0x20,
	0xf4, 0x14, 0x76, 0x17, 0x9a, 0xa1, 0x9d, 0x90, 0xc9, 0xa9, 0x7a, 0xdb, 0x12, 0x65, 0xf3, 0x25,
	0xa0, 0xc5, 0xbe, 0x68, 0x9f, 0x3d, 0x93, 0x4f, 0x6d, 0xa1, 0x3b, 0xca, 0xe8, 0x31, 0x14, 0xe8,
	0xd5, 0x15, 0x75, 0x79, 0x82, 0xeb, 0x26, 0x7a, 0xa6, 0x44, 0x2d, 0xa8, 0x0c, 0x89, 0xef, 0x8f,
	0x5d, 0x16, 0xc8, 0x40, 0x4b, 0xf0, 0xbe, 0xb1, 0xad, 0xcb, 0x80, 0x58, 0xd7, 0xf5, 0x43, 0xf2,
	0x3d, 0xf5, 0xf0, 0x81, 0x71, 0x5d, 0xad, 0x44, 0xef, 0x41, 0xae, 0xef, 0xb3, 0x08, 0x1f, 0x9a,
	0x08, 0x29, 0x13, 0x99, 0xd0, 0x1f, 0x5f, 0x5d, 0x25, 0x18, 0x1b, 0x33, 0x41, 0xea, 0xd0, 0x23,
	0xc8, 0x13, 0x57, 0x8e, 0xe9, 0x3d, 0x13, 0xa1, 0x85, 0xd6, 0xaf, 0x39, 0xa8, 0xbf, 0x2c, 0x5f,
	0xdf, 0xac, 0xf4, 0x7c, 0x04, 0x79, 0x97, 0x8c, 0x68, 0x4c, 0xcc, 0xf1, 0xa9, 0x85, 0xaf, 0x9d,
	0x9f, 0x2f, 0xc9, 0x84, 0xfc, 0xab, 0x66, 0xc2, 0x6b, 0x66, 0xe9, 0x52, 0x74, 0x17, 0x37, 0x8f,
	0x6e, 0x31, 0x16, 0x3e, 0x8d, 0x79, 0x62, 0xce, 0x4e, 0x2d, 0xb4, 0xc6, 0xb0, 0xbb, 0xf0, 0xc2,
	0x57, 0xef, 0x58, 0xf4, 0x2e, 0x64, 0x37, 0x9a, 0x05, 0xa1, 0x12, 0x0f, 0x88, 0x7e, 0x43, 0x9b,
	0xdb, 0x3f, 0x53, 0x5a, 0xff, 0x66, 0xa0, 0xdc, 0x72, 0xc5, 0x92, 0x3d, 0xf5, 0xa9, 0x82, 0xba,
	0x3a, 0xfb, 0xc4, 0xf7, 0x08, 0x09, 0x3c, 0xbd, 0xf8, 0xc9, 0xaa, 0xd7, 0x12, 0xf4, 0x75, 0xc0,
	0xf8, 0xb9, 0xd2, 0xb7, 0x53, 0x2a, 0x0c, 0xf5, 0x25, 0x7a, 0x06, 0x25, 0xd5, 0x7f, 0x67, 0x14,
	0x4e, 0xa8, 0xde, 0xd9, 0x3b, 0x6b, 0xdd, 0xce, 0xa5, 0xbe, 0x1b, 0x4e, 0x68, 0x3b, 0x65, 0x83,
	0x3b, 0xbf, 0x42, 0x2e, 0xd4, 0x55, 0x86, 0xc9, 0xfe, 0xb0, 0x30, 0x50, 0xf1, 0xaa, 0x87, 0xf6,
	0xa1, 0x71, 0x8b, 0xbd, 0x19, 0x27, 0xf3, 0xb5, 0x9d, 0x52, 0x79, 0xbb, 0x7c, 0x17, 0x7d, 0x07,
	0x7b, 0x2b, 0x8b, 0xc4, 0xd4, 0xe5, 0x7a, 0xcc, 0x9b, 0x9b, 0xaf, 0x61, 0x53, 0x57, 0x2c, 0xb1,
	0x3b, 0x5e, 0xbd, 0x79, 0x56, 0x54, 0xa1, 0x11, 0x06, 0xd6, 0x7f, 0x69, 0xc0, 0x77, 0x15, 0x12,
	0x1d, 0x03, 0x10, 0xfd, 0x48, 0x33, 0xd5, 0x86, 0x2d, 0x7b, 0x5b, 0xdf, 0xe9, 0x78, 0xa8, 0x0d,
	0x7b, 0x9c, 0xc4, 0x03, 0xca, 0x9d, 0x44, 0x3c, 0x92, 0x81, 0xe3, 0x86, 0x61, 0xec, 0xe9, 0x02,
	0x1f, 0xac, 0xee, 0x53, 0x9e, 0xad, 0x23, 0xf6, 0xa3, 0xa0, 0x9e, 0x64, 0xce, 0x05, 0x82, 0x9e,
	0x41, 0x5d, 0x3b, 0xcd, 0x3e, 0x0f, 0x95, 0x55, 0xd6, 0x60, 0x85, 0x14, 0xa5, 0xf3, 0x4b, 0x79,
	0x3d, 0x80, 0xf2, 0x0f, 0x63, 0x3a, 0xa6, 0xf3, 0xf1, 0x11, 0x75, 0x2b, 0xda, 0x3b, 0xf2, 0xa6,
	0x3e, 0x99, 0x28, 0x80, 0x42, 0xad, 0x6f, 0xe0, 0xf0, 0x8e, 0xd6, 0xa3, 0xcf, 0xa0, 0xe2, 0xd2,
	0x80, 0xd3, 0x78, 0xb6, 0x2b, 0x3d, 0x89, 0x77, 0xec, 0xc7, 0x2e, 0x2b, 0xb5, 0xde, 0x8d, 0xf5,
	0x73, 0x06, 0xde, 0x32, 0x0c, 0x00, 0xba, 0x80, 0x83, 0xdb, 0x2e, 0x2f, 0x55, 0x71, 0xfd, 0x52,
	0xf5, 0x39, 0xb5, 0x58, 0xc6, 0x36, 0xe4, 0x64, 0x4e, 0x88, 0x0e, 0x54, 0x4e, 0xdf, 0x7f, 0xc5,
	0x69, 0x6c, 0x8a, 0xe0, 0xb0, 0xa5, 0x83, 0x65, 0x43, 0x4e, 0xc6, 0xc8, 0x3e, 0x14, 0xc5, 0x4f,
	0x27, 0x60, 0x7e, 0x2d, 0x75, 0x54, 0xf8, 0xe9, 0xf7, 0xfb, 0xd9, 0x80, 0xf9, 0x08, 0x20, 0xaf,
	0xd8, 0x5a, 0x5a, 0xfc, 0xfe, 0x3c, 0x1c, 0x0c, 0x7c, 0x5a, 0xcb, 0xa0, 0x12, 0x14, 0x5a, 0xbe,
	0x2f, 0x88, 0x5a, 0x16, 0x55, 0x00, 0x5a, 0x9e, 0x37, 0xbb, 0xce, 0x59, 0xbf, 0xa5, 0xa1, 0xb1,
	0x7e, 0x58, 0xd1, 0xe5, 0x9a, 0x72, 0x64, 0x4f, 0x4a, 0xa7, 0x47, 0xab, 0x47, 0x12, 0x14, 0x09,
	0x06, 0x3e, 0xbd, 0xab, 0x24, 0x0f, 0xa0, 0x7c, 0xeb, 0x48, 0x3c, 0x35, 0x9d, 0x45, 0x7b, 0x67,
	0x7e, 0xb3, 0xe5, 0x79, 0x67, 0xc7, 0x7f, 0x5d, 0x37, 0xd2, 0x2f, 0xae, 0x1b, 0xe9, 0x7f, 0xae,
	0x1b, 0xe9, 0x5f, 0x6e, 0x1a, 0xa9, 0x17, 0x37, 0x8d, 0xd4, 0xdf, 0x37, 0x8d, 0xd4, 0xb7, 0x59,
	0x12, 0xb1, 0x7e, 0x5e, 0xfe, 0x47, 0xf4, 0xf8, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xc2,
	0xe8, 0xe4, 0x4c, 0x0d, 0x00, 0x00,
}
