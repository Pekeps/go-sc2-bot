// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: query.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RequestQuery struct {
	Pathing                    []*RequestQueryPathing            `protobuf:"bytes,1,rep,name=pathing" json:"pathing,omitempty"`
	Abilities                  []*RequestQueryAvailableAbilities `protobuf:"bytes,2,rep,name=abilities" json:"abilities,omitempty"`
	Placements                 []*RequestQueryBuildingPlacement  `protobuf:"bytes,3,rep,name=placements" json:"placements,omitempty"`
	IgnoreResourceRequirements bool                              `protobuf:"varint,4,opt,name=ignore_resource_requirements,json=ignoreResourceRequirements,proto3" json:"ignore_resource_requirements,omitempty"`
}

func (m *RequestQuery) Reset()         { *m = RequestQuery{} }
func (m *RequestQuery) String() string { return proto.CompactTextString(m) }
func (*RequestQuery) ProtoMessage()    {}
func (*RequestQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_d0074ff9da7a4de3, []int{0}
}
func (m *RequestQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestQuery.Merge(dst, src)
}
func (m *RequestQuery) XXX_Size() int {
	return m.Size()
}
func (m *RequestQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RequestQuery proto.InternalMessageInfo

func (m *RequestQuery) GetPathing() []*RequestQueryPathing {
	if m != nil {
		return m.Pathing
	}
	return nil
}

func (m *RequestQuery) GetAbilities() []*RequestQueryAvailableAbilities {
	if m != nil {
		return m.Abilities
	}
	return nil
}

func (m *RequestQuery) GetPlacements() []*RequestQueryBuildingPlacement {
	if m != nil {
		return m.Placements
	}
	return nil
}

func (m *RequestQuery) GetIgnoreResourceRequirements() bool {
	if m != nil {
		return m.IgnoreResourceRequirements
	}
	return false
}

type ResponseQuery struct {
	Pathing    []*ResponseQueryPathing            `protobuf:"bytes,1,rep,name=pathing" json:"pathing,omitempty"`
	Abilities  []*ResponseQueryAvailableAbilities `protobuf:"bytes,2,rep,name=abilities" json:"abilities,omitempty"`
	Placements []*ResponseQueryBuildingPlacement  `protobuf:"bytes,3,rep,name=placements" json:"placements,omitempty"`
}

func (m *ResponseQuery) Reset()         { *m = ResponseQuery{} }
func (m *ResponseQuery) String() string { return proto.CompactTextString(m) }
func (*ResponseQuery) ProtoMessage()    {}
func (*ResponseQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_d0074ff9da7a4de3, []int{1}
}
func (m *ResponseQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseQuery.Merge(dst, src)
}
func (m *ResponseQuery) XXX_Size() int {
	return m.Size()
}
func (m *ResponseQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseQuery proto.InternalMessageInfo

func (m *ResponseQuery) GetPathing() []*ResponseQueryPathing {
	if m != nil {
		return m.Pathing
	}
	return nil
}

func (m *ResponseQuery) GetAbilities() []*ResponseQueryAvailableAbilities {
	if m != nil {
		return m.Abilities
	}
	return nil
}

func (m *ResponseQuery) GetPlacements() []*ResponseQueryBuildingPlacement {
	if m != nil {
		return m.Placements
	}
	return nil
}

// --------------------------------------------------------------------------------------------------
type RequestQueryPathing struct {
	// Types that are valid to be assigned to Start:
	//	*RequestQueryPathing_StartPos
	//	*RequestQueryPathing_UnitTag
	Start  isRequestQueryPathing_Start `protobuf_oneof:"start"`
	EndPos *Point2D                    `protobuf:"bytes,3,opt,name=end_pos,json=endPos" json:"end_pos,omitempty"`
}

func (m *RequestQueryPathing) Reset()         { *m = RequestQueryPathing{} }
func (m *RequestQueryPathing) String() string { return proto.CompactTextString(m) }
func (*RequestQueryPathing) ProtoMessage()    {}
func (*RequestQueryPathing) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_d0074ff9da7a4de3, []int{2}
}
func (m *RequestQueryPathing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestQueryPathing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestQueryPathing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestQueryPathing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestQueryPathing.Merge(dst, src)
}
func (m *RequestQueryPathing) XXX_Size() int {
	return m.Size()
}
func (m *RequestQueryPathing) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestQueryPathing.DiscardUnknown(m)
}

var xxx_messageInfo_RequestQueryPathing proto.InternalMessageInfo

type isRequestQueryPathing_Start interface {
	isRequestQueryPathing_Start()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestQueryPathing_StartPos struct {
	StartPos *Point2D `protobuf:"bytes,1,opt,name=start_pos,json=startPos,oneof"`
}
type RequestQueryPathing_UnitTag struct {
	UnitTag UnitTag `protobuf:"varint,2,opt,name=unit_tag,json=unitTag,proto3,oneof,casttype=UnitTag"`
}

func (*RequestQueryPathing_StartPos) isRequestQueryPathing_Start() {}
func (*RequestQueryPathing_UnitTag) isRequestQueryPathing_Start()  {}

func (m *RequestQueryPathing) GetStart() isRequestQueryPathing_Start {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *RequestQueryPathing) GetStartPos() *Point2D {
	if x, ok := m.GetStart().(*RequestQueryPathing_StartPos); ok {
		return x.StartPos
	}
	return nil
}

func (m *RequestQueryPathing) GetUnitTag() UnitTag {
	if x, ok := m.GetStart().(*RequestQueryPathing_UnitTag); ok {
		return x.UnitTag
	}
	return 0
}

func (m *RequestQueryPathing) GetEndPos() *Point2D {
	if m != nil {
		return m.EndPos
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RequestQueryPathing) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RequestQueryPathing_OneofMarshaler, _RequestQueryPathing_OneofUnmarshaler, _RequestQueryPathing_OneofSizer, []interface{}{
		(*RequestQueryPathing_StartPos)(nil),
		(*RequestQueryPathing_UnitTag)(nil),
	}
}

func _RequestQueryPathing_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RequestQueryPathing)
	// start
	switch x := m.Start.(type) {
	case *RequestQueryPathing_StartPos:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StartPos); err != nil {
			return err
		}
	case *RequestQueryPathing_UnitTag:
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.UnitTag))
	case nil:
	default:
		return fmt.Errorf("RequestQueryPathing.Start has unexpected type %T", x)
	}
	return nil
}

func _RequestQueryPathing_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RequestQueryPathing)
	switch tag {
	case 1: // start.start_pos
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Point2D)
		err := b.DecodeMessage(msg)
		m.Start = &RequestQueryPathing_StartPos{msg}
		return true, err
	case 2: // start.unit_tag
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Start = &RequestQueryPathing_UnitTag{UnitTag(x)}
		return true, err
	default:
		return false, nil
	}
}

func _RequestQueryPathing_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RequestQueryPathing)
	// start
	switch x := m.Start.(type) {
	case *RequestQueryPathing_StartPos:
		s := proto.Size(x.StartPos)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestQueryPathing_UnitTag:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.UnitTag))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ResponseQueryPathing struct {
	Distance float32 `protobuf:"fixed32,1,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (m *ResponseQueryPathing) Reset()         { *m = ResponseQueryPathing{} }
func (m *ResponseQueryPathing) String() string { return proto.CompactTextString(m) }
func (*ResponseQueryPathing) ProtoMessage()    {}
func (*ResponseQueryPathing) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_d0074ff9da7a4de3, []int{3}
}
func (m *ResponseQueryPathing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseQueryPathing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseQueryPathing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseQueryPathing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseQueryPathing.Merge(dst, src)
}
func (m *ResponseQueryPathing) XXX_Size() int {
	return m.Size()
}
func (m *ResponseQueryPathing) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseQueryPathing.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseQueryPathing proto.InternalMessageInfo

func (m *ResponseQueryPathing) GetDistance() float32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

// --------------------------------------------------------------------------------------------------
type RequestQueryAvailableAbilities struct {
	UnitTag UnitTag `protobuf:"varint,1,opt,name=unit_tag,json=unitTag,proto3,casttype=UnitTag" json:"unit_tag,omitempty"`
}

func (m *RequestQueryAvailableAbilities) Reset()         { *m = RequestQueryAvailableAbilities{} }
func (m *RequestQueryAvailableAbilities) String() string { return proto.CompactTextString(m) }
func (*RequestQueryAvailableAbilities) ProtoMessage()    {}
func (*RequestQueryAvailableAbilities) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_d0074ff9da7a4de3, []int{4}
}
func (m *RequestQueryAvailableAbilities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestQueryAvailableAbilities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestQueryAvailableAbilities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestQueryAvailableAbilities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestQueryAvailableAbilities.Merge(dst, src)
}
func (m *RequestQueryAvailableAbilities) XXX_Size() int {
	return m.Size()
}
func (m *RequestQueryAvailableAbilities) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestQueryAvailableAbilities.DiscardUnknown(m)
}

var xxx_messageInfo_RequestQueryAvailableAbilities proto.InternalMessageInfo

func (m *RequestQueryAvailableAbilities) GetUnitTag() UnitTag {
	if m != nil {
		return m.UnitTag
	}
	return 0
}

type ResponseQueryAvailableAbilities struct {
	Abilities  []*AvailableAbility `protobuf:"bytes,1,rep,name=abilities" json:"abilities,omitempty"`
	UnitTag    UnitTag             `protobuf:"varint,2,opt,name=unit_tag,json=unitTag,proto3,casttype=UnitTag" json:"unit_tag,omitempty"`
	UnitTypeId UnitTypeID          `protobuf:"varint,3,opt,name=unit_type_id,json=unitTypeId,proto3,casttype=UnitTypeID" json:"unit_type_id,omitempty"`
}

func (m *ResponseQueryAvailableAbilities) Reset()         { *m = ResponseQueryAvailableAbilities{} }
func (m *ResponseQueryAvailableAbilities) String() string { return proto.CompactTextString(m) }
func (*ResponseQueryAvailableAbilities) ProtoMessage()    {}
func (*ResponseQueryAvailableAbilities) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_d0074ff9da7a4de3, []int{5}
}
func (m *ResponseQueryAvailableAbilities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseQueryAvailableAbilities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseQueryAvailableAbilities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseQueryAvailableAbilities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseQueryAvailableAbilities.Merge(dst, src)
}
func (m *ResponseQueryAvailableAbilities) XXX_Size() int {
	return m.Size()
}
func (m *ResponseQueryAvailableAbilities) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseQueryAvailableAbilities.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseQueryAvailableAbilities proto.InternalMessageInfo

func (m *ResponseQueryAvailableAbilities) GetAbilities() []*AvailableAbility {
	if m != nil {
		return m.Abilities
	}
	return nil
}

func (m *ResponseQueryAvailableAbilities) GetUnitTag() UnitTag {
	if m != nil {
		return m.UnitTag
	}
	return 0
}

func (m *ResponseQueryAvailableAbilities) GetUnitTypeId() UnitTypeID {
	if m != nil {
		return m.UnitTypeId
	}
	return 0
}

// --------------------------------------------------------------------------------------------------
type RequestQueryBuildingPlacement struct {
	AbilityId      AbilityID `protobuf:"varint,1,opt,name=ability_id,json=abilityId,proto3,casttype=AbilityID" json:"ability_id,omitempty"`
	TargetPos      *Point2D  `protobuf:"bytes,2,opt,name=target_pos,json=targetPos" json:"target_pos,omitempty"`
	PlacingUnitTag UnitTag   `protobuf:"varint,3,opt,name=placing_unit_tag,json=placingUnitTag,proto3,casttype=UnitTag" json:"placing_unit_tag,omitempty"`
}

func (m *RequestQueryBuildingPlacement) Reset()         { *m = RequestQueryBuildingPlacement{} }
func (m *RequestQueryBuildingPlacement) String() string { return proto.CompactTextString(m) }
func (*RequestQueryBuildingPlacement) ProtoMessage()    {}
func (*RequestQueryBuildingPlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_d0074ff9da7a4de3, []int{6}
}
func (m *RequestQueryBuildingPlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestQueryBuildingPlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestQueryBuildingPlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RequestQueryBuildingPlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestQueryBuildingPlacement.Merge(dst, src)
}
func (m *RequestQueryBuildingPlacement) XXX_Size() int {
	return m.Size()
}
func (m *RequestQueryBuildingPlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestQueryBuildingPlacement.DiscardUnknown(m)
}

var xxx_messageInfo_RequestQueryBuildingPlacement proto.InternalMessageInfo

func (m *RequestQueryBuildingPlacement) GetAbilityId() AbilityID {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func (m *RequestQueryBuildingPlacement) GetTargetPos() *Point2D {
	if m != nil {
		return m.TargetPos
	}
	return nil
}

func (m *RequestQueryBuildingPlacement) GetPlacingUnitTag() UnitTag {
	if m != nil {
		return m.PlacingUnitTag
	}
	return 0
}

type ResponseQueryBuildingPlacement struct {
	Result ActionResult `protobuf:"varint,1,opt,name=result,proto3,enum=SC2APIProtocol.ActionResult" json:"result,omitempty"`
}

func (m *ResponseQueryBuildingPlacement) Reset()         { *m = ResponseQueryBuildingPlacement{} }
func (m *ResponseQueryBuildingPlacement) String() string { return proto.CompactTextString(m) }
func (*ResponseQueryBuildingPlacement) ProtoMessage()    {}
func (*ResponseQueryBuildingPlacement) Descriptor() ([]byte, []int) {
	return fileDescriptor_query_d0074ff9da7a4de3, []int{7}
}
func (m *ResponseQueryBuildingPlacement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseQueryBuildingPlacement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseQueryBuildingPlacement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResponseQueryBuildingPlacement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseQueryBuildingPlacement.Merge(dst, src)
}
func (m *ResponseQueryBuildingPlacement) XXX_Size() int {
	return m.Size()
}
func (m *ResponseQueryBuildingPlacement) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseQueryBuildingPlacement.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseQueryBuildingPlacement proto.InternalMessageInfo

func (m *ResponseQueryBuildingPlacement) GetResult() ActionResult {
	if m != nil {
		return m.Result
	}
	return ActionResult_nil
}

func init() {
	proto.RegisterType((*RequestQuery)(nil), "SC2APIProtocol.RequestQuery")
	proto.RegisterType((*ResponseQuery)(nil), "SC2APIProtocol.ResponseQuery")
	proto.RegisterType((*RequestQueryPathing)(nil), "SC2APIProtocol.RequestQueryPathing")
	proto.RegisterType((*ResponseQueryPathing)(nil), "SC2APIProtocol.ResponseQueryPathing")
	proto.RegisterType((*RequestQueryAvailableAbilities)(nil), "SC2APIProtocol.RequestQueryAvailableAbilities")
	proto.RegisterType((*ResponseQueryAvailableAbilities)(nil), "SC2APIProtocol.ResponseQueryAvailableAbilities")
	proto.RegisterType((*RequestQueryBuildingPlacement)(nil), "SC2APIProtocol.RequestQueryBuildingPlacement")
	proto.RegisterType((*ResponseQueryBuildingPlacement)(nil), "SC2APIProtocol.ResponseQueryBuildingPlacement")
}
func (m *RequestQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pathing) > 0 {
		for _, msg := range m.Pathing {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Abilities) > 0 {
		for _, msg := range m.Abilities {
			dAtA[i] = 0x12
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Placements) > 0 {
		for _, msg := range m.Placements {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IgnoreResourceRequirements {
		dAtA[i] = 0x20
		i++
		if m.IgnoreResourceRequirements {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ResponseQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pathing) > 0 {
		for _, msg := range m.Pathing {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Abilities) > 0 {
		for _, msg := range m.Abilities {
			dAtA[i] = 0x12
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Placements) > 0 {
		for _, msg := range m.Placements {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RequestQueryPathing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestQueryPathing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Start != nil {
		nn1, err := m.Start.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.EndPos != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.EndPos.Size()))
		n2, err := m.EndPos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RequestQueryPathing_StartPos) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.StartPos != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.StartPos.Size()))
		n3, err := m.StartPos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *RequestQueryPathing_UnitTag) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	i = encodeVarintQuery(dAtA, i, uint64(m.UnitTag))
	return i, nil
}
func (m *ResponseQueryPathing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseQueryPathing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Distance != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Distance))))
		i += 4
	}
	return i, nil
}

func (m *RequestQueryAvailableAbilities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestQueryAvailableAbilities) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnitTag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.UnitTag))
	}
	return i, nil
}

func (m *ResponseQueryAvailableAbilities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseQueryAvailableAbilities) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Abilities) > 0 {
		for _, msg := range m.Abilities {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.UnitTag != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.UnitTag))
	}
	if m.UnitTypeId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.UnitTypeId))
	}
	return i, nil
}

func (m *RequestQueryBuildingPlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestQueryBuildingPlacement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AbilityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.AbilityId))
	}
	if m.TargetPos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.TargetPos.Size()))
		n4, err := m.TargetPos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.PlacingUnitTag != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.PlacingUnitTag))
	}
	return i, nil
}

func (m *ResponseQueryBuildingPlacement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseQueryBuildingPlacement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuery(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pathing) > 0 {
		for _, e := range m.Pathing {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Abilities) > 0 {
		for _, e := range m.Abilities {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Placements) > 0 {
		for _, e := range m.Placements {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.IgnoreResourceRequirements {
		n += 2
	}
	return n
}

func (m *ResponseQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pathing) > 0 {
		for _, e := range m.Pathing {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Abilities) > 0 {
		for _, e := range m.Abilities {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Placements) > 0 {
		for _, e := range m.Placements {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *RequestQueryPathing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != nil {
		n += m.Start.Size()
	}
	if m.EndPos != nil {
		l = m.EndPos.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RequestQueryPathing_StartPos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartPos != nil {
		l = m.StartPos.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *RequestQueryPathing_UnitTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.UnitTag))
	return n
}
func (m *ResponseQueryPathing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Distance != 0 {
		n += 5
	}
	return n
}

func (m *RequestQueryAvailableAbilities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnitTag != 0 {
		n += 1 + sovQuery(uint64(m.UnitTag))
	}
	return n
}

func (m *ResponseQueryAvailableAbilities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Abilities) > 0 {
		for _, e := range m.Abilities {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.UnitTag != 0 {
		n += 1 + sovQuery(uint64(m.UnitTag))
	}
	if m.UnitTypeId != 0 {
		n += 1 + sovQuery(uint64(m.UnitTypeId))
	}
	return n
}

func (m *RequestQueryBuildingPlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbilityId != 0 {
		n += 1 + sovQuery(uint64(m.AbilityId))
	}
	if m.TargetPos != nil {
		l = m.TargetPos.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PlacingUnitTag != 0 {
		n += 1 + sovQuery(uint64(m.PlacingUnitTag))
	}
	return n
}

func (m *ResponseQueryBuildingPlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovQuery(uint64(m.Result))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pathing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pathing = append(m.Pathing, &RequestQueryPathing{})
			if err := m.Pathing[len(m.Pathing)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abilities = append(m.Abilities, &RequestQueryAvailableAbilities{})
			if err := m.Abilities[len(m.Abilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placements = append(m.Placements, &RequestQueryBuildingPlacement{})
			if err := m.Placements[len(m.Placements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IgnoreResourceRequirements", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IgnoreResourceRequirements = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pathing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pathing = append(m.Pathing, &ResponseQueryPathing{})
			if err := m.Pathing[len(m.Pathing)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abilities = append(m.Abilities, &ResponseQueryAvailableAbilities{})
			if err := m.Abilities[len(m.Abilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Placements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Placements = append(m.Placements, &ResponseQueryBuildingPlacement{})
			if err := m.Placements[len(m.Placements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestQueryPathing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestQueryPathing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestQueryPathing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Point2D{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Start = &RequestQueryPathing_StartPos{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTag", wireType)
			}
			var v UnitTag
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (UnitTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Start = &RequestQueryPathing_UnitTag{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndPos == nil {
				m.EndPos = &Point2D{}
			}
			if err := m.EndPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseQueryPathing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseQueryPathing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseQueryPathing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Distance = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestQueryAvailableAbilities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestQueryAvailableAbilities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestQueryAvailableAbilities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTag", wireType)
			}
			m.UnitTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitTag |= (UnitTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseQueryAvailableAbilities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseQueryAvailableAbilities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseQueryAvailableAbilities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Abilities = append(m.Abilities, &AvailableAbility{})
			if err := m.Abilities[len(m.Abilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTag", wireType)
			}
			m.UnitTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitTag |= (UnitTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitTypeId", wireType)
			}
			m.UnitTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitTypeId |= (UnitTypeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestQueryBuildingPlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestQueryBuildingPlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestQueryBuildingPlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityId", wireType)
			}
			m.AbilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityId |= (AbilityID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetPos == nil {
				m.TargetPos = &Point2D{}
			}
			if err := m.TargetPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlacingUnitTag", wireType)
			}
			m.PlacingUnitTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlacingUnitTag |= (UnitTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseQueryBuildingPlacement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseQueryBuildingPlacement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseQueryBuildingPlacement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ActionResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQuery(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQuery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("query.proto", fileDescriptor_query_d0074ff9da7a4de3) }

var fileDescriptor_query_d0074ff9da7a4de3 = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcd, 0x6e, 0xd3, 0x4e,
	0x14, 0xc5, 0x33, 0x49, 0xdb, 0x24, 0x37, 0x6d, 0xf4, 0xd7, 0xfc, 0x91, 0x88, 0xa2, 0xd6, 0x89,
	0x0c, 0xaa, 0xb2, 0x80, 0x80, 0x02, 0x74, 0x47, 0x45, 0x43, 0x17, 0x8d, 0x44, 0x91, 0x19, 0x3e,
	0x16, 0x6c, 0x22, 0xd7, 0x1e, 0x99, 0x91, 0xdc, 0x19, 0x77, 0x66, 0x8c, 0xe4, 0xb7, 0xe0, 0x41,
	0x58, 0xb1, 0x85, 0x07, 0x60, 0xd9, 0x25, 0xab, 0x0a, 0xb5, 0x7b, 0x1e, 0xa0, 0x2b, 0xe4, 0x8f,
	0x14, 0x13, 0x47, 0xc3, 0x6e, 0xae, 0x72, 0xee, 0x99, 0x33, 0xbf, 0x7b, 0x63, 0xe8, 0x9c, 0xc5,
	0x54, 0x26, 0xe3, 0x48, 0x0a, 0x2d, 0x70, 0xf7, 0xf5, 0xf3, 0xc9, 0x81, 0x33, 0x73, 0xd2, 0xc2,
	0x13, 0x61, 0x1f, 0x02, 0x11, 0x88, 0xfc, 0xb7, 0xfe, 0xa6, 0x27, 0x4e, 0x4f, 0x05, 0x2f, 0xaa,
	0x0e, 0x95, 0x52, 0xc8, 0xbc, 0xb0, 0x3f, 0xd7, 0x61, 0x93, 0xd0, 0xb3, 0x98, 0x2a, 0xfd, 0x2a,
	0x75, 0xc3, 0x4f, 0xa1, 0x19, 0xb9, 0xfa, 0x03, 0xe3, 0x41, 0x0f, 0x0d, 0x1b, 0xa3, 0xce, 0xe4,
	0xce, 0xf8, 0x6f, 0xe7, 0x71, 0x59, 0xee, 0xe4, 0x52, 0xb2, 0xe8, 0xc1, 0x2f, 0xa0, 0xed, 0x9e,
	0xb0, 0x90, 0x69, 0x46, 0x55, 0xaf, 0x9e, 0x19, 0x8c, 0x4d, 0x06, 0x07, 0x1f, 0x5d, 0x16, 0xba,
	0x27, 0x21, 0x3d, 0x58, 0x74, 0x91, 0x3f, 0x06, 0xf8, 0x18, 0x20, 0x0a, 0x5d, 0x8f, 0x9e, 0x52,
	0xae, 0x55, 0xaf, 0x91, 0xd9, 0xdd, 0x37, 0xd9, 0x4d, 0x63, 0x16, 0xfa, 0x8c, 0x07, 0xce, 0xa2,
	0x8b, 0x94, 0x0c, 0xf0, 0x33, 0xd8, 0x66, 0x01, 0x17, 0x92, 0xce, 0x25, 0x55, 0x22, 0x96, 0x5e,
	0x7a, 0x38, 0x8b, 0x99, 0x2c, 0x2e, 0x58, 0x1b, 0xa2, 0x51, 0x8b, 0xf4, 0x73, 0x0d, 0x29, 0x24,
	0xa4, 0xa4, 0xb0, 0x7f, 0x21, 0xd8, 0x22, 0x54, 0x45, 0x82, 0x2b, 0x9a, 0xf3, 0xda, 0x5f, 0xe6,
	0x75, 0xb7, 0x9a, 0xaf, 0xa4, 0xaf, 0x00, 0x3b, 0xae, 0x02, 0x7b, 0x60, 0x74, 0x30, 0x13, 0x7b,
	0xb9, 0x82, 0xd8, 0xd8, 0xe8, 0x67, 0x44, 0x66, 0x7f, 0x41, 0xf0, 0xff, 0x8a, 0x81, 0xe3, 0x3d,
	0x68, 0x2b, 0xed, 0x4a, 0x3d, 0x8f, 0x84, 0xea, 0xa1, 0x21, 0x1a, 0x75, 0x26, 0xb7, 0x97, 0xaf,
	0x71, 0x04, 0xe3, 0x7a, 0x72, 0x78, 0x54, 0x23, 0xad, 0x4c, 0xeb, 0x08, 0x85, 0x47, 0xd0, 0x8a,
	0x39, 0xd3, 0x73, 0xed, 0x06, 0xbd, 0xfa, 0x10, 0x8d, 0xd6, 0xa6, 0x9d, 0xeb, 0x8b, 0x41, 0xf3,
	0x2d, 0x67, 0xfa, 0x8d, 0x1b, 0x1c, 0xd5, 0x48, 0x33, 0xce, 0x8f, 0xf8, 0x21, 0x34, 0x29, 0xf7,
	0x33, 0xff, 0x86, 0xd1, 0x9f, 0x6c, 0x50, 0xee, 0x3b, 0x42, 0x4d, 0x9b, 0xb0, 0x9e, 0xdd, 0x63,
	0x4f, 0xe0, 0xd6, 0x2a, 0xe8, 0xb8, 0x0f, 0x2d, 0x9f, 0x29, 0xed, 0x72, 0x8f, 0x66, 0x99, 0xeb,
	0xe4, 0xa6, 0xb6, 0x8f, 0xc0, 0x32, 0xef, 0x25, 0xde, 0x2d, 0x45, 0x47, 0x95, 0xe8, 0x37, 0xc1,
	0xed, 0xaf, 0x08, 0x06, 0xff, 0x98, 0x18, 0xde, 0x2f, 0x4f, 0x3d, 0xdf, 0x9b, 0xe1, 0xf2, 0xf3,
	0x96, 0xda, 0x92, 0xf2, 0x98, 0x77, 0x8d, 0x18, 0xcb, 0x10, 0x37, 0x73, 0x5d, 0x12, 0xd1, 0x39,
	0xf3, 0x33, 0x92, 0x5b, 0xd3, 0xee, 0xf5, 0xc5, 0x00, 0x32, 0x6d, 0x12, 0xd1, 0xd9, 0x21, 0x81,
	0x78, 0x71, 0xf6, 0xed, 0x6f, 0x08, 0x76, 0x8c, 0xff, 0x28, 0x7c, 0x0f, 0x20, 0x0f, 0x92, 0xa4,
	0x8e, 0x29, 0x89, 0xf5, 0xe9, 0xd6, 0xf5, 0xc5, 0xa0, 0x5d, 0xe4, 0x9c, 0x1d, 0x2e, 0x92, 0x26,
	0x33, 0x1f, 0xef, 0x01, 0x68, 0x57, 0x06, 0x34, 0xdf, 0x94, 0xba, 0x79, 0x92, 0xed, 0x5c, 0x9a,
	0x2e, 0xca, 0x13, 0xf8, 0x2f, 0x5d, 0x43, 0xc6, 0x83, 0xf9, 0xcd, 0x4b, 0x1b, 0xd5, 0x97, 0x76,
	0x0b, 0x51, 0x51, 0xdb, 0xef, 0xd2, 0x31, 0x9a, 0xb6, 0x1b, 0x3f, 0x86, 0x0d, 0x49, 0x55, 0x1c,
	0xea, 0x2c, 0x7a, 0x77, 0xb2, 0x5d, 0xe1, 0xee, 0x69, 0x26, 0x38, 0xc9, 0x34, 0xa4, 0xd0, 0x4e,
	0x77, 0xbe, 0x5f, 0x5a, 0xe8, 0xfc, 0xd2, 0x42, 0x3f, 0x2f, 0x2d, 0xf4, 0xe9, 0xca, 0xaa, 0x9d,
	0x5f, 0x59, 0xb5, 0x1f, 0x57, 0x56, 0xed, 0x7d, 0xc3, 0x8d, 0xd8, 0xc9, 0x46, 0xf6, 0x35, 0x7d,
	0xf4, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x99, 0xb7, 0x4d, 0x93, 0x05, 0x00, 0x00,
}
