// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: data.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Attribute int32

const (
	Attribute_Attribute_not_specified Attribute = 0
	Attribute_Light                   Attribute = 1
	Attribute_Armored                 Attribute = 2
	Attribute_Biological              Attribute = 3
	Attribute_Mechanical              Attribute = 4
	Attribute_Robotic                 Attribute = 5
	Attribute_Psionic                 Attribute = 6
	Attribute_Massive                 Attribute = 7
	Attribute_Structure               Attribute = 8
	Attribute_Hover                   Attribute = 9
	Attribute_Heroic                  Attribute = 10
	Attribute_Summoned                Attribute = 11
)

var Attribute_name = map[int32]string{
	0:  "Attribute_not_specified",
	1:  "Light",
	2:  "Armored",
	3:  "Biological",
	4:  "Mechanical",
	5:  "Robotic",
	6:  "Psionic",
	7:  "Massive",
	8:  "Structure",
	9:  "Hover",
	10: "Heroic",
	11: "Summoned",
}
var Attribute_value = map[string]int32{
	"Attribute_not_specified": 0,
	"Light":                   1,
	"Armored":                 2,
	"Biological":              3,
	"Mechanical":              4,
	"Robotic":                 5,
	"Psionic":                 6,
	"Massive":                 7,
	"Structure":               8,
	"Hover":                   9,
	"Heroic":                  10,
	"Summoned":                11,
}

func (x Attribute) String() string {
	return proto.EnumName(Attribute_name, int32(x))
}
func (Attribute) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_data_fa8f0877e6287bad, []int{0}
}

type AbilityData_Target int32

const (
	AbilityData_Target_not_specified AbilityData_Target = 0
	AbilityData_None                 AbilityData_Target = 1
	AbilityData_Point                AbilityData_Target = 2
	AbilityData_Unit                 AbilityData_Target = 3
	AbilityData_PointOrUnit          AbilityData_Target = 4
	AbilityData_PointOrNone          AbilityData_Target = 5
)

var AbilityData_Target_name = map[int32]string{
	0: "Target_not_specified",
	1: "None",
	2: "Point",
	3: "Unit",
	4: "PointOrUnit",
	5: "PointOrNone",
}
var AbilityData_Target_value = map[string]int32{
	"Target_not_specified": 0,
	"None":                 1,
	"Point":                2,
	"Unit":                 3,
	"PointOrUnit":          4,
	"PointOrNone":          5,
}

func (x AbilityData_Target) String() string {
	return proto.EnumName(AbilityData_Target_name, int32(x))
}
func (AbilityData_Target) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_data_fa8f0877e6287bad, []int{0, 0}
}

type Weapon_TargetType int32

const (
	Weapon_TargetType_not_specified Weapon_TargetType = 0
	Weapon_Ground                   Weapon_TargetType = 1
	Weapon_Air                      Weapon_TargetType = 2
	Weapon_Any                      Weapon_TargetType = 3
)

var Weapon_TargetType_name = map[int32]string{
	0: "TargetType_not_specified",
	1: "Ground",
	2: "Air",
	3: "Any",
}
var Weapon_TargetType_value = map[string]int32{
	"TargetType_not_specified": 0,
	"Ground":                   1,
	"Air":                      2,
	"Any":                      3,
}

func (x Weapon_TargetType) String() string {
	return proto.EnumName(Weapon_TargetType_name, int32(x))
}
func (Weapon_TargetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_data_fa8f0877e6287bad, []int{2, 0}
}

// May not relevant: queueable (everything is queueable).
// May not be important: AbilSetId - marine stim, marauder stim.
// Stuff omitted: transient.
// Stuff that may be important: cost, range, Alignment, targetfilters.
type AbilityData struct {
	AbilityId          uint32             `protobuf:"varint,1,opt,name=ability_id,json=abilityId,proto3" json:"ability_id,omitempty"`
	LinkName           string             `protobuf:"bytes,2,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
	LinkIndex          uint32             `protobuf:"varint,3,opt,name=link_index,json=linkIndex,proto3" json:"link_index,omitempty"`
	ButtonName         string             `protobuf:"bytes,4,opt,name=button_name,json=buttonName,proto3" json:"button_name,omitempty"`
	FriendlyName       string             `protobuf:"bytes,5,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	Hotkey             string             `protobuf:"bytes,6,opt,name=hotkey,proto3" json:"hotkey,omitempty"`
	RemapsToAbilityId  uint32             `protobuf:"varint,7,opt,name=remaps_to_ability_id,json=remapsToAbilityId,proto3" json:"remaps_to_ability_id,omitempty"`
	Available          bool               `protobuf:"varint,8,opt,name=available,proto3" json:"available,omitempty"`
	Target             AbilityData_Target `protobuf:"varint,9,opt,name=target,proto3,enum=SC2APIProtocol.AbilityData_Target" json:"target,omitempty"`
	AllowMinimap       bool               `protobuf:"varint,10,opt,name=allow_minimap,json=allowMinimap,proto3" json:"allow_minimap,omitempty"`
	AllowAutocast      bool               `protobuf:"varint,11,opt,name=allow_autocast,json=allowAutocast,proto3" json:"allow_autocast,omitempty"`
	IsBuilding         bool               `protobuf:"varint,12,opt,name=is_building,json=isBuilding,proto3" json:"is_building,omitempty"`
	FootprintRadius    float32            `protobuf:"fixed32,13,opt,name=footprint_radius,json=footprintRadius,proto3" json:"footprint_radius,omitempty"`
	IsInstantPlacement bool               `protobuf:"varint,14,opt,name=is_instant_placement,json=isInstantPlacement,proto3" json:"is_instant_placement,omitempty"`
	CastRange          float32            `protobuf:"fixed32,15,opt,name=cast_range,json=castRange,proto3" json:"cast_range,omitempty"`
}

func (m *AbilityData) Reset()         { *m = AbilityData{} }
func (m *AbilityData) String() string { return proto.CompactTextString(m) }
func (*AbilityData) ProtoMessage()    {}
func (*AbilityData) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_fa8f0877e6287bad, []int{0}
}
func (m *AbilityData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AbilityData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AbilityData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AbilityData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbilityData.Merge(dst, src)
}
func (m *AbilityData) XXX_Size() int {
	return m.Size()
}
func (m *AbilityData) XXX_DiscardUnknown() {
	xxx_messageInfo_AbilityData.DiscardUnknown(m)
}

var xxx_messageInfo_AbilityData proto.InternalMessageInfo

func (m *AbilityData) GetAbilityId() uint32 {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func (m *AbilityData) GetLinkName() string {
	if m != nil {
		return m.LinkName
	}
	return ""
}

func (m *AbilityData) GetLinkIndex() uint32 {
	if m != nil {
		return m.LinkIndex
	}
	return 0
}

func (m *AbilityData) GetButtonName() string {
	if m != nil {
		return m.ButtonName
	}
	return ""
}

func (m *AbilityData) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

func (m *AbilityData) GetHotkey() string {
	if m != nil {
		return m.Hotkey
	}
	return ""
}

func (m *AbilityData) GetRemapsToAbilityId() uint32 {
	if m != nil {
		return m.RemapsToAbilityId
	}
	return 0
}

func (m *AbilityData) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *AbilityData) GetTarget() AbilityData_Target {
	if m != nil {
		return m.Target
	}
	return AbilityData_Target_not_specified
}

func (m *AbilityData) GetAllowMinimap() bool {
	if m != nil {
		return m.AllowMinimap
	}
	return false
}

func (m *AbilityData) GetAllowAutocast() bool {
	if m != nil {
		return m.AllowAutocast
	}
	return false
}

func (m *AbilityData) GetIsBuilding() bool {
	if m != nil {
		return m.IsBuilding
	}
	return false
}

func (m *AbilityData) GetFootprintRadius() float32 {
	if m != nil {
		return m.FootprintRadius
	}
	return 0
}

func (m *AbilityData) GetIsInstantPlacement() bool {
	if m != nil {
		return m.IsInstantPlacement
	}
	return false
}

func (m *AbilityData) GetCastRange() float32 {
	if m != nil {
		return m.CastRange
	}
	return 0
}

type DamageBonus struct {
	Attribute Attribute `protobuf:"varint,1,opt,name=attribute,proto3,enum=SC2APIProtocol.Attribute" json:"attribute,omitempty"`
	Bonus     float32   `protobuf:"fixed32,2,opt,name=bonus,proto3" json:"bonus,omitempty"`
}

func (m *DamageBonus) Reset()         { *m = DamageBonus{} }
func (m *DamageBonus) String() string { return proto.CompactTextString(m) }
func (*DamageBonus) ProtoMessage()    {}
func (*DamageBonus) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_fa8f0877e6287bad, []int{1}
}
func (m *DamageBonus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DamageBonus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DamageBonus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DamageBonus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DamageBonus.Merge(dst, src)
}
func (m *DamageBonus) XXX_Size() int {
	return m.Size()
}
func (m *DamageBonus) XXX_DiscardUnknown() {
	xxx_messageInfo_DamageBonus.DiscardUnknown(m)
}

var xxx_messageInfo_DamageBonus proto.InternalMessageInfo

func (m *DamageBonus) GetAttribute() Attribute {
	if m != nil {
		return m.Attribute
	}
	return Attribute_Attribute_not_specified
}

func (m *DamageBonus) GetBonus() float32 {
	if m != nil {
		return m.Bonus
	}
	return 0
}

type Weapon struct {
	Type        Weapon_TargetType `protobuf:"varint,1,opt,name=type,proto3,enum=SC2APIProtocol.Weapon_TargetType" json:"type,omitempty"`
	Damage      float32           `protobuf:"fixed32,2,opt,name=damage,proto3" json:"damage,omitempty"`
	DamageBonus []*DamageBonus    `protobuf:"bytes,3,rep,name=damage_bonus,json=damageBonus" json:"damage_bonus,omitempty"`
	Attacks     uint32            `protobuf:"varint,4,opt,name=attacks,proto3" json:"attacks,omitempty"`
	Range       float32           `protobuf:"fixed32,5,opt,name=range,proto3" json:"range,omitempty"`
	Speed       float32           `protobuf:"fixed32,6,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (m *Weapon) Reset()         { *m = Weapon{} }
func (m *Weapon) String() string { return proto.CompactTextString(m) }
func (*Weapon) ProtoMessage()    {}
func (*Weapon) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_fa8f0877e6287bad, []int{2}
}
func (m *Weapon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Weapon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Weapon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Weapon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Weapon.Merge(dst, src)
}
func (m *Weapon) XXX_Size() int {
	return m.Size()
}
func (m *Weapon) XXX_DiscardUnknown() {
	xxx_messageInfo_Weapon.DiscardUnknown(m)
}

var xxx_messageInfo_Weapon proto.InternalMessageInfo

func (m *Weapon) GetType() Weapon_TargetType {
	if m != nil {
		return m.Type
	}
	return Weapon_TargetType_not_specified
}

func (m *Weapon) GetDamage() float32 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *Weapon) GetDamageBonus() []*DamageBonus {
	if m != nil {
		return m.DamageBonus
	}
	return nil
}

func (m *Weapon) GetAttacks() uint32 {
	if m != nil {
		return m.Attacks
	}
	return 0
}

func (m *Weapon) GetRange() float32 {
	if m != nil {
		return m.Range
	}
	return 0
}

func (m *Weapon) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

type UnitTypeData struct {
	UnitId          uint32   `protobuf:"varint,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Available       bool     `protobuf:"varint,3,opt,name=available,proto3" json:"available,omitempty"`
	CargoSize       uint32   `protobuf:"varint,4,opt,name=cargo_size,json=cargoSize,proto3" json:"cargo_size,omitempty"`
	MineralCost     uint32   `protobuf:"varint,12,opt,name=mineral_cost,json=mineralCost,proto3" json:"mineral_cost,omitempty"`
	VespeneCost     uint32   `protobuf:"varint,13,opt,name=vespene_cost,json=vespeneCost,proto3" json:"vespene_cost,omitempty"`
	FoodRequired    float32  `protobuf:"fixed32,14,opt,name=food_required,json=foodRequired,proto3" json:"food_required,omitempty"`
	FoodProvided    float32  `protobuf:"fixed32,18,opt,name=food_provided,json=foodProvided,proto3" json:"food_provided,omitempty"`
	AbilityId       uint32   `protobuf:"varint,15,opt,name=ability_id,json=abilityId,proto3" json:"ability_id,omitempty"`
	Race            Race     `protobuf:"varint,16,opt,name=race,proto3,enum=SC2APIProtocol.Race" json:"race,omitempty"`
	BuildTime       float32  `protobuf:"fixed32,17,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`
	HasVespene      bool     `protobuf:"varint,19,opt,name=has_vespene,json=hasVespene,proto3" json:"has_vespene,omitempty"`
	HasMinerals     bool     `protobuf:"varint,20,opt,name=has_minerals,json=hasMinerals,proto3" json:"has_minerals,omitempty"`
	SightRange      float32  `protobuf:"fixed32,25,opt,name=sight_range,json=sightRange,proto3" json:"sight_range,omitempty"`
	TechAlias       []uint32 `protobuf:"varint,21,rep,packed,name=tech_alias,json=techAlias" json:"tech_alias,omitempty"`
	UnitAlias       uint32   `protobuf:"varint,22,opt,name=unit_alias,json=unitAlias,proto3" json:"unit_alias,omitempty"`
	TechRequirement uint32   `protobuf:"varint,23,opt,name=tech_requirement,json=techRequirement,proto3" json:"tech_requirement,omitempty"`
	RequireAttached bool     `protobuf:"varint,24,opt,name=require_attached,json=requireAttached,proto3" json:"require_attached,omitempty"`
	// Values include changes from upgrades
	Attributes    []Attribute `protobuf:"varint,8,rep,packed,name=attributes,enum=SC2APIProtocol.Attribute" json:"attributes,omitempty"`
	MovementSpeed float32     `protobuf:"fixed32,9,opt,name=movement_speed,json=movementSpeed,proto3" json:"movement_speed,omitempty"`
	Armor         float32     `protobuf:"fixed32,10,opt,name=armor,proto3" json:"armor,omitempty"`
	Weapons       []*Weapon   `protobuf:"bytes,11,rep,name=weapons" json:"weapons,omitempty"`
}

func (m *UnitTypeData) Reset()         { *m = UnitTypeData{} }
func (m *UnitTypeData) String() string { return proto.CompactTextString(m) }
func (*UnitTypeData) ProtoMessage()    {}
func (*UnitTypeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_fa8f0877e6287bad, []int{3}
}
func (m *UnitTypeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnitTypeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnitTypeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnitTypeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitTypeData.Merge(dst, src)
}
func (m *UnitTypeData) XXX_Size() int {
	return m.Size()
}
func (m *UnitTypeData) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitTypeData.DiscardUnknown(m)
}

var xxx_messageInfo_UnitTypeData proto.InternalMessageInfo

func (m *UnitTypeData) GetUnitId() uint32 {
	if m != nil {
		return m.UnitId
	}
	return 0
}

func (m *UnitTypeData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UnitTypeData) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *UnitTypeData) GetCargoSize() uint32 {
	if m != nil {
		return m.CargoSize
	}
	return 0
}

func (m *UnitTypeData) GetMineralCost() uint32 {
	if m != nil {
		return m.MineralCost
	}
	return 0
}

func (m *UnitTypeData) GetVespeneCost() uint32 {
	if m != nil {
		return m.VespeneCost
	}
	return 0
}

func (m *UnitTypeData) GetFoodRequired() float32 {
	if m != nil {
		return m.FoodRequired
	}
	return 0
}

func (m *UnitTypeData) GetFoodProvided() float32 {
	if m != nil {
		return m.FoodProvided
	}
	return 0
}

func (m *UnitTypeData) GetAbilityId() uint32 {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func (m *UnitTypeData) GetRace() Race {
	if m != nil {
		return m.Race
	}
	return Race_NoRace
}

func (m *UnitTypeData) GetBuildTime() float32 {
	if m != nil {
		return m.BuildTime
	}
	return 0
}

func (m *UnitTypeData) GetHasVespene() bool {
	if m != nil {
		return m.HasVespene
	}
	return false
}

func (m *UnitTypeData) GetHasMinerals() bool {
	if m != nil {
		return m.HasMinerals
	}
	return false
}

func (m *UnitTypeData) GetSightRange() float32 {
	if m != nil {
		return m.SightRange
	}
	return 0
}

func (m *UnitTypeData) GetTechAlias() []uint32 {
	if m != nil {
		return m.TechAlias
	}
	return nil
}

func (m *UnitTypeData) GetUnitAlias() uint32 {
	if m != nil {
		return m.UnitAlias
	}
	return 0
}

func (m *UnitTypeData) GetTechRequirement() uint32 {
	if m != nil {
		return m.TechRequirement
	}
	return 0
}

func (m *UnitTypeData) GetRequireAttached() bool {
	if m != nil {
		return m.RequireAttached
	}
	return false
}

func (m *UnitTypeData) GetAttributes() []Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *UnitTypeData) GetMovementSpeed() float32 {
	if m != nil {
		return m.MovementSpeed
	}
	return 0
}

func (m *UnitTypeData) GetArmor() float32 {
	if m != nil {
		return m.Armor
	}
	return 0
}

func (m *UnitTypeData) GetWeapons() []*Weapon {
	if m != nil {
		return m.Weapons
	}
	return nil
}

type UpgradeData struct {
	UpgradeId    uint32  `protobuf:"varint,1,opt,name=upgrade_id,json=upgradeId,proto3" json:"upgrade_id,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MineralCost  uint32  `protobuf:"varint,3,opt,name=mineral_cost,json=mineralCost,proto3" json:"mineral_cost,omitempty"`
	VespeneCost  uint32  `protobuf:"varint,4,opt,name=vespene_cost,json=vespeneCost,proto3" json:"vespene_cost,omitempty"`
	ResearchTime float32 `protobuf:"fixed32,5,opt,name=research_time,json=researchTime,proto3" json:"research_time,omitempty"`
	AbilityId    uint32  `protobuf:"varint,6,opt,name=ability_id,json=abilityId,proto3" json:"ability_id,omitempty"`
}

func (m *UpgradeData) Reset()         { *m = UpgradeData{} }
func (m *UpgradeData) String() string { return proto.CompactTextString(m) }
func (*UpgradeData) ProtoMessage()    {}
func (*UpgradeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_fa8f0877e6287bad, []int{4}
}
func (m *UpgradeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpgradeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpgradeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpgradeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpgradeData.Merge(dst, src)
}
func (m *UpgradeData) XXX_Size() int {
	return m.Size()
}
func (m *UpgradeData) XXX_DiscardUnknown() {
	xxx_messageInfo_UpgradeData.DiscardUnknown(m)
}

var xxx_messageInfo_UpgradeData proto.InternalMessageInfo

func (m *UpgradeData) GetUpgradeId() uint32 {
	if m != nil {
		return m.UpgradeId
	}
	return 0
}

func (m *UpgradeData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpgradeData) GetMineralCost() uint32 {
	if m != nil {
		return m.MineralCost
	}
	return 0
}

func (m *UpgradeData) GetVespeneCost() uint32 {
	if m != nil {
		return m.VespeneCost
	}
	return 0
}

func (m *UpgradeData) GetResearchTime() float32 {
	if m != nil {
		return m.ResearchTime
	}
	return 0
}

func (m *UpgradeData) GetAbilityId() uint32 {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

type BuffData struct {
	BuffId uint32 `protobuf:"varint,1,opt,name=buff_id,json=buffId,proto3" json:"buff_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *BuffData) Reset()         { *m = BuffData{} }
func (m *BuffData) String() string { return proto.CompactTextString(m) }
func (*BuffData) ProtoMessage()    {}
func (*BuffData) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_fa8f0877e6287bad, []int{5}
}
func (m *BuffData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuffData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuffData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BuffData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuffData.Merge(dst, src)
}
func (m *BuffData) XXX_Size() int {
	return m.Size()
}
func (m *BuffData) XXX_DiscardUnknown() {
	xxx_messageInfo_BuffData.DiscardUnknown(m)
}

var xxx_messageInfo_BuffData proto.InternalMessageInfo

func (m *BuffData) GetBuffId() uint32 {
	if m != nil {
		return m.BuffId
	}
	return 0
}

func (m *BuffData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EffectData struct {
	EffectId     uint32  `protobuf:"varint,1,opt,name=effect_id,json=effectId,proto3" json:"effect_id,omitempty"`
	Name         string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FriendlyName string  `protobuf:"bytes,3,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	Radius       float32 `protobuf:"fixed32,4,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (m *EffectData) Reset()         { *m = EffectData{} }
func (m *EffectData) String() string { return proto.CompactTextString(m) }
func (*EffectData) ProtoMessage()    {}
func (*EffectData) Descriptor() ([]byte, []int) {
	return fileDescriptor_data_fa8f0877e6287bad, []int{6}
}
func (m *EffectData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EffectData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EffectData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EffectData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectData.Merge(dst, src)
}
func (m *EffectData) XXX_Size() int {
	return m.Size()
}
func (m *EffectData) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectData.DiscardUnknown(m)
}

var xxx_messageInfo_EffectData proto.InternalMessageInfo

func (m *EffectData) GetEffectId() uint32 {
	if m != nil {
		return m.EffectId
	}
	return 0
}

func (m *EffectData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EffectData) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

func (m *EffectData) GetRadius() float32 {
	if m != nil {
		return m.Radius
	}
	return 0
}

func init() {
	proto.RegisterType((*AbilityData)(nil), "SC2APIProtocol.AbilityData")
	proto.RegisterType((*DamageBonus)(nil), "SC2APIProtocol.DamageBonus")
	proto.RegisterType((*Weapon)(nil), "SC2APIProtocol.Weapon")
	proto.RegisterType((*UnitTypeData)(nil), "SC2APIProtocol.UnitTypeData")
	proto.RegisterType((*UpgradeData)(nil), "SC2APIProtocol.UpgradeData")
	proto.RegisterType((*BuffData)(nil), "SC2APIProtocol.BuffData")
	proto.RegisterType((*EffectData)(nil), "SC2APIProtocol.EffectData")
	proto.RegisterEnum("SC2APIProtocol.Attribute", Attribute_name, Attribute_value)
	proto.RegisterEnum("SC2APIProtocol.AbilityData_Target", AbilityData_Target_name, AbilityData_Target_value)
	proto.RegisterEnum("SC2APIProtocol.Weapon_TargetType", Weapon_TargetType_name, Weapon_TargetType_value)
}
func (m *AbilityData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AbilityData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AbilityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintData(dAtA, i, uint64(m.AbilityId))
	}
	if len(m.LinkName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.LinkName)))
		i += copy(dAtA[i:], m.LinkName)
	}
	if m.LinkIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintData(dAtA, i, uint64(m.LinkIndex))
	}
	if len(m.ButtonName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.ButtonName)))
		i += copy(dAtA[i:], m.ButtonName)
	}
	if len(m.FriendlyName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.FriendlyName)))
		i += copy(dAtA[i:], m.FriendlyName)
	}
	if len(m.Hotkey) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Hotkey)))
		i += copy(dAtA[i:], m.Hotkey)
	}
	if m.RemapsToAbilityId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintData(dAtA, i, uint64(m.RemapsToAbilityId))
	}
	if m.Available {
		dAtA[i] = 0x40
		i++
		if m.Available {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Target != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Target))
	}
	if m.AllowMinimap {
		dAtA[i] = 0x50
		i++
		if m.AllowMinimap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AllowAutocast {
		dAtA[i] = 0x58
		i++
		if m.AllowAutocast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBuilding {
		dAtA[i] = 0x60
		i++
		if m.IsBuilding {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FootprintRadius != 0 {
		dAtA[i] = 0x6d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FootprintRadius))))
		i += 4
	}
	if m.IsInstantPlacement {
		dAtA[i] = 0x70
		i++
		if m.IsInstantPlacement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CastRange != 0 {
		dAtA[i] = 0x7d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CastRange))))
		i += 4
	}
	return i, nil
}

func (m *DamageBonus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DamageBonus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Attribute != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Attribute))
	}
	if m.Bonus != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Bonus))))
		i += 4
	}
	return i, nil
}

func (m *Weapon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Weapon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Type))
	}
	if m.Damage != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Damage))))
		i += 4
	}
	if len(m.DamageBonus) > 0 {
		for _, msg := range m.DamageBonus {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Attacks != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Attacks))
	}
	if m.Range != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Range))))
		i += 4
	}
	if m.Speed != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Speed))))
		i += 4
	}
	return i, nil
}

func (m *UnitTypeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitTypeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnitId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintData(dAtA, i, uint64(m.UnitId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Available {
		dAtA[i] = 0x18
		i++
		if m.Available {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CargoSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintData(dAtA, i, uint64(m.CargoSize))
	}
	if len(m.Attributes) > 0 {
		dAtA2 := make([]byte, len(m.Attributes)*10)
		var j1 int
		for _, num := range m.Attributes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintData(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.MovementSpeed != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MovementSpeed))))
		i += 4
	}
	if m.Armor != 0 {
		dAtA[i] = 0x55
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Armor))))
		i += 4
	}
	if len(m.Weapons) > 0 {
		for _, msg := range m.Weapons {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintData(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MineralCost != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintData(dAtA, i, uint64(m.MineralCost))
	}
	if m.VespeneCost != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintData(dAtA, i, uint64(m.VespeneCost))
	}
	if m.FoodRequired != 0 {
		dAtA[i] = 0x75
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FoodRequired))))
		i += 4
	}
	if m.AbilityId != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintData(dAtA, i, uint64(m.AbilityId))
	}
	if m.Race != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintData(dAtA, i, uint64(m.Race))
	}
	if m.BuildTime != 0 {
		dAtA[i] = 0x8d
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.BuildTime))))
		i += 4
	}
	if m.FoodProvided != 0 {
		dAtA[i] = 0x95
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FoodProvided))))
		i += 4
	}
	if m.HasVespene {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.HasVespene {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HasMinerals {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.HasMinerals {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.TechAlias) > 0 {
		dAtA4 := make([]byte, len(m.TechAlias)*10)
		var j3 int
		for _, num := range m.TechAlias {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintData(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.UnitAlias != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintData(dAtA, i, uint64(m.UnitAlias))
	}
	if m.TechRequirement != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintData(dAtA, i, uint64(m.TechRequirement))
	}
	if m.RequireAttached {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.RequireAttached {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SightRange != 0 {
		dAtA[i] = 0xcd
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SightRange))))
		i += 4
	}
	return i, nil
}

func (m *UpgradeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpgradeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpgradeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintData(dAtA, i, uint64(m.UpgradeId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.MineralCost != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintData(dAtA, i, uint64(m.MineralCost))
	}
	if m.VespeneCost != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintData(dAtA, i, uint64(m.VespeneCost))
	}
	if m.ResearchTime != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ResearchTime))))
		i += 4
	}
	if m.AbilityId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintData(dAtA, i, uint64(m.AbilityId))
	}
	return i, nil
}

func (m *BuffData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuffData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BuffId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintData(dAtA, i, uint64(m.BuffId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *EffectData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EffectData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EffectId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintData(dAtA, i, uint64(m.EffectId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.FriendlyName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintData(dAtA, i, uint64(len(m.FriendlyName)))
		i += copy(dAtA[i:], m.FriendlyName)
	}
	if m.Radius != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Radius))))
		i += 4
	}
	return i, nil
}

func encodeVarintData(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AbilityData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AbilityId != 0 {
		n += 1 + sovData(uint64(m.AbilityId))
	}
	l = len(m.LinkName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.LinkIndex != 0 {
		n += 1 + sovData(uint64(m.LinkIndex))
	}
	l = len(m.ButtonName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.FriendlyName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Hotkey)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.RemapsToAbilityId != 0 {
		n += 1 + sovData(uint64(m.RemapsToAbilityId))
	}
	if m.Available {
		n += 2
	}
	if m.Target != 0 {
		n += 1 + sovData(uint64(m.Target))
	}
	if m.AllowMinimap {
		n += 2
	}
	if m.AllowAutocast {
		n += 2
	}
	if m.IsBuilding {
		n += 2
	}
	if m.FootprintRadius != 0 {
		n += 5
	}
	if m.IsInstantPlacement {
		n += 2
	}
	if m.CastRange != 0 {
		n += 5
	}
	return n
}

func (m *DamageBonus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attribute != 0 {
		n += 1 + sovData(uint64(m.Attribute))
	}
	if m.Bonus != 0 {
		n += 5
	}
	return n
}

func (m *Weapon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovData(uint64(m.Type))
	}
	if m.Damage != 0 {
		n += 5
	}
	if len(m.DamageBonus) > 0 {
		for _, e := range m.DamageBonus {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	if m.Attacks != 0 {
		n += 1 + sovData(uint64(m.Attacks))
	}
	if m.Range != 0 {
		n += 5
	}
	if m.Speed != 0 {
		n += 5
	}
	return n
}

func (m *UnitTypeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnitId != 0 {
		n += 1 + sovData(uint64(m.UnitId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Available {
		n += 2
	}
	if m.CargoSize != 0 {
		n += 1 + sovData(uint64(m.CargoSize))
	}
	if len(m.Attributes) > 0 {
		l = 0
		for _, e := range m.Attributes {
			l += sovData(uint64(e))
		}
		n += 1 + sovData(uint64(l)) + l
	}
	if m.MovementSpeed != 0 {
		n += 5
	}
	if m.Armor != 0 {
		n += 5
	}
	if len(m.Weapons) > 0 {
		for _, e := range m.Weapons {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	if m.MineralCost != 0 {
		n += 1 + sovData(uint64(m.MineralCost))
	}
	if m.VespeneCost != 0 {
		n += 1 + sovData(uint64(m.VespeneCost))
	}
	if m.FoodRequired != 0 {
		n += 5
	}
	if m.AbilityId != 0 {
		n += 1 + sovData(uint64(m.AbilityId))
	}
	if m.Race != 0 {
		n += 2 + sovData(uint64(m.Race))
	}
	if m.BuildTime != 0 {
		n += 6
	}
	if m.FoodProvided != 0 {
		n += 6
	}
	if m.HasVespene {
		n += 3
	}
	if m.HasMinerals {
		n += 3
	}
	if len(m.TechAlias) > 0 {
		l = 0
		for _, e := range m.TechAlias {
			l += sovData(uint64(e))
		}
		n += 2 + sovData(uint64(l)) + l
	}
	if m.UnitAlias != 0 {
		n += 2 + sovData(uint64(m.UnitAlias))
	}
	if m.TechRequirement != 0 {
		n += 2 + sovData(uint64(m.TechRequirement))
	}
	if m.RequireAttached {
		n += 3
	}
	if m.SightRange != 0 {
		n += 6
	}
	return n
}

func (m *UpgradeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpgradeId != 0 {
		n += 1 + sovData(uint64(m.UpgradeId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.MineralCost != 0 {
		n += 1 + sovData(uint64(m.MineralCost))
	}
	if m.VespeneCost != 0 {
		n += 1 + sovData(uint64(m.VespeneCost))
	}
	if m.ResearchTime != 0 {
		n += 5
	}
	if m.AbilityId != 0 {
		n += 1 + sovData(uint64(m.AbilityId))
	}
	return n
}

func (m *BuffData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuffId != 0 {
		n += 1 + sovData(uint64(m.BuffId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *EffectData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectId != 0 {
		n += 1 + sovData(uint64(m.EffectId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.FriendlyName)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Radius != 0 {
		n += 5
	}
	return n
}

func sovData(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozData(x uint64) (n int) {
	return sovData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AbilityData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AbilityData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AbilityData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityId", wireType)
			}
			m.AbilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkIndex", wireType)
			}
			m.LinkIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinkIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendlyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendlyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hotkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hotkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemapsToAbilityId", wireType)
			}
			m.RemapsToAbilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemapsToAbilityId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (AbilityData_Target(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowMinimap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowMinimap = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowAutocast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowAutocast = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuilding", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuilding = bool(v != 0)
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FootprintRadius", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FootprintRadius = float32(math.Float32frombits(v))
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInstantPlacement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInstantPlacement = bool(v != 0)
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CastRange", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CastRange = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DamageBonus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DamageBonus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DamageBonus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= (Attribute(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bonus", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Bonus = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Weapon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Weapon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Weapon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Weapon_TargetType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Damage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Damage = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DamageBonus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DamageBonus = append(m.DamageBonus, &DamageBonus{})
			if err := m.DamageBonus[len(m.DamageBonus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attacks", wireType)
			}
			m.Attacks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attacks |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Range = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Speed = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitTypeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitTypeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitTypeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitId", wireType)
			}
			m.UnitId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CargoSize", wireType)
			}
			m.CargoSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CargoSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v Attribute
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Attribute(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Attributes = append(m.Attributes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Attributes) == 0 {
					m.Attributes = make([]Attribute, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Attribute
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Attribute(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Attributes = append(m.Attributes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovementSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MovementSpeed = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Armor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Armor = float32(math.Float32frombits(v))
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weapons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weapons = append(m.Weapons, &Weapon{})
			if err := m.Weapons[len(m.Weapons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MineralCost", wireType)
			}
			m.MineralCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MineralCost |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VespeneCost", wireType)
			}
			m.VespeneCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VespeneCost |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodRequired", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FoodRequired = float32(math.Float32frombits(v))
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityId", wireType)
			}
			m.AbilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Race", wireType)
			}
			m.Race = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Race |= (Race(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.BuildTime = float32(math.Float32frombits(v))
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodProvided", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FoodProvided = float32(math.Float32frombits(v))
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasVespene", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasVespene = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMinerals", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMinerals = bool(v != 0)
		case 21:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TechAlias = append(m.TechAlias, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthData
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TechAlias) == 0 {
					m.TechAlias = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TechAlias = append(m.TechAlias, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TechAlias", wireType)
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitAlias", wireType)
			}
			m.UnitAlias = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitAlias |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechRequirement", wireType)
			}
			m.TechRequirement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TechRequirement |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireAttached", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequireAttached = bool(v != 0)
		case 25:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SightRange", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SightRange = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpgradeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpgradeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpgradeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeId", wireType)
			}
			m.UpgradeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MineralCost", wireType)
			}
			m.MineralCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MineralCost |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VespeneCost", wireType)
			}
			m.VespeneCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VespeneCost |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResearchTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ResearchTime = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityId", wireType)
			}
			m.AbilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuffData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuffData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuffData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffId", wireType)
			}
			m.BuffId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EffectData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectId", wireType)
			}
			m.EffectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendlyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendlyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Radius = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthData
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowData
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipData(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthData = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowData   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("data.proto", fileDescriptor_data_fa8f0877e6287bad) }

var fileDescriptor_data_fa8f0877e6287bad = []byte{
	// 1219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x96, 0xdf, 0x6e, 0x1b, 0xc5,
	0x17, 0xc7, 0xb3, 0x5e, 0xdb, 0xf1, 0x1e, 0xdb, 0xc9, 0x76, 0x7e, 0xf9, 0xb5, 0x5b, 0xd2, 0x06,
	0xd7, 0x08, 0xc9, 0xe5, 0x22, 0x54, 0x41, 0xa8, 0x82, 0x0b, 0x24, 0xa7, 0x45, 0x34, 0x12, 0x29,
	0xd1, 0x26, 0x05, 0x09, 0x21, 0xad, 0xc6, 0xbb, 0x63, 0x7b, 0xd4, 0xdd, 0x99, 0x65, 0x66, 0x36,
	0x25, 0x7d, 0x0a, 0x24, 0x1e, 0x80, 0x4b, 0x1e, 0x82, 0x17, 0x40, 0x5c, 0xf5, 0x92, 0x4b, 0xd4,
	0xbe, 0x08, 0x9a, 0x33, 0xeb, 0xd8, 0x75, 0x52, 0xb8, 0xdb, 0xf3, 0x99, 0xef, 0x19, 0xcf, 0x99,
	0xf3, 0x67, 0x0c, 0x90, 0x51, 0x43, 0xf7, 0x4b, 0x25, 0x8d, 0x24, 0x5b, 0xa7, 0x8f, 0x0e, 0xc6,
	0x27, 0x47, 0x27, 0xd6, 0x48, 0x65, 0xfe, 0x5e, 0x2f, 0x95, 0x45, 0x21, 0x85, 0x5b, 0x1d, 0xfe,
	0xda, 0x82, 0xee, 0x78, 0xc2, 0x73, 0x6e, 0x2e, 0x1e, 0x53, 0x43, 0xc9, 0x5d, 0x00, 0xea, 0xcc,
	0x84, 0x67, 0x91, 0x37, 0xf0, 0x46, 0xfd, 0x38, 0xa8, 0xc9, 0x51, 0x46, 0x76, 0x21, 0xc8, 0xb9,
	0x78, 0x9e, 0x08, 0x5a, 0xb0, 0xa8, 0x31, 0xf0, 0x46, 0x41, 0xdc, 0xb1, 0xe0, 0x29, 0x2d, 0x98,
	0xf5, 0xc5, 0x45, 0x2e, 0x32, 0xf6, 0x53, 0xe4, 0x3b, 0x5f, 0x4b, 0x8e, 0x2c, 0x20, 0xef, 0x43,
	0x77, 0x52, 0x19, 0x23, 0x85, 0xf3, 0x6e, 0xa2, 0x37, 0x38, 0x84, 0xfe, 0x1f, 0x40, 0x7f, 0xaa,
	0x38, 0x13, 0x59, 0x7e, 0xe1, 0x24, 0x2d, 0x94, 0xf4, 0x16, 0x10, 0x45, 0x37, 0xa1, 0x3d, 0x97,
	0xe6, 0x39, 0xbb, 0x88, 0xda, 0xb8, 0x5a, 0x5b, 0xe4, 0x63, 0xd8, 0x51, 0xac, 0xa0, 0xa5, 0x4e,
	0x8c, 0x4c, 0x56, 0x42, 0xd8, 0xc4, 0x63, 0xdc, 0x70, 0x6b, 0x67, 0x72, 0x7c, 0x19, 0xca, 0x1d,
	0x08, 0xe8, 0x39, 0xe5, 0x39, 0x9d, 0xe4, 0x2c, 0xea, 0x0c, 0xbc, 0x51, 0x27, 0x5e, 0x02, 0xf2,
	0x39, 0xb4, 0x0d, 0x55, 0x33, 0x66, 0xa2, 0x60, 0xe0, 0x8d, 0xb6, 0x0e, 0x86, 0xfb, 0x6f, 0x5f,
	0xe3, 0xfe, 0xca, 0xa5, 0xed, 0x9f, 0xa1, 0x32, 0xae, 0x3d, 0x6c, 0x1c, 0x34, 0xcf, 0xe5, 0x8b,
	0xa4, 0xe0, 0x82, 0x17, 0xb4, 0x8c, 0x00, 0x77, 0xef, 0x21, 0x3c, 0x76, 0x8c, 0x7c, 0x08, 0x5b,
	0x4e, 0x44, 0x2b, 0x23, 0x53, 0xaa, 0x4d, 0xd4, 0x45, 0x95, 0x73, 0x1d, 0xd7, 0xd0, 0x5e, 0x1a,
	0xd7, 0xc9, 0xa4, 0xe2, 0x79, 0xc6, 0xc5, 0x2c, 0xea, 0xa1, 0x06, 0xb8, 0x3e, 0xac, 0x09, 0xb9,
	0x0f, 0xe1, 0x54, 0x4a, 0x53, 0x2a, 0x2e, 0x4c, 0xa2, 0x68, 0xc6, 0x2b, 0x1d, 0xf5, 0x07, 0xde,
	0xa8, 0x11, 0x6f, 0x5f, 0xf2, 0x18, 0x31, 0x79, 0x00, 0x3b, 0x5c, 0x27, 0x5c, 0x68, 0x43, 0x85,
	0x49, 0xca, 0x9c, 0xa6, 0xac, 0x60, 0xc2, 0x44, 0x5b, 0xb8, 0x29, 0xe1, 0xfa, 0xc8, 0x2d, 0x9d,
	0x2c, 0x56, 0x6c, 0x46, 0xed, 0x29, 0x12, 0x45, 0xc5, 0x8c, 0x45, 0xdb, 0xb8, 0x6d, 0x60, 0x49,
	0x6c, 0xc1, 0x30, 0x85, 0xb6, 0x0b, 0x9d, 0x44, 0xb0, 0xe3, 0xbe, 0x12, 0x21, 0x4d, 0xa2, 0x4b,
	0x96, 0xf2, 0x29, 0x67, 0x59, 0xb8, 0x41, 0x3a, 0xd0, 0x7c, 0x2a, 0x05, 0x0b, 0x3d, 0x12, 0x40,
	0xeb, 0x44, 0x72, 0x61, 0xc2, 0x86, 0x85, 0xcf, 0x04, 0x37, 0xa1, 0x4f, 0xb6, 0xa1, 0x8b, 0xf0,
	0x1b, 0x85, 0xa0, 0xb9, 0x02, 0xd0, 0xad, 0x35, 0xfc, 0x01, 0xba, 0x8f, 0x69, 0x41, 0x67, 0xec,
	0x50, 0x8a, 0x4a, 0x93, 0x87, 0x10, 0x50, 0x63, 0x14, 0x9f, 0x54, 0x86, 0x61, 0x7d, 0x6e, 0x1d,
	0xdc, 0xbe, 0x92, 0x9b, 0x85, 0x20, 0x5e, 0x6a, 0xc9, 0x0e, 0xb4, 0x26, 0x76, 0x07, 0x2c, 0xdb,
	0x46, 0xec, 0x8c, 0xe1, 0x6f, 0x0d, 0x68, 0x7f, 0xc7, 0x68, 0x29, 0x05, 0xf9, 0x14, 0x9a, 0xe6,
	0xa2, 0x5c, 0x6c, 0x7a, 0x6f, 0x7d, 0x53, 0xa7, 0xaa, 0x73, 0x7d, 0x76, 0x51, 0xb2, 0x18, 0xe5,
	0xb6, 0x20, 0x33, 0x3c, 0x5f, 0xbd, 0x71, 0x6d, 0x91, 0x2f, 0xa0, 0xe7, 0xbe, 0x12, 0xf7, 0xb3,
	0xfe, 0xc0, 0x1f, 0x75, 0x0f, 0x76, 0xd7, 0xb7, 0x5d, 0x89, 0x2d, 0xee, 0x66, 0x2b, 0x81, 0x46,
	0xb0, 0x49, 0x8d, 0xa1, 0xe9, 0x73, 0x8d, 0xad, 0xd2, 0x8f, 0x17, 0xa6, 0x8d, 0xc4, 0x25, 0xa4,
	0xe5, 0x22, 0x41, 0xc3, 0x52, 0x5d, 0x32, 0x96, 0x61, 0x5f, 0x34, 0x62, 0x67, 0x0c, 0x9f, 0x00,
	0x2c, 0x4f, 0x4c, 0xee, 0x40, 0xb4, 0xb4, 0xae, 0xa4, 0x0a, 0xa0, 0xfd, 0x95, 0x92, 0x95, 0xc8,
	0x42, 0x8f, 0x6c, 0x82, 0x3f, 0xe6, 0x2a, 0x6c, 0xe0, 0x87, 0xb8, 0x08, 0xfd, 0xe1, 0x2f, 0x6d,
	0xe8, 0xd9, 0x1c, 0x59, 0x57, 0x1c, 0x15, 0xb7, 0x60, 0xb3, 0x12, 0xdc, 0x2c, 0xe7, 0x44, 0xdb,
	0x9a, 0x47, 0x19, 0x21, 0xd0, 0x5c, 0x99, 0x0f, 0xf8, 0xfd, 0x76, 0xb7, 0xf9, 0xeb, 0xdd, 0x86,
	0x75, 0xa6, 0x66, 0x32, 0xd1, 0xfc, 0x25, 0xab, 0xc3, 0x0d, 0x90, 0x9c, 0xf2, 0x97, 0x8c, 0x7c,
	0x06, 0x70, 0x99, 0x47, 0x1d, 0x75, 0x06, 0xfe, 0xbf, 0x27, 0x7d, 0x45, 0x6c, 0xdb, 0xac, 0x90,
	0xe7, 0x58, 0xcd, 0x89, 0xbb, 0x9e, 0x00, 0xaf, 0xa7, 0xbf, 0xa0, 0xa7, 0x16, 0xda, 0xcb, 0xa3,
	0xaa, 0x90, 0x0a, 0x5b, 0xb5, 0x11, 0x3b, 0x83, 0x3c, 0x80, 0xcd, 0x17, 0x98, 0x75, 0x1d, 0x75,
	0x31, 0x7b, 0x37, 0xaf, 0x2f, 0x8a, 0x78, 0x21, 0x23, 0xf7, 0xa0, 0x57, 0x70, 0xc1, 0x14, 0xcd,
	0x93, 0x54, 0x6a, 0x83, 0xfd, 0xda, 0x8f, 0xbb, 0x35, 0x7b, 0x24, 0xb5, 0xb1, 0x92, 0x73, 0xa6,
	0x4b, 0x26, 0x98, 0x93, 0xf4, 0x9d, 0xa4, 0x66, 0x28, 0xb1, 0x83, 0x50, 0xca, 0x2c, 0x51, 0xec,
	0xc7, 0x8a, 0x2b, 0x96, 0x61, 0x87, 0x36, 0xe2, 0x9e, 0x85, 0x71, 0xcd, 0xd6, 0x26, 0xf5, 0xf6,
	0xfa, 0xa4, 0x1e, 0x41, 0x53, 0xd1, 0x94, 0x45, 0x21, 0x56, 0xf3, 0xce, 0xfa, 0xc1, 0x63, 0x9a,
	0xb2, 0x18, 0x15, 0x76, 0x23, 0x9c, 0x2f, 0x89, 0xe1, 0x05, 0x8b, 0x6e, 0xb8, 0x26, 0x47, 0x72,
	0xc6, 0xeb, 0xa9, 0x6c, 0x0f, 0x53, 0x2a, 0x79, 0xce, 0x33, 0x96, 0x45, 0x64, 0x79, 0x98, 0x93,
	0x9a, 0xd9, 0x31, 0x35, 0xa7, 0x3a, 0xa9, 0x83, 0x88, 0xfe, 0xe7, 0xc6, 0xd4, 0x9c, 0xea, 0x6f,
	0x1d, 0xb1, 0x51, 0x5b, 0x41, 0x7d, 0x11, 0x3a, 0xda, 0x41, 0x85, 0x75, 0x3a, 0xae, 0x91, 0x3d,
	0x87, 0x61, 0xe9, 0x3c, 0xa1, 0x39, 0xa7, 0x3a, 0xfa, 0xff, 0xc0, 0xb7, 0x01, 0x59, 0x32, 0xb6,
	0xc0, 0x2e, 0x63, 0xb9, 0xb9, 0xe5, 0x9b, 0x2e, 0x5e, 0x4b, 0xdc, 0xf2, 0x7d, 0x08, 0xd1, 0xbb,
	0xbe, 0x33, 0x1c, 0x6c, 0xb7, 0x50, 0xb4, 0x6d, 0x79, 0xbc, 0xc4, 0x56, 0x5a, 0xab, 0x12, 0x6c,
	0xa9, 0x39, 0xcb, 0xa2, 0x08, 0xcf, 0xb3, 0x5d, 0xf3, 0x71, 0x8d, 0x6d, 0x5c, 0x9a, 0xcf, 0xe6,
	0x8b, 0x09, 0x78, 0x1b, 0x43, 0x07, 0x44, 0x6e, 0x04, 0xfe, 0xe9, 0x41, 0xf7, 0x59, 0x39, 0x53,
	0x34, 0x63, 0x8b, 0xf7, 0xb3, 0x72, 0xe6, 0xca, 0xfb, 0x59, 0x93, 0x77, 0xb4, 0xc6, 0x7a, 0xcd,
	0xf8, 0xff, 0x5d, 0x33, 0xcd, 0x6b, 0x6b, 0x46, 0x31, 0xcd, 0xa8, 0x4a, 0xe7, 0x2e, 0x91, 0x6e,
	0x38, 0xf4, 0x16, 0x10, 0x73, 0xf9, 0x76, 0xcd, 0xb4, 0xd7, 0x6a, 0x66, 0xf8, 0x10, 0x3a, 0x87,
	0xd5, 0x74, 0xba, 0xe8, 0xee, 0x49, 0x35, 0x9d, 0xae, 0x74, 0xb7, 0x35, 0xaf, 0x0f, 0x61, 0xf8,
	0x12, 0xe0, 0xcb, 0xe9, 0x94, 0xa5, 0x06, 0x5d, 0x77, 0x21, 0x60, 0x68, 0x2d, 0x9d, 0x3b, 0x0e,
	0xbc, 0xe3, 0x06, 0xae, 0x3c, 0xfc, 0xfe, 0xf5, 0x0f, 0x7f, 0xfd, 0xbc, 0x35, 0xdd, 0x9c, 0x75,
	0xd6, 0x47, 0xbf, 0x7b, 0x10, 0x5c, 0xf6, 0x3e, 0xd9, 0x85, 0x5b, 0x97, 0xc6, 0x95, 0x01, 0x17,
	0x40, 0xeb, 0x6b, 0x9b, 0xba, 0xd0, 0x23, 0x5d, 0xd8, 0x1c, 0xdb, 0x1e, 0x67, 0x59, 0xd8, 0x20,
	0x5b, 0x00, 0x87, 0x5c, 0xe6, 0x72, 0xc6, 0x53, 0x9a, 0x87, 0xbe, 0xb5, 0x8f, 0x59, 0x3a, 0xa7,
	0x02, 0xed, 0xa6, 0x15, 0xc7, 0x72, 0x22, 0x0d, 0x4f, 0xc3, 0x96, 0x35, 0x4e, 0x34, 0x97, 0x82,
	0xa7, 0x61, 0xdb, 0x1a, 0xc7, 0x54, 0x6b, 0x7e, 0xce, 0xc2, 0x4d, 0xd2, 0x87, 0xe0, 0xd4, 0xa8,
	0x2a, 0x35, 0x95, 0x62, 0x61, 0xc7, 0xfe, 0xda, 0x13, 0x79, 0xce, 0x54, 0x18, 0xd8, 0xc9, 0xfa,
	0x84, 0x29, 0xc9, 0xd3, 0x10, 0x48, 0x0f, 0x3a, 0xa7, 0x95, 0xfd, 0x07, 0xc6, 0xb2, 0xb0, 0x7b,
	0x78, 0xf7, 0x8f, 0xd7, 0x7b, 0xde, 0xab, 0xd7, 0x7b, 0xde, 0xdf, 0xaf, 0xf7, 0xbc, 0x9f, 0xdf,
	0xec, 0x6d, 0xbc, 0x7a, 0xb3, 0xb7, 0xf1, 0xd7, 0x9b, 0xbd, 0x8d, 0xef, 0x7d, 0x5a, 0xf2, 0x49,
	0x1b, 0xff, 0xa5, 0x7d, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x62, 0xca, 0x7d, 0xd1,
	0x09, 0x00, 0x00,
}
